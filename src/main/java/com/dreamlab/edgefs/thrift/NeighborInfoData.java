/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dreamlab.edgefs.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-25")
public class NeighborInfoData implements org.apache.thrift.TBase<NeighborInfoData, NeighborInfoData._Fields>, java.io.Serializable, Cloneable, Comparable<NeighborInfoData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NeighborInfoData");

  private static final org.apache.thrift.protocol.TField NODE_INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInstance", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BUDDY_POOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("buddyPoolId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField POOL_RELIABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("pool_reliability", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pool_size", org.apache.thrift.protocol.TType.I16, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NeighborInfoDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NeighborInfoDataTupleSchemeFactory();

  public NodeInfoData nodeInstance; // required
  public short buddyPoolId; // required
  public double pool_reliability; // required
  public short pool_size; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_INSTANCE((short)1, "nodeInstance"),
    BUDDY_POOL_ID((short)2, "buddyPoolId"),
    POOL_RELIABILITY((short)3, "pool_reliability"),
    POOL_SIZE((short)4, "pool_size");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_INSTANCE
          return NODE_INSTANCE;
        case 2: // BUDDY_POOL_ID
          return BUDDY_POOL_ID;
        case 3: // POOL_RELIABILITY
          return POOL_RELIABILITY;
        case 4: // POOL_SIZE
          return POOL_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUDDYPOOLID_ISSET_ID = 0;
  private static final int __POOL_RELIABILITY_ISSET_ID = 1;
  private static final int __POOL_SIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("nodeInstance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfoData.class)));
    tmpMap.put(_Fields.BUDDY_POOL_ID, new org.apache.thrift.meta_data.FieldMetaData("buddyPoolId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.POOL_RELIABILITY, new org.apache.thrift.meta_data.FieldMetaData("pool_reliability", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pool_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NeighborInfoData.class, metaDataMap);
  }

  public NeighborInfoData() {
  }

  public NeighborInfoData(
    NodeInfoData nodeInstance,
    short buddyPoolId,
    double pool_reliability,
    short pool_size)
  {
    this();
    this.nodeInstance = nodeInstance;
    this.buddyPoolId = buddyPoolId;
    setBuddyPoolIdIsSet(true);
    this.pool_reliability = pool_reliability;
    setPool_reliabilityIsSet(true);
    this.pool_size = pool_size;
    setPool_sizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NeighborInfoData(NeighborInfoData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeInstance()) {
      this.nodeInstance = new NodeInfoData(other.nodeInstance);
    }
    this.buddyPoolId = other.buddyPoolId;
    this.pool_reliability = other.pool_reliability;
    this.pool_size = other.pool_size;
  }

  public NeighborInfoData deepCopy() {
    return new NeighborInfoData(this);
  }

  @Override
  public void clear() {
    this.nodeInstance = null;
    setBuddyPoolIdIsSet(false);
    this.buddyPoolId = 0;
    setPool_reliabilityIsSet(false);
    this.pool_reliability = 0.0;
    setPool_sizeIsSet(false);
    this.pool_size = 0;
  }

  public NodeInfoData getNodeInstance() {
    return this.nodeInstance;
  }

  public NeighborInfoData setNodeInstance(NodeInfoData nodeInstance) {
    this.nodeInstance = nodeInstance;
    return this;
  }

  public void unsetNodeInstance() {
    this.nodeInstance = null;
  }

  /** Returns true if field nodeInstance is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeInstance() {
    return this.nodeInstance != null;
  }

  public void setNodeInstanceIsSet(boolean value) {
    if (!value) {
      this.nodeInstance = null;
    }
  }

  public short getBuddyPoolId() {
    return this.buddyPoolId;
  }

  public NeighborInfoData setBuddyPoolId(short buddyPoolId) {
    this.buddyPoolId = buddyPoolId;
    setBuddyPoolIdIsSet(true);
    return this;
  }

  public void unsetBuddyPoolId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUDDYPOOLID_ISSET_ID);
  }

  /** Returns true if field buddyPoolId is set (has been assigned a value) and false otherwise */
  public boolean isSetBuddyPoolId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUDDYPOOLID_ISSET_ID);
  }

  public void setBuddyPoolIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUDDYPOOLID_ISSET_ID, value);
  }

  public double getPool_reliability() {
    return this.pool_reliability;
  }

  public NeighborInfoData setPool_reliability(double pool_reliability) {
    this.pool_reliability = pool_reliability;
    setPool_reliabilityIsSet(true);
    return this;
  }

  public void unsetPool_reliability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POOL_RELIABILITY_ISSET_ID);
  }

  /** Returns true if field pool_reliability is set (has been assigned a value) and false otherwise */
  public boolean isSetPool_reliability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POOL_RELIABILITY_ISSET_ID);
  }

  public void setPool_reliabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POOL_RELIABILITY_ISSET_ID, value);
  }

  public short getPool_size() {
    return this.pool_size;
  }

  public NeighborInfoData setPool_size(short pool_size) {
    this.pool_size = pool_size;
    setPool_sizeIsSet(true);
    return this;
  }

  public void unsetPool_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POOL_SIZE_ISSET_ID);
  }

  /** Returns true if field pool_size is set (has been assigned a value) and false otherwise */
  public boolean isSetPool_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POOL_SIZE_ISSET_ID);
  }

  public void setPool_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POOL_SIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NODE_INSTANCE:
      if (value == null) {
        unsetNodeInstance();
      } else {
        setNodeInstance((NodeInfoData)value);
      }
      break;

    case BUDDY_POOL_ID:
      if (value == null) {
        unsetBuddyPoolId();
      } else {
        setBuddyPoolId((java.lang.Short)value);
      }
      break;

    case POOL_RELIABILITY:
      if (value == null) {
        unsetPool_reliability();
      } else {
        setPool_reliability((java.lang.Double)value);
      }
      break;

    case POOL_SIZE:
      if (value == null) {
        unsetPool_size();
      } else {
        setPool_size((java.lang.Short)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_INSTANCE:
      return getNodeInstance();

    case BUDDY_POOL_ID:
      return getBuddyPoolId();

    case POOL_RELIABILITY:
      return getPool_reliability();

    case POOL_SIZE:
      return getPool_size();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_INSTANCE:
      return isSetNodeInstance();
    case BUDDY_POOL_ID:
      return isSetBuddyPoolId();
    case POOL_RELIABILITY:
      return isSetPool_reliability();
    case POOL_SIZE:
      return isSetPool_size();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NeighborInfoData)
      return this.equals((NeighborInfoData)that);
    return false;
  }

  public boolean equals(NeighborInfoData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeInstance = true && this.isSetNodeInstance();
    boolean that_present_nodeInstance = true && that.isSetNodeInstance();
    if (this_present_nodeInstance || that_present_nodeInstance) {
      if (!(this_present_nodeInstance && that_present_nodeInstance))
        return false;
      if (!this.nodeInstance.equals(that.nodeInstance))
        return false;
    }

    boolean this_present_buddyPoolId = true;
    boolean that_present_buddyPoolId = true;
    if (this_present_buddyPoolId || that_present_buddyPoolId) {
      if (!(this_present_buddyPoolId && that_present_buddyPoolId))
        return false;
      if (this.buddyPoolId != that.buddyPoolId)
        return false;
    }

    boolean this_present_pool_reliability = true;
    boolean that_present_pool_reliability = true;
    if (this_present_pool_reliability || that_present_pool_reliability) {
      if (!(this_present_pool_reliability && that_present_pool_reliability))
        return false;
      if (this.pool_reliability != that.pool_reliability)
        return false;
    }

    boolean this_present_pool_size = true;
    boolean that_present_pool_size = true;
    if (this_present_pool_size || that_present_pool_size) {
      if (!(this_present_pool_size && that_present_pool_size))
        return false;
      if (this.pool_size != that.pool_size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNodeInstance()) ? 131071 : 524287);
    if (isSetNodeInstance())
      hashCode = hashCode * 8191 + nodeInstance.hashCode();

    hashCode = hashCode * 8191 + buddyPoolId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pool_reliability);

    hashCode = hashCode * 8191 + pool_size;

    return hashCode;
  }

  @Override
  public int compareTo(NeighborInfoData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNodeInstance()).compareTo(other.isSetNodeInstance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeInstance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInstance, other.nodeInstance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBuddyPoolId()).compareTo(other.isSetBuddyPoolId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuddyPoolId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buddyPoolId, other.buddyPoolId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPool_reliability()).compareTo(other.isSetPool_reliability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPool_reliability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pool_reliability, other.pool_reliability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPool_size()).compareTo(other.isSetPool_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPool_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pool_size, other.pool_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NeighborInfoData(");
    boolean first = true;

    sb.append("nodeInstance:");
    if (this.nodeInstance == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeInstance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buddyPoolId:");
    sb.append(this.buddyPoolId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pool_reliability:");
    sb.append(this.pool_reliability);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pool_size:");
    sb.append(this.pool_size);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeInstance == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeInstance' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'buddyPoolId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pool_reliability' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pool_size' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (nodeInstance != null) {
      nodeInstance.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NeighborInfoDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NeighborInfoDataStandardScheme getScheme() {
      return new NeighborInfoDataStandardScheme();
    }
  }

  private static class NeighborInfoDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<NeighborInfoData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NeighborInfoData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_INSTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeInstance = new NodeInfoData();
              struct.nodeInstance.read(iprot);
              struct.setNodeInstanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUDDY_POOL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.buddyPoolId = iprot.readI16();
              struct.setBuddyPoolIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POOL_RELIABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pool_reliability = iprot.readDouble();
              struct.setPool_reliabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POOL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.pool_size = iprot.readI16();
              struct.setPool_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBuddyPoolId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'buddyPoolId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPool_reliability()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pool_reliability' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPool_size()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pool_size' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NeighborInfoData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeInstance != null) {
        oprot.writeFieldBegin(NODE_INSTANCE_FIELD_DESC);
        struct.nodeInstance.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUDDY_POOL_ID_FIELD_DESC);
      oprot.writeI16(struct.buddyPoolId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POOL_RELIABILITY_FIELD_DESC);
      oprot.writeDouble(struct.pool_reliability);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POOL_SIZE_FIELD_DESC);
      oprot.writeI16(struct.pool_size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NeighborInfoDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NeighborInfoDataTupleScheme getScheme() {
      return new NeighborInfoDataTupleScheme();
    }
  }

  private static class NeighborInfoDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<NeighborInfoData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NeighborInfoData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeInstance.write(oprot);
      oprot.writeI16(struct.buddyPoolId);
      oprot.writeDouble(struct.pool_reliability);
      oprot.writeI16(struct.pool_size);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NeighborInfoData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeInstance = new NodeInfoData();
      struct.nodeInstance.read(iprot);
      struct.setNodeInstanceIsSet(true);
      struct.buddyPoolId = iprot.readI16();
      struct.setBuddyPoolIdIsSet(true);
      struct.pool_reliability = iprot.readDouble();
      struct.setPool_reliabilityIsSet(true);
      struct.pool_size = iprot.readI16();
      struct.setPool_sizeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

