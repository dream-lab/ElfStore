/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dreamlab.edgefs.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-07-03")
public class NeighborCount implements org.apache.thrift.TBase<NeighborCount, NeighborCount._Fields>, java.io.Serializable, Cloneable, Comparable<NeighborCount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NeighborCount");

  private static final org.apache.thrift.protocol.TField IS_LOCK_ACQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("isLockAcquired", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField NEIGHBOR_COUNT_PER_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("neighborCountPerPool", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_INFO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfoData", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NeighborCountStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NeighborCountTupleSchemeFactory();

  public boolean isLockAcquired; // required
  public java.util.Map<java.lang.Short,java.lang.Short> neighborCountPerPool; // optional
  public NodeInfoData nodeInfoData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_LOCK_ACQUIRED((short)1, "isLockAcquired"),
    NEIGHBOR_COUNT_PER_POOL((short)2, "neighborCountPerPool"),
    NODE_INFO_DATA((short)3, "nodeInfoData");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_LOCK_ACQUIRED
          return IS_LOCK_ACQUIRED;
        case 2: // NEIGHBOR_COUNT_PER_POOL
          return NEIGHBOR_COUNT_PER_POOL;
        case 3: // NODE_INFO_DATA
          return NODE_INFO_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISLOCKACQUIRED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NEIGHBOR_COUNT_PER_POOL,_Fields.NODE_INFO_DATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_LOCK_ACQUIRED, new org.apache.thrift.meta_data.FieldMetaData("isLockAcquired", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEIGHBOR_COUNT_PER_POOL, new org.apache.thrift.meta_data.FieldMetaData("neighborCountPerPool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.NODE_INFO_DATA, new org.apache.thrift.meta_data.FieldMetaData("nodeInfoData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfoData.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NeighborCount.class, metaDataMap);
  }

  public NeighborCount() {
  }

  public NeighborCount(
    boolean isLockAcquired)
  {
    this();
    this.isLockAcquired = isLockAcquired;
    setIsLockAcquiredIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NeighborCount(NeighborCount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isLockAcquired = other.isLockAcquired;
    if (other.isSetNeighborCountPerPool()) {
      java.util.Map<java.lang.Short,java.lang.Short> __this__neighborCountPerPool = new java.util.HashMap<java.lang.Short,java.lang.Short>(other.neighborCountPerPool);
      this.neighborCountPerPool = __this__neighborCountPerPool;
    }
    if (other.isSetNodeInfoData()) {
      this.nodeInfoData = new NodeInfoData(other.nodeInfoData);
    }
  }

  public NeighborCount deepCopy() {
    return new NeighborCount(this);
  }

  @Override
  public void clear() {
    setIsLockAcquiredIsSet(false);
    this.isLockAcquired = false;
    this.neighborCountPerPool = null;
    this.nodeInfoData = null;
  }

  public boolean isIsLockAcquired() {
    return this.isLockAcquired;
  }

  public NeighborCount setIsLockAcquired(boolean isLockAcquired) {
    this.isLockAcquired = isLockAcquired;
    setIsLockAcquiredIsSet(true);
    return this;
  }

  public void unsetIsLockAcquired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISLOCKACQUIRED_ISSET_ID);
  }

  /** Returns true if field isLockAcquired is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLockAcquired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISLOCKACQUIRED_ISSET_ID);
  }

  public void setIsLockAcquiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISLOCKACQUIRED_ISSET_ID, value);
  }

  public int getNeighborCountPerPoolSize() {
    return (this.neighborCountPerPool == null) ? 0 : this.neighborCountPerPool.size();
  }

  public void putToNeighborCountPerPool(short key, short val) {
    if (this.neighborCountPerPool == null) {
      this.neighborCountPerPool = new java.util.HashMap<java.lang.Short,java.lang.Short>();
    }
    this.neighborCountPerPool.put(key, val);
  }

  public java.util.Map<java.lang.Short,java.lang.Short> getNeighborCountPerPool() {
    return this.neighborCountPerPool;
  }

  public NeighborCount setNeighborCountPerPool(java.util.Map<java.lang.Short,java.lang.Short> neighborCountPerPool) {
    this.neighborCountPerPool = neighborCountPerPool;
    return this;
  }

  public void unsetNeighborCountPerPool() {
    this.neighborCountPerPool = null;
  }

  /** Returns true if field neighborCountPerPool is set (has been assigned a value) and false otherwise */
  public boolean isSetNeighborCountPerPool() {
    return this.neighborCountPerPool != null;
  }

  public void setNeighborCountPerPoolIsSet(boolean value) {
    if (!value) {
      this.neighborCountPerPool = null;
    }
  }

  public NodeInfoData getNodeInfoData() {
    return this.nodeInfoData;
  }

  public NeighborCount setNodeInfoData(NodeInfoData nodeInfoData) {
    this.nodeInfoData = nodeInfoData;
    return this;
  }

  public void unsetNodeInfoData() {
    this.nodeInfoData = null;
  }

  /** Returns true if field nodeInfoData is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeInfoData() {
    return this.nodeInfoData != null;
  }

  public void setNodeInfoDataIsSet(boolean value) {
    if (!value) {
      this.nodeInfoData = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case IS_LOCK_ACQUIRED:
      if (value == null) {
        unsetIsLockAcquired();
      } else {
        setIsLockAcquired((java.lang.Boolean)value);
      }
      break;

    case NEIGHBOR_COUNT_PER_POOL:
      if (value == null) {
        unsetNeighborCountPerPool();
      } else {
        setNeighborCountPerPool((java.util.Map<java.lang.Short,java.lang.Short>)value);
      }
      break;

    case NODE_INFO_DATA:
      if (value == null) {
        unsetNodeInfoData();
      } else {
        setNodeInfoData((NodeInfoData)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_LOCK_ACQUIRED:
      return isIsLockAcquired();

    case NEIGHBOR_COUNT_PER_POOL:
      return getNeighborCountPerPool();

    case NODE_INFO_DATA:
      return getNodeInfoData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IS_LOCK_ACQUIRED:
      return isSetIsLockAcquired();
    case NEIGHBOR_COUNT_PER_POOL:
      return isSetNeighborCountPerPool();
    case NODE_INFO_DATA:
      return isSetNodeInfoData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NeighborCount)
      return this.equals((NeighborCount)that);
    return false;
  }

  public boolean equals(NeighborCount that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_isLockAcquired = true;
    boolean that_present_isLockAcquired = true;
    if (this_present_isLockAcquired || that_present_isLockAcquired) {
      if (!(this_present_isLockAcquired && that_present_isLockAcquired))
        return false;
      if (this.isLockAcquired != that.isLockAcquired)
        return false;
    }

    boolean this_present_neighborCountPerPool = true && this.isSetNeighborCountPerPool();
    boolean that_present_neighborCountPerPool = true && that.isSetNeighborCountPerPool();
    if (this_present_neighborCountPerPool || that_present_neighborCountPerPool) {
      if (!(this_present_neighborCountPerPool && that_present_neighborCountPerPool))
        return false;
      if (!this.neighborCountPerPool.equals(that.neighborCountPerPool))
        return false;
    }

    boolean this_present_nodeInfoData = true && this.isSetNodeInfoData();
    boolean that_present_nodeInfoData = true && that.isSetNodeInfoData();
    if (this_present_nodeInfoData || that_present_nodeInfoData) {
      if (!(this_present_nodeInfoData && that_present_nodeInfoData))
        return false;
      if (!this.nodeInfoData.equals(that.nodeInfoData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isLockAcquired) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNeighborCountPerPool()) ? 131071 : 524287);
    if (isSetNeighborCountPerPool())
      hashCode = hashCode * 8191 + neighborCountPerPool.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodeInfoData()) ? 131071 : 524287);
    if (isSetNodeInfoData())
      hashCode = hashCode * 8191 + nodeInfoData.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NeighborCount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIsLockAcquired()).compareTo(other.isSetIsLockAcquired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLockAcquired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLockAcquired, other.isLockAcquired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeighborCountPerPool()).compareTo(other.isSetNeighborCountPerPool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeighborCountPerPool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neighborCountPerPool, other.neighborCountPerPool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodeInfoData()).compareTo(other.isSetNodeInfoData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeInfoData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfoData, other.nodeInfoData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NeighborCount(");
    boolean first = true;

    sb.append("isLockAcquired:");
    sb.append(this.isLockAcquired);
    first = false;
    if (isSetNeighborCountPerPool()) {
      if (!first) sb.append(", ");
      sb.append("neighborCountPerPool:");
      if (this.neighborCountPerPool == null) {
        sb.append("null");
      } else {
        sb.append(this.neighborCountPerPool);
      }
      first = false;
    }
    if (isSetNodeInfoData()) {
      if (!first) sb.append(", ");
      sb.append("nodeInfoData:");
      if (this.nodeInfoData == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeInfoData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'isLockAcquired' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (nodeInfoData != null) {
      nodeInfoData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NeighborCountStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NeighborCountStandardScheme getScheme() {
      return new NeighborCountStandardScheme();
    }
  }

  private static class NeighborCountStandardScheme extends org.apache.thrift.scheme.StandardScheme<NeighborCount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NeighborCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_LOCK_ACQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLockAcquired = iprot.readBool();
              struct.setIsLockAcquiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEIGHBOR_COUNT_PER_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                struct.neighborCountPerPool = new java.util.HashMap<java.lang.Short,java.lang.Short>(2*_map38.size);
                short _key39;
                short _val40;
                for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                {
                  _key39 = iprot.readI16();
                  _val40 = iprot.readI16();
                  struct.neighborCountPerPool.put(_key39, _val40);
                }
                iprot.readMapEnd();
              }
              struct.setNeighborCountPerPoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE_INFO_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeInfoData = new NodeInfoData();
              struct.nodeInfoData.read(iprot);
              struct.setNodeInfoDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsLockAcquired()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isLockAcquired' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NeighborCount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_LOCK_ACQUIRED_FIELD_DESC);
      oprot.writeBool(struct.isLockAcquired);
      oprot.writeFieldEnd();
      if (struct.neighborCountPerPool != null) {
        if (struct.isSetNeighborCountPerPool()) {
          oprot.writeFieldBegin(NEIGHBOR_COUNT_PER_POOL_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, struct.neighborCountPerPool.size()));
            for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter42 : struct.neighborCountPerPool.entrySet())
            {
              oprot.writeI16(_iter42.getKey());
              oprot.writeI16(_iter42.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodeInfoData != null) {
        if (struct.isSetNodeInfoData()) {
          oprot.writeFieldBegin(NODE_INFO_DATA_FIELD_DESC);
          struct.nodeInfoData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NeighborCountTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NeighborCountTupleScheme getScheme() {
      return new NeighborCountTupleScheme();
    }
  }

  private static class NeighborCountTupleScheme extends org.apache.thrift.scheme.TupleScheme<NeighborCount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NeighborCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.isLockAcquired);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNeighborCountPerPool()) {
        optionals.set(0);
      }
      if (struct.isSetNodeInfoData()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNeighborCountPerPool()) {
        {
          oprot.writeI32(struct.neighborCountPerPool.size());
          for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter43 : struct.neighborCountPerPool.entrySet())
          {
            oprot.writeI16(_iter43.getKey());
            oprot.writeI16(_iter43.getValue());
          }
        }
      }
      if (struct.isSetNodeInfoData()) {
        struct.nodeInfoData.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NeighborCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.isLockAcquired = iprot.readBool();
      struct.setIsLockAcquiredIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map44 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.neighborCountPerPool = new java.util.HashMap<java.lang.Short,java.lang.Short>(2*_map44.size);
          short _key45;
          short _val46;
          for (int _i47 = 0; _i47 < _map44.size; ++_i47)
          {
            _key45 = iprot.readI16();
            _val46 = iprot.readI16();
            struct.neighborCountPerPool.put(_key45, _val46);
          }
        }
        struct.setNeighborCountPerPoolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nodeInfoData = new NodeInfoData();
        struct.nodeInfoData.read(iprot);
        struct.setNodeInfoDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

