/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dreamlab.edgefs.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-07-21")
public class FogService {

  public interface Iface {

    public java.util.List<NeighborInfoData> joinCluster(FogInfoData NodeX, short pmin, short pmax) throws org.apache.thrift.TException;

    public TwoPhaseCommitResponse joinPool(FogInfoData NodeX) throws org.apache.thrift.TException;

    public java.util.List<NeighborInfoData> getCandidatePool(double reliability, short pmin) throws org.apache.thrift.TException;

    public java.lang.String bootstrapFog(FogInfoData NodeX) throws org.apache.thrift.TException;

    public TwoPhasePreCommitResponse initiate2PhasePreCommit(TwoPhasePreCommitRequest preCommitRequest) throws org.apache.thrift.TException;

    public TwoPhaseCommitResponse initiate2PhaseCommit(TwoPhaseCommitRequest commitRequest) throws org.apache.thrift.TException;

    public void buddyHeartBeat(BuddyPayload payload) throws org.apache.thrift.TException;

    public void neighborHeartBeat(NeighborPayload payload) throws org.apache.thrift.TException;

    public NodeInfoData getPoolMember(short buddyPoolId) throws org.apache.thrift.TException;

    public java.util.List<FogInfoData> getBuddyPoolMembers() throws org.apache.thrift.TException;

    public NeighborCount getNeighborCountPerPool() throws org.apache.thrift.TException;

    public java.util.List<NeighborInfoData> requestNeighbors(java.util.Map<java.lang.Short,java.lang.Short> requestMap) throws org.apache.thrift.TException;

    public void nodeJoiningComplete() throws org.apache.thrift.TException;

    public boolean subscribe(NodeInfoData nodeInfoData) throws org.apache.thrift.TException;

    public boolean edgeHeartBeats(EdgePayload edgePayload) throws org.apache.thrift.TException;

    public byte edgeJoin(EdgeInfoData edgeInfoData) throws org.apache.thrift.TException;

    public byte edgeLeave(EdgeInfoData edgeInfoData) throws org.apache.thrift.TException;

    public byte terminate(java.lang.String streamId) throws org.apache.thrift.TException;

    public byte registerStream(java.lang.String streamId, StreamMetadata streamMetadata, long startSequenceNumber) throws org.apache.thrift.TException;

    public java.lang.String intentToWrite(byte clientId) throws org.apache.thrift.TException;

    public StreamMetadataInfo getStreamMetadata(java.lang.String streamId, boolean checkNeighbors, boolean checkBuddies, boolean forceLatest) throws org.apache.thrift.TException;

    public StreamMetadata getStreamMetadataFromOwner(java.lang.String streamId) throws org.apache.thrift.TException;

    public java.util.List<WritableFogData> getWriteLocations(byte dataLength, Metadata metadata, java.util.List<java.lang.Short> blackListedFogs, boolean isEdge) throws org.apache.thrift.TException;

    public WriteResponse write(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference) throws org.apache.thrift.TException;

    public java.util.List<NodeInfoData> writeNext(java.lang.String sessionId, Metadata mbData, byte dataLength) throws org.apache.thrift.TException;

    public byte insertMetadata(Metadata mbMetadata, EdgeInfoData edgeInfoData, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer findNext(java.lang.String microbatchId) throws org.apache.thrift.TException;

    public java.util.List<FindReplica> find(long microbatchId, boolean checkNeighbors, boolean checkBuddies, EdgeInfoData selfInfo) throws org.apache.thrift.TException;

    public ReadReplica read(long microbatchId, boolean fetchMetadata) throws org.apache.thrift.TException;

    public QueryReplica findUsingQuery(java.lang.String metadataKey, java.lang.String metadataValue, boolean checkNeighbors, boolean checkBuddies) throws org.apache.thrift.TException;

    public ReadReplica getMeta(long microbatchId, boolean checkNeighbors, boolean checkBuddies) throws org.apache.thrift.TException;

    public byte serializeState() throws org.apache.thrift.TException;

    public StreamMetadataUpdateResponse updateStreamMetadata(StreamMetadata metadata) throws org.apache.thrift.TException;

    public OpenStreamResponse open(java.lang.String streamId, java.lang.String clientId, int expectedLease, boolean setLease) throws org.apache.thrift.TException;

    public WriteResponse putNext(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap) throws org.apache.thrift.TException;

    public BlockMetadataUpdateResponse incrementBlockCount(Metadata mbMetadata, boolean setLease) throws org.apache.thrift.TException;

    public StreamLeaseRenewalResponse renewLease(java.lang.String streamId, java.lang.String clientId, java.lang.String sessionSecret, int expectedLease, boolean setLease) throws org.apache.thrift.TException;

    public long getLargestBlockId(java.lang.String streamId) throws org.apache.thrift.TException;

    public SQueryResponse findStream(SQueryRequest squery) throws org.apache.thrift.TException;

    public WriteResponse updateBlock(long mbId, Metadata mbMetadata, java.nio.ByteBuffer mbData) throws org.apache.thrift.TException;

    public java.util.Set<java.lang.Long> listLocalPartitionMbId(boolean flag) throws org.apache.thrift.TException;

    public java.util.List<NeighborInfoData> requestAllNeighbors() throws org.apache.thrift.TException;

    public java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> requestEdgeMicrobatchMap() throws org.apache.thrift.TException;

    public java.util.Map<java.lang.Long,java.lang.String> findBlockUsingQuery(java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, boolean checkNeighbors, boolean checkBuddies) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void joinCluster(FogInfoData NodeX, short pmin, short pmax, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException;

    public void joinPool(FogInfoData NodeX, org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> resultHandler) throws org.apache.thrift.TException;

    public void getCandidatePool(double reliability, short pmin, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException;

    public void bootstrapFog(FogInfoData NodeX, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void initiate2PhasePreCommit(TwoPhasePreCommitRequest preCommitRequest, org.apache.thrift.async.AsyncMethodCallback<TwoPhasePreCommitResponse> resultHandler) throws org.apache.thrift.TException;

    public void initiate2PhaseCommit(TwoPhaseCommitRequest commitRequest, org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> resultHandler) throws org.apache.thrift.TException;

    public void buddyHeartBeat(BuddyPayload payload, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void neighborHeartBeat(NeighborPayload payload, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getPoolMember(short buddyPoolId, org.apache.thrift.async.AsyncMethodCallback<NodeInfoData> resultHandler) throws org.apache.thrift.TException;

    public void getBuddyPoolMembers(org.apache.thrift.async.AsyncMethodCallback<java.util.List<FogInfoData>> resultHandler) throws org.apache.thrift.TException;

    public void getNeighborCountPerPool(org.apache.thrift.async.AsyncMethodCallback<NeighborCount> resultHandler) throws org.apache.thrift.TException;

    public void requestNeighbors(java.util.Map<java.lang.Short,java.lang.Short> requestMap, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException;

    public void nodeJoiningComplete(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void subscribe(NodeInfoData nodeInfoData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void edgeHeartBeats(EdgePayload edgePayload, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void edgeJoin(EdgeInfoData edgeInfoData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException;

    public void edgeLeave(EdgeInfoData edgeInfoData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException;

    public void terminate(java.lang.String streamId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException;

    public void registerStream(java.lang.String streamId, StreamMetadata streamMetadata, long startSequenceNumber, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException;

    public void intentToWrite(byte clientId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getStreamMetadata(java.lang.String streamId, boolean checkNeighbors, boolean checkBuddies, boolean forceLatest, org.apache.thrift.async.AsyncMethodCallback<StreamMetadataInfo> resultHandler) throws org.apache.thrift.TException;

    public void getStreamMetadataFromOwner(java.lang.String streamId, org.apache.thrift.async.AsyncMethodCallback<StreamMetadata> resultHandler) throws org.apache.thrift.TException;

    public void getWriteLocations(byte dataLength, Metadata metadata, java.util.List<java.lang.Short> blackListedFogs, boolean isEdge, org.apache.thrift.async.AsyncMethodCallback<java.util.List<WritableFogData>> resultHandler) throws org.apache.thrift.TException;

    public void write(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler) throws org.apache.thrift.TException;

    public void writeNext(java.lang.String sessionId, Metadata mbData, byte dataLength, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeInfoData>> resultHandler) throws org.apache.thrift.TException;

    public void insertMetadata(Metadata mbMetadata, EdgeInfoData edgeInfoData, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException;

    public void findNext(java.lang.String microbatchId, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void find(long microbatchId, boolean checkNeighbors, boolean checkBuddies, EdgeInfoData selfInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FindReplica>> resultHandler) throws org.apache.thrift.TException;

    public void read(long microbatchId, boolean fetchMetadata, org.apache.thrift.async.AsyncMethodCallback<ReadReplica> resultHandler) throws org.apache.thrift.TException;

    public void findUsingQuery(java.lang.String metadataKey, java.lang.String metadataValue, boolean checkNeighbors, boolean checkBuddies, org.apache.thrift.async.AsyncMethodCallback<QueryReplica> resultHandler) throws org.apache.thrift.TException;

    public void getMeta(long microbatchId, boolean checkNeighbors, boolean checkBuddies, org.apache.thrift.async.AsyncMethodCallback<ReadReplica> resultHandler) throws org.apache.thrift.TException;

    public void serializeState(org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException;

    public void updateStreamMetadata(StreamMetadata metadata, org.apache.thrift.async.AsyncMethodCallback<StreamMetadataUpdateResponse> resultHandler) throws org.apache.thrift.TException;

    public void open(java.lang.String streamId, java.lang.String clientId, int expectedLease, boolean setLease, org.apache.thrift.async.AsyncMethodCallback<OpenStreamResponse> resultHandler) throws org.apache.thrift.TException;

    public void putNext(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler) throws org.apache.thrift.TException;

    public void incrementBlockCount(Metadata mbMetadata, boolean setLease, org.apache.thrift.async.AsyncMethodCallback<BlockMetadataUpdateResponse> resultHandler) throws org.apache.thrift.TException;

    public void renewLease(java.lang.String streamId, java.lang.String clientId, java.lang.String sessionSecret, int expectedLease, boolean setLease, org.apache.thrift.async.AsyncMethodCallback<StreamLeaseRenewalResponse> resultHandler) throws org.apache.thrift.TException;

    public void getLargestBlockId(java.lang.String streamId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void findStream(SQueryRequest squery, org.apache.thrift.async.AsyncMethodCallback<SQueryResponse> resultHandler) throws org.apache.thrift.TException;

    public void updateBlock(long mbId, Metadata mbMetadata, java.nio.ByteBuffer mbData, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler) throws org.apache.thrift.TException;

    public void listLocalPartitionMbId(boolean flag, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<java.lang.Long>> resultHandler) throws org.apache.thrift.TException;

    public void requestAllNeighbors(org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException;

    public void requestEdgeMicrobatchMap(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>>> resultHandler) throws org.apache.thrift.TException;

    public void findBlockUsingQuery(java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, boolean checkNeighbors, boolean checkBuddies, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<NeighborInfoData> joinCluster(FogInfoData NodeX, short pmin, short pmax) throws org.apache.thrift.TException
    {
      send_joinCluster(NodeX, pmin, pmax);
      return recv_joinCluster();
    }

    public void send_joinCluster(FogInfoData NodeX, short pmin, short pmax) throws org.apache.thrift.TException
    {
      joinCluster_args args = new joinCluster_args();
      args.setNodeX(NodeX);
      args.setPmin(pmin);
      args.setPmax(pmax);
      sendBase("joinCluster", args);
    }

    public java.util.List<NeighborInfoData> recv_joinCluster() throws org.apache.thrift.TException
    {
      joinCluster_result result = new joinCluster_result();
      receiveBase(result, "joinCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "joinCluster failed: unknown result");
    }

    public TwoPhaseCommitResponse joinPool(FogInfoData NodeX) throws org.apache.thrift.TException
    {
      send_joinPool(NodeX);
      return recv_joinPool();
    }

    public void send_joinPool(FogInfoData NodeX) throws org.apache.thrift.TException
    {
      joinPool_args args = new joinPool_args();
      args.setNodeX(NodeX);
      sendBase("joinPool", args);
    }

    public TwoPhaseCommitResponse recv_joinPool() throws org.apache.thrift.TException
    {
      joinPool_result result = new joinPool_result();
      receiveBase(result, "joinPool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "joinPool failed: unknown result");
    }

    public java.util.List<NeighborInfoData> getCandidatePool(double reliability, short pmin) throws org.apache.thrift.TException
    {
      send_getCandidatePool(reliability, pmin);
      return recv_getCandidatePool();
    }

    public void send_getCandidatePool(double reliability, short pmin) throws org.apache.thrift.TException
    {
      getCandidatePool_args args = new getCandidatePool_args();
      args.setReliability(reliability);
      args.setPmin(pmin);
      sendBase("getCandidatePool", args);
    }

    public java.util.List<NeighborInfoData> recv_getCandidatePool() throws org.apache.thrift.TException
    {
      getCandidatePool_result result = new getCandidatePool_result();
      receiveBase(result, "getCandidatePool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCandidatePool failed: unknown result");
    }

    public java.lang.String bootstrapFog(FogInfoData NodeX) throws org.apache.thrift.TException
    {
      send_bootstrapFog(NodeX);
      return recv_bootstrapFog();
    }

    public void send_bootstrapFog(FogInfoData NodeX) throws org.apache.thrift.TException
    {
      bootstrapFog_args args = new bootstrapFog_args();
      args.setNodeX(NodeX);
      sendBase("bootstrapFog", args);
    }

    public java.lang.String recv_bootstrapFog() throws org.apache.thrift.TException
    {
      bootstrapFog_result result = new bootstrapFog_result();
      receiveBase(result, "bootstrapFog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bootstrapFog failed: unknown result");
    }

    public TwoPhasePreCommitResponse initiate2PhasePreCommit(TwoPhasePreCommitRequest preCommitRequest) throws org.apache.thrift.TException
    {
      send_initiate2PhasePreCommit(preCommitRequest);
      return recv_initiate2PhasePreCommit();
    }

    public void send_initiate2PhasePreCommit(TwoPhasePreCommitRequest preCommitRequest) throws org.apache.thrift.TException
    {
      initiate2PhasePreCommit_args args = new initiate2PhasePreCommit_args();
      args.setPreCommitRequest(preCommitRequest);
      sendBase("initiate2PhasePreCommit", args);
    }

    public TwoPhasePreCommitResponse recv_initiate2PhasePreCommit() throws org.apache.thrift.TException
    {
      initiate2PhasePreCommit_result result = new initiate2PhasePreCommit_result();
      receiveBase(result, "initiate2PhasePreCommit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "initiate2PhasePreCommit failed: unknown result");
    }

    public TwoPhaseCommitResponse initiate2PhaseCommit(TwoPhaseCommitRequest commitRequest) throws org.apache.thrift.TException
    {
      send_initiate2PhaseCommit(commitRequest);
      return recv_initiate2PhaseCommit();
    }

    public void send_initiate2PhaseCommit(TwoPhaseCommitRequest commitRequest) throws org.apache.thrift.TException
    {
      initiate2PhaseCommit_args args = new initiate2PhaseCommit_args();
      args.setCommitRequest(commitRequest);
      sendBase("initiate2PhaseCommit", args);
    }

    public TwoPhaseCommitResponse recv_initiate2PhaseCommit() throws org.apache.thrift.TException
    {
      initiate2PhaseCommit_result result = new initiate2PhaseCommit_result();
      receiveBase(result, "initiate2PhaseCommit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "initiate2PhaseCommit failed: unknown result");
    }

    public void buddyHeartBeat(BuddyPayload payload) throws org.apache.thrift.TException
    {
      send_buddyHeartBeat(payload);
    }

    public void send_buddyHeartBeat(BuddyPayload payload) throws org.apache.thrift.TException
    {
      buddyHeartBeat_args args = new buddyHeartBeat_args();
      args.setPayload(payload);
      sendBaseOneway("buddyHeartBeat", args);
    }

    public void neighborHeartBeat(NeighborPayload payload) throws org.apache.thrift.TException
    {
      send_neighborHeartBeat(payload);
    }

    public void send_neighborHeartBeat(NeighborPayload payload) throws org.apache.thrift.TException
    {
      neighborHeartBeat_args args = new neighborHeartBeat_args();
      args.setPayload(payload);
      sendBaseOneway("neighborHeartBeat", args);
    }

    public NodeInfoData getPoolMember(short buddyPoolId) throws org.apache.thrift.TException
    {
      send_getPoolMember(buddyPoolId);
      return recv_getPoolMember();
    }

    public void send_getPoolMember(short buddyPoolId) throws org.apache.thrift.TException
    {
      getPoolMember_args args = new getPoolMember_args();
      args.setBuddyPoolId(buddyPoolId);
      sendBase("getPoolMember", args);
    }

    public NodeInfoData recv_getPoolMember() throws org.apache.thrift.TException
    {
      getPoolMember_result result = new getPoolMember_result();
      receiveBase(result, "getPoolMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPoolMember failed: unknown result");
    }

    public java.util.List<FogInfoData> getBuddyPoolMembers() throws org.apache.thrift.TException
    {
      send_getBuddyPoolMembers();
      return recv_getBuddyPoolMembers();
    }

    public void send_getBuddyPoolMembers() throws org.apache.thrift.TException
    {
      getBuddyPoolMembers_args args = new getBuddyPoolMembers_args();
      sendBase("getBuddyPoolMembers", args);
    }

    public java.util.List<FogInfoData> recv_getBuddyPoolMembers() throws org.apache.thrift.TException
    {
      getBuddyPoolMembers_result result = new getBuddyPoolMembers_result();
      receiveBase(result, "getBuddyPoolMembers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBuddyPoolMembers failed: unknown result");
    }

    public NeighborCount getNeighborCountPerPool() throws org.apache.thrift.TException
    {
      send_getNeighborCountPerPool();
      return recv_getNeighborCountPerPool();
    }

    public void send_getNeighborCountPerPool() throws org.apache.thrift.TException
    {
      getNeighborCountPerPool_args args = new getNeighborCountPerPool_args();
      sendBase("getNeighborCountPerPool", args);
    }

    public NeighborCount recv_getNeighborCountPerPool() throws org.apache.thrift.TException
    {
      getNeighborCountPerPool_result result = new getNeighborCountPerPool_result();
      receiveBase(result, "getNeighborCountPerPool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNeighborCountPerPool failed: unknown result");
    }

    public java.util.List<NeighborInfoData> requestNeighbors(java.util.Map<java.lang.Short,java.lang.Short> requestMap) throws org.apache.thrift.TException
    {
      send_requestNeighbors(requestMap);
      return recv_requestNeighbors();
    }

    public void send_requestNeighbors(java.util.Map<java.lang.Short,java.lang.Short> requestMap) throws org.apache.thrift.TException
    {
      requestNeighbors_args args = new requestNeighbors_args();
      args.setRequestMap(requestMap);
      sendBase("requestNeighbors", args);
    }

    public java.util.List<NeighborInfoData> recv_requestNeighbors() throws org.apache.thrift.TException
    {
      requestNeighbors_result result = new requestNeighbors_result();
      receiveBase(result, "requestNeighbors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestNeighbors failed: unknown result");
    }

    public void nodeJoiningComplete() throws org.apache.thrift.TException
    {
      send_nodeJoiningComplete();
      recv_nodeJoiningComplete();
    }

    public void send_nodeJoiningComplete() throws org.apache.thrift.TException
    {
      nodeJoiningComplete_args args = new nodeJoiningComplete_args();
      sendBase("nodeJoiningComplete", args);
    }

    public void recv_nodeJoiningComplete() throws org.apache.thrift.TException
    {
      nodeJoiningComplete_result result = new nodeJoiningComplete_result();
      receiveBase(result, "nodeJoiningComplete");
      return;
    }

    public boolean subscribe(NodeInfoData nodeInfoData) throws org.apache.thrift.TException
    {
      send_subscribe(nodeInfoData);
      return recv_subscribe();
    }

    public void send_subscribe(NodeInfoData nodeInfoData) throws org.apache.thrift.TException
    {
      subscribe_args args = new subscribe_args();
      args.setNodeInfoData(nodeInfoData);
      sendBase("subscribe", args);
    }

    public boolean recv_subscribe() throws org.apache.thrift.TException
    {
      subscribe_result result = new subscribe_result();
      receiveBase(result, "subscribe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "subscribe failed: unknown result");
    }

    public boolean edgeHeartBeats(EdgePayload edgePayload) throws org.apache.thrift.TException
    {
      send_edgeHeartBeats(edgePayload);
      return recv_edgeHeartBeats();
    }

    public void send_edgeHeartBeats(EdgePayload edgePayload) throws org.apache.thrift.TException
    {
      edgeHeartBeats_args args = new edgeHeartBeats_args();
      args.setEdgePayload(edgePayload);
      sendBase("edgeHeartBeats", args);
    }

    public boolean recv_edgeHeartBeats() throws org.apache.thrift.TException
    {
      edgeHeartBeats_result result = new edgeHeartBeats_result();
      receiveBase(result, "edgeHeartBeats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edgeHeartBeats failed: unknown result");
    }

    public byte edgeJoin(EdgeInfoData edgeInfoData) throws org.apache.thrift.TException
    {
      send_edgeJoin(edgeInfoData);
      return recv_edgeJoin();
    }

    public void send_edgeJoin(EdgeInfoData edgeInfoData) throws org.apache.thrift.TException
    {
      edgeJoin_args args = new edgeJoin_args();
      args.setEdgeInfoData(edgeInfoData);
      sendBase("edgeJoin", args);
    }

    public byte recv_edgeJoin() throws org.apache.thrift.TException
    {
      edgeJoin_result result = new edgeJoin_result();
      receiveBase(result, "edgeJoin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edgeJoin failed: unknown result");
    }

    public byte edgeLeave(EdgeInfoData edgeInfoData) throws org.apache.thrift.TException
    {
      send_edgeLeave(edgeInfoData);
      return recv_edgeLeave();
    }

    public void send_edgeLeave(EdgeInfoData edgeInfoData) throws org.apache.thrift.TException
    {
      edgeLeave_args args = new edgeLeave_args();
      args.setEdgeInfoData(edgeInfoData);
      sendBase("edgeLeave", args);
    }

    public byte recv_edgeLeave() throws org.apache.thrift.TException
    {
      edgeLeave_result result = new edgeLeave_result();
      receiveBase(result, "edgeLeave");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edgeLeave failed: unknown result");
    }

    public byte terminate(java.lang.String streamId) throws org.apache.thrift.TException
    {
      send_terminate(streamId);
      return recv_terminate();
    }

    public void send_terminate(java.lang.String streamId) throws org.apache.thrift.TException
    {
      terminate_args args = new terminate_args();
      args.setStreamId(streamId);
      sendBase("terminate", args);
    }

    public byte recv_terminate() throws org.apache.thrift.TException
    {
      terminate_result result = new terminate_result();
      receiveBase(result, "terminate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "terminate failed: unknown result");
    }

    public byte registerStream(java.lang.String streamId, StreamMetadata streamMetadata, long startSequenceNumber) throws org.apache.thrift.TException
    {
      send_registerStream(streamId, streamMetadata, startSequenceNumber);
      return recv_registerStream();
    }

    public void send_registerStream(java.lang.String streamId, StreamMetadata streamMetadata, long startSequenceNumber) throws org.apache.thrift.TException
    {
      registerStream_args args = new registerStream_args();
      args.setStreamId(streamId);
      args.setStreamMetadata(streamMetadata);
      args.setStartSequenceNumber(startSequenceNumber);
      sendBase("registerStream", args);
    }

    public byte recv_registerStream() throws org.apache.thrift.TException
    {
      registerStream_result result = new registerStream_result();
      receiveBase(result, "registerStream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerStream failed: unknown result");
    }

    public java.lang.String intentToWrite(byte clientId) throws org.apache.thrift.TException
    {
      send_intentToWrite(clientId);
      return recv_intentToWrite();
    }

    public void send_intentToWrite(byte clientId) throws org.apache.thrift.TException
    {
      intentToWrite_args args = new intentToWrite_args();
      args.setClientId(clientId);
      sendBase("intentToWrite", args);
    }

    public java.lang.String recv_intentToWrite() throws org.apache.thrift.TException
    {
      intentToWrite_result result = new intentToWrite_result();
      receiveBase(result, "intentToWrite");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "intentToWrite failed: unknown result");
    }

    public StreamMetadataInfo getStreamMetadata(java.lang.String streamId, boolean checkNeighbors, boolean checkBuddies, boolean forceLatest) throws org.apache.thrift.TException
    {
      send_getStreamMetadata(streamId, checkNeighbors, checkBuddies, forceLatest);
      return recv_getStreamMetadata();
    }

    public void send_getStreamMetadata(java.lang.String streamId, boolean checkNeighbors, boolean checkBuddies, boolean forceLatest) throws org.apache.thrift.TException
    {
      getStreamMetadata_args args = new getStreamMetadata_args();
      args.setStreamId(streamId);
      args.setCheckNeighbors(checkNeighbors);
      args.setCheckBuddies(checkBuddies);
      args.setForceLatest(forceLatest);
      sendBase("getStreamMetadata", args);
    }

    public StreamMetadataInfo recv_getStreamMetadata() throws org.apache.thrift.TException
    {
      getStreamMetadata_result result = new getStreamMetadata_result();
      receiveBase(result, "getStreamMetadata");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStreamMetadata failed: unknown result");
    }

    public StreamMetadata getStreamMetadataFromOwner(java.lang.String streamId) throws org.apache.thrift.TException
    {
      send_getStreamMetadataFromOwner(streamId);
      return recv_getStreamMetadataFromOwner();
    }

    public void send_getStreamMetadataFromOwner(java.lang.String streamId) throws org.apache.thrift.TException
    {
      getStreamMetadataFromOwner_args args = new getStreamMetadataFromOwner_args();
      args.setStreamId(streamId);
      sendBase("getStreamMetadataFromOwner", args);
    }

    public StreamMetadata recv_getStreamMetadataFromOwner() throws org.apache.thrift.TException
    {
      getStreamMetadataFromOwner_result result = new getStreamMetadataFromOwner_result();
      receiveBase(result, "getStreamMetadataFromOwner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStreamMetadataFromOwner failed: unknown result");
    }

    public java.util.List<WritableFogData> getWriteLocations(byte dataLength, Metadata metadata, java.util.List<java.lang.Short> blackListedFogs, boolean isEdge) throws org.apache.thrift.TException
    {
      send_getWriteLocations(dataLength, metadata, blackListedFogs, isEdge);
      return recv_getWriteLocations();
    }

    public void send_getWriteLocations(byte dataLength, Metadata metadata, java.util.List<java.lang.Short> blackListedFogs, boolean isEdge) throws org.apache.thrift.TException
    {
      getWriteLocations_args args = new getWriteLocations_args();
      args.setDataLength(dataLength);
      args.setMetadata(metadata);
      args.setBlackListedFogs(blackListedFogs);
      args.setIsEdge(isEdge);
      sendBase("getWriteLocations", args);
    }

    public java.util.List<WritableFogData> recv_getWriteLocations() throws org.apache.thrift.TException
    {
      getWriteLocations_result result = new getWriteLocations_result();
      receiveBase(result, "getWriteLocations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWriteLocations failed: unknown result");
    }

    public WriteResponse write(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference) throws org.apache.thrift.TException
    {
      send_write(mbMetadata, data, preference);
      return recv_write();
    }

    public void send_write(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference) throws org.apache.thrift.TException
    {
      write_args args = new write_args();
      args.setMbMetadata(mbMetadata);
      args.setData(data);
      args.setPreference(preference);
      sendBase("write", args);
    }

    public WriteResponse recv_write() throws org.apache.thrift.TException
    {
      write_result result = new write_result();
      receiveBase(result, "write");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "write failed: unknown result");
    }

    public java.util.List<NodeInfoData> writeNext(java.lang.String sessionId, Metadata mbData, byte dataLength) throws org.apache.thrift.TException
    {
      send_writeNext(sessionId, mbData, dataLength);
      return recv_writeNext();
    }

    public void send_writeNext(java.lang.String sessionId, Metadata mbData, byte dataLength) throws org.apache.thrift.TException
    {
      writeNext_args args = new writeNext_args();
      args.setSessionId(sessionId);
      args.setMbData(mbData);
      args.setDataLength(dataLength);
      sendBase("writeNext", args);
    }

    public java.util.List<NodeInfoData> recv_writeNext() throws org.apache.thrift.TException
    {
      writeNext_result result = new writeNext_result();
      receiveBase(result, "writeNext");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeNext failed: unknown result");
    }

    public byte insertMetadata(Metadata mbMetadata, EdgeInfoData edgeInfoData, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap) throws org.apache.thrift.TException
    {
      send_insertMetadata(mbMetadata, edgeInfoData, metaKeyValueMap);
      return recv_insertMetadata();
    }

    public void send_insertMetadata(Metadata mbMetadata, EdgeInfoData edgeInfoData, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap) throws org.apache.thrift.TException
    {
      insertMetadata_args args = new insertMetadata_args();
      args.setMbMetadata(mbMetadata);
      args.setEdgeInfoData(edgeInfoData);
      args.setMetaKeyValueMap(metaKeyValueMap);
      sendBase("insertMetadata", args);
    }

    public byte recv_insertMetadata() throws org.apache.thrift.TException
    {
      insertMetadata_result result = new insertMetadata_result();
      receiveBase(result, "insertMetadata");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertMetadata failed: unknown result");
    }

    public java.nio.ByteBuffer findNext(java.lang.String microbatchId) throws org.apache.thrift.TException
    {
      send_findNext(microbatchId);
      return recv_findNext();
    }

    public void send_findNext(java.lang.String microbatchId) throws org.apache.thrift.TException
    {
      findNext_args args = new findNext_args();
      args.setMicrobatchId(microbatchId);
      sendBase("findNext", args);
    }

    public java.nio.ByteBuffer recv_findNext() throws org.apache.thrift.TException
    {
      findNext_result result = new findNext_result();
      receiveBase(result, "findNext");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findNext failed: unknown result");
    }

    public java.util.List<FindReplica> find(long microbatchId, boolean checkNeighbors, boolean checkBuddies, EdgeInfoData selfInfo) throws org.apache.thrift.TException
    {
      send_find(microbatchId, checkNeighbors, checkBuddies, selfInfo);
      return recv_find();
    }

    public void send_find(long microbatchId, boolean checkNeighbors, boolean checkBuddies, EdgeInfoData selfInfo) throws org.apache.thrift.TException
    {
      find_args args = new find_args();
      args.setMicrobatchId(microbatchId);
      args.setCheckNeighbors(checkNeighbors);
      args.setCheckBuddies(checkBuddies);
      args.setSelfInfo(selfInfo);
      sendBase("find", args);
    }

    public java.util.List<FindReplica> recv_find() throws org.apache.thrift.TException
    {
      find_result result = new find_result();
      receiveBase(result, "find");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "find failed: unknown result");
    }

    public ReadReplica read(long microbatchId, boolean fetchMetadata) throws org.apache.thrift.TException
    {
      send_read(microbatchId, fetchMetadata);
      return recv_read();
    }

    public void send_read(long microbatchId, boolean fetchMetadata) throws org.apache.thrift.TException
    {
      read_args args = new read_args();
      args.setMicrobatchId(microbatchId);
      args.setFetchMetadata(fetchMetadata);
      sendBase("read", args);
    }

    public ReadReplica recv_read() throws org.apache.thrift.TException
    {
      read_result result = new read_result();
      receiveBase(result, "read");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "read failed: unknown result");
    }

    public QueryReplica findUsingQuery(java.lang.String metadataKey, java.lang.String metadataValue, boolean checkNeighbors, boolean checkBuddies) throws org.apache.thrift.TException
    {
      send_findUsingQuery(metadataKey, metadataValue, checkNeighbors, checkBuddies);
      return recv_findUsingQuery();
    }

    public void send_findUsingQuery(java.lang.String metadataKey, java.lang.String metadataValue, boolean checkNeighbors, boolean checkBuddies) throws org.apache.thrift.TException
    {
      findUsingQuery_args args = new findUsingQuery_args();
      args.setMetadataKey(metadataKey);
      args.setMetadataValue(metadataValue);
      args.setCheckNeighbors(checkNeighbors);
      args.setCheckBuddies(checkBuddies);
      sendBase("findUsingQuery", args);
    }

    public QueryReplica recv_findUsingQuery() throws org.apache.thrift.TException
    {
      findUsingQuery_result result = new findUsingQuery_result();
      receiveBase(result, "findUsingQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUsingQuery failed: unknown result");
    }

    public ReadReplica getMeta(long microbatchId, boolean checkNeighbors, boolean checkBuddies) throws org.apache.thrift.TException
    {
      send_getMeta(microbatchId, checkNeighbors, checkBuddies);
      return recv_getMeta();
    }

    public void send_getMeta(long microbatchId, boolean checkNeighbors, boolean checkBuddies) throws org.apache.thrift.TException
    {
      getMeta_args args = new getMeta_args();
      args.setMicrobatchId(microbatchId);
      args.setCheckNeighbors(checkNeighbors);
      args.setCheckBuddies(checkBuddies);
      sendBase("getMeta", args);
    }

    public ReadReplica recv_getMeta() throws org.apache.thrift.TException
    {
      getMeta_result result = new getMeta_result();
      receiveBase(result, "getMeta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMeta failed: unknown result");
    }

    public byte serializeState() throws org.apache.thrift.TException
    {
      send_serializeState();
      return recv_serializeState();
    }

    public void send_serializeState() throws org.apache.thrift.TException
    {
      serializeState_args args = new serializeState_args();
      sendBase("serializeState", args);
    }

    public byte recv_serializeState() throws org.apache.thrift.TException
    {
      serializeState_result result = new serializeState_result();
      receiveBase(result, "serializeState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "serializeState failed: unknown result");
    }

    public StreamMetadataUpdateResponse updateStreamMetadata(StreamMetadata metadata) throws org.apache.thrift.TException
    {
      send_updateStreamMetadata(metadata);
      return recv_updateStreamMetadata();
    }

    public void send_updateStreamMetadata(StreamMetadata metadata) throws org.apache.thrift.TException
    {
      updateStreamMetadata_args args = new updateStreamMetadata_args();
      args.setMetadata(metadata);
      sendBase("updateStreamMetadata", args);
    }

    public StreamMetadataUpdateResponse recv_updateStreamMetadata() throws org.apache.thrift.TException
    {
      updateStreamMetadata_result result = new updateStreamMetadata_result();
      receiveBase(result, "updateStreamMetadata");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStreamMetadata failed: unknown result");
    }

    public OpenStreamResponse open(java.lang.String streamId, java.lang.String clientId, int expectedLease, boolean setLease) throws org.apache.thrift.TException
    {
      send_open(streamId, clientId, expectedLease, setLease);
      return recv_open();
    }

    public void send_open(java.lang.String streamId, java.lang.String clientId, int expectedLease, boolean setLease) throws org.apache.thrift.TException
    {
      open_args args = new open_args();
      args.setStreamId(streamId);
      args.setClientId(clientId);
      args.setExpectedLease(expectedLease);
      args.setSetLease(setLease);
      sendBase("open", args);
    }

    public OpenStreamResponse recv_open() throws org.apache.thrift.TException
    {
      open_result result = new open_result();
      receiveBase(result, "open");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "open failed: unknown result");
    }

    public WriteResponse putNext(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap) throws org.apache.thrift.TException
    {
      send_putNext(mbMetadata, data, preference, metaKeyValueMap);
      return recv_putNext();
    }

    public void send_putNext(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap) throws org.apache.thrift.TException
    {
      putNext_args args = new putNext_args();
      args.setMbMetadata(mbMetadata);
      args.setData(data);
      args.setPreference(preference);
      args.setMetaKeyValueMap(metaKeyValueMap);
      sendBase("putNext", args);
    }

    public WriteResponse recv_putNext() throws org.apache.thrift.TException
    {
      putNext_result result = new putNext_result();
      receiveBase(result, "putNext");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putNext failed: unknown result");
    }

    public BlockMetadataUpdateResponse incrementBlockCount(Metadata mbMetadata, boolean setLease) throws org.apache.thrift.TException
    {
      send_incrementBlockCount(mbMetadata, setLease);
      return recv_incrementBlockCount();
    }

    public void send_incrementBlockCount(Metadata mbMetadata, boolean setLease) throws org.apache.thrift.TException
    {
      incrementBlockCount_args args = new incrementBlockCount_args();
      args.setMbMetadata(mbMetadata);
      args.setSetLease(setLease);
      sendBase("incrementBlockCount", args);
    }

    public BlockMetadataUpdateResponse recv_incrementBlockCount() throws org.apache.thrift.TException
    {
      incrementBlockCount_result result = new incrementBlockCount_result();
      receiveBase(result, "incrementBlockCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "incrementBlockCount failed: unknown result");
    }

    public StreamLeaseRenewalResponse renewLease(java.lang.String streamId, java.lang.String clientId, java.lang.String sessionSecret, int expectedLease, boolean setLease) throws org.apache.thrift.TException
    {
      send_renewLease(streamId, clientId, sessionSecret, expectedLease, setLease);
      return recv_renewLease();
    }

    public void send_renewLease(java.lang.String streamId, java.lang.String clientId, java.lang.String sessionSecret, int expectedLease, boolean setLease) throws org.apache.thrift.TException
    {
      renewLease_args args = new renewLease_args();
      args.setStreamId(streamId);
      args.setClientId(clientId);
      args.setSessionSecret(sessionSecret);
      args.setExpectedLease(expectedLease);
      args.setSetLease(setLease);
      sendBase("renewLease", args);
    }

    public StreamLeaseRenewalResponse recv_renewLease() throws org.apache.thrift.TException
    {
      renewLease_result result = new renewLease_result();
      receiveBase(result, "renewLease");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "renewLease failed: unknown result");
    }

    public long getLargestBlockId(java.lang.String streamId) throws org.apache.thrift.TException
    {
      send_getLargestBlockId(streamId);
      return recv_getLargestBlockId();
    }

    public void send_getLargestBlockId(java.lang.String streamId) throws org.apache.thrift.TException
    {
      getLargestBlockId_args args = new getLargestBlockId_args();
      args.setStreamId(streamId);
      sendBase("getLargestBlockId", args);
    }

    public long recv_getLargestBlockId() throws org.apache.thrift.TException
    {
      getLargestBlockId_result result = new getLargestBlockId_result();
      receiveBase(result, "getLargestBlockId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLargestBlockId failed: unknown result");
    }

    public SQueryResponse findStream(SQueryRequest squery) throws org.apache.thrift.TException
    {
      send_findStream(squery);
      return recv_findStream();
    }

    public void send_findStream(SQueryRequest squery) throws org.apache.thrift.TException
    {
      findStream_args args = new findStream_args();
      args.setSquery(squery);
      sendBase("findStream", args);
    }

    public SQueryResponse recv_findStream() throws org.apache.thrift.TException
    {
      findStream_result result = new findStream_result();
      receiveBase(result, "findStream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStream failed: unknown result");
    }

    public WriteResponse updateBlock(long mbId, Metadata mbMetadata, java.nio.ByteBuffer mbData) throws org.apache.thrift.TException
    {
      send_updateBlock(mbId, mbMetadata, mbData);
      return recv_updateBlock();
    }

    public void send_updateBlock(long mbId, Metadata mbMetadata, java.nio.ByteBuffer mbData) throws org.apache.thrift.TException
    {
      updateBlock_args args = new updateBlock_args();
      args.setMbId(mbId);
      args.setMbMetadata(mbMetadata);
      args.setMbData(mbData);
      sendBase("updateBlock", args);
    }

    public WriteResponse recv_updateBlock() throws org.apache.thrift.TException
    {
      updateBlock_result result = new updateBlock_result();
      receiveBase(result, "updateBlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBlock failed: unknown result");
    }

    public java.util.Set<java.lang.Long> listLocalPartitionMbId(boolean flag) throws org.apache.thrift.TException
    {
      send_listLocalPartitionMbId(flag);
      return recv_listLocalPartitionMbId();
    }

    public void send_listLocalPartitionMbId(boolean flag) throws org.apache.thrift.TException
    {
      listLocalPartitionMbId_args args = new listLocalPartitionMbId_args();
      args.setFlag(flag);
      sendBase("listLocalPartitionMbId", args);
    }

    public java.util.Set<java.lang.Long> recv_listLocalPartitionMbId() throws org.apache.thrift.TException
    {
      listLocalPartitionMbId_result result = new listLocalPartitionMbId_result();
      receiveBase(result, "listLocalPartitionMbId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listLocalPartitionMbId failed: unknown result");
    }

    public java.util.List<NeighborInfoData> requestAllNeighbors() throws org.apache.thrift.TException
    {
      send_requestAllNeighbors();
      return recv_requestAllNeighbors();
    }

    public void send_requestAllNeighbors() throws org.apache.thrift.TException
    {
      requestAllNeighbors_args args = new requestAllNeighbors_args();
      sendBase("requestAllNeighbors", args);
    }

    public java.util.List<NeighborInfoData> recv_requestAllNeighbors() throws org.apache.thrift.TException
    {
      requestAllNeighbors_result result = new requestAllNeighbors_result();
      receiveBase(result, "requestAllNeighbors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestAllNeighbors failed: unknown result");
    }

    public java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> requestEdgeMicrobatchMap() throws org.apache.thrift.TException
    {
      send_requestEdgeMicrobatchMap();
      return recv_requestEdgeMicrobatchMap();
    }

    public void send_requestEdgeMicrobatchMap() throws org.apache.thrift.TException
    {
      requestEdgeMicrobatchMap_args args = new requestEdgeMicrobatchMap_args();
      sendBase("requestEdgeMicrobatchMap", args);
    }

    public java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> recv_requestEdgeMicrobatchMap() throws org.apache.thrift.TException
    {
      requestEdgeMicrobatchMap_result result = new requestEdgeMicrobatchMap_result();
      receiveBase(result, "requestEdgeMicrobatchMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestEdgeMicrobatchMap failed: unknown result");
    }

    public java.util.Map<java.lang.Long,java.lang.String> findBlockUsingQuery(java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, boolean checkNeighbors, boolean checkBuddies) throws org.apache.thrift.TException
    {
      send_findBlockUsingQuery(metaKeyValueMap, checkNeighbors, checkBuddies);
      return recv_findBlockUsingQuery();
    }

    public void send_findBlockUsingQuery(java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, boolean checkNeighbors, boolean checkBuddies) throws org.apache.thrift.TException
    {
      findBlockUsingQuery_args args = new findBlockUsingQuery_args();
      args.setMetaKeyValueMap(metaKeyValueMap);
      args.setCheckNeighbors(checkNeighbors);
      args.setCheckBuddies(checkBuddies);
      sendBase("findBlockUsingQuery", args);
    }

    public java.util.Map<java.lang.Long,java.lang.String> recv_findBlockUsingQuery() throws org.apache.thrift.TException
    {
      findBlockUsingQuery_result result = new findBlockUsingQuery_result();
      receiveBase(result, "findBlockUsingQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findBlockUsingQuery failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void joinCluster(FogInfoData NodeX, short pmin, short pmax, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      joinCluster_call method_call = new joinCluster_call(NodeX, pmin, pmax, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class joinCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NeighborInfoData>> {
      private FogInfoData NodeX;
      private short pmin;
      private short pmax;
      public joinCluster_call(FogInfoData NodeX, short pmin, short pmax, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.NodeX = NodeX;
        this.pmin = pmin;
        this.pmax = pmax;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("joinCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        joinCluster_args args = new joinCluster_args();
        args.setNodeX(NodeX);
        args.setPmin(pmin);
        args.setPmax(pmax);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<NeighborInfoData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_joinCluster();
      }
    }

    public void joinPool(FogInfoData NodeX, org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      joinPool_call method_call = new joinPool_call(NodeX, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class joinPool_call extends org.apache.thrift.async.TAsyncMethodCall<TwoPhaseCommitResponse> {
      private FogInfoData NodeX;
      public joinPool_call(FogInfoData NodeX, org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.NodeX = NodeX;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("joinPool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        joinPool_args args = new joinPool_args();
        args.setNodeX(NodeX);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TwoPhaseCommitResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_joinPool();
      }
    }

    public void getCandidatePool(double reliability, short pmin, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCandidatePool_call method_call = new getCandidatePool_call(reliability, pmin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCandidatePool_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NeighborInfoData>> {
      private double reliability;
      private short pmin;
      public getCandidatePool_call(double reliability, short pmin, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reliability = reliability;
        this.pmin = pmin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCandidatePool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCandidatePool_args args = new getCandidatePool_args();
        args.setReliability(reliability);
        args.setPmin(pmin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<NeighborInfoData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCandidatePool();
      }
    }

    public void bootstrapFog(FogInfoData NodeX, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bootstrapFog_call method_call = new bootstrapFog_call(NodeX, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bootstrapFog_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private FogInfoData NodeX;
      public bootstrapFog_call(FogInfoData NodeX, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.NodeX = NodeX;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bootstrapFog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bootstrapFog_args args = new bootstrapFog_args();
        args.setNodeX(NodeX);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bootstrapFog();
      }
    }

    public void initiate2PhasePreCommit(TwoPhasePreCommitRequest preCommitRequest, org.apache.thrift.async.AsyncMethodCallback<TwoPhasePreCommitResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initiate2PhasePreCommit_call method_call = new initiate2PhasePreCommit_call(preCommitRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initiate2PhasePreCommit_call extends org.apache.thrift.async.TAsyncMethodCall<TwoPhasePreCommitResponse> {
      private TwoPhasePreCommitRequest preCommitRequest;
      public initiate2PhasePreCommit_call(TwoPhasePreCommitRequest preCommitRequest, org.apache.thrift.async.AsyncMethodCallback<TwoPhasePreCommitResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.preCommitRequest = preCommitRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initiate2PhasePreCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initiate2PhasePreCommit_args args = new initiate2PhasePreCommit_args();
        args.setPreCommitRequest(preCommitRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TwoPhasePreCommitResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_initiate2PhasePreCommit();
      }
    }

    public void initiate2PhaseCommit(TwoPhaseCommitRequest commitRequest, org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initiate2PhaseCommit_call method_call = new initiate2PhaseCommit_call(commitRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initiate2PhaseCommit_call extends org.apache.thrift.async.TAsyncMethodCall<TwoPhaseCommitResponse> {
      private TwoPhaseCommitRequest commitRequest;
      public initiate2PhaseCommit_call(TwoPhaseCommitRequest commitRequest, org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commitRequest = commitRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initiate2PhaseCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initiate2PhaseCommit_args args = new initiate2PhaseCommit_args();
        args.setCommitRequest(commitRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TwoPhaseCommitResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_initiate2PhaseCommit();
      }
    }

    public void buddyHeartBeat(BuddyPayload payload, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      buddyHeartBeat_call method_call = new buddyHeartBeat_call(payload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class buddyHeartBeat_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private BuddyPayload payload;
      public buddyHeartBeat_call(BuddyPayload payload, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.payload = payload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("buddyHeartBeat", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        buddyHeartBeat_args args = new buddyHeartBeat_args();
        args.setPayload(payload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void neighborHeartBeat(NeighborPayload payload, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      neighborHeartBeat_call method_call = new neighborHeartBeat_call(payload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class neighborHeartBeat_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private NeighborPayload payload;
      public neighborHeartBeat_call(NeighborPayload payload, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.payload = payload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("neighborHeartBeat", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        neighborHeartBeat_args args = new neighborHeartBeat_args();
        args.setPayload(payload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getPoolMember(short buddyPoolId, org.apache.thrift.async.AsyncMethodCallback<NodeInfoData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPoolMember_call method_call = new getPoolMember_call(buddyPoolId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPoolMember_call extends org.apache.thrift.async.TAsyncMethodCall<NodeInfoData> {
      private short buddyPoolId;
      public getPoolMember_call(short buddyPoolId, org.apache.thrift.async.AsyncMethodCallback<NodeInfoData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buddyPoolId = buddyPoolId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPoolMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPoolMember_args args = new getPoolMember_args();
        args.setBuddyPoolId(buddyPoolId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NodeInfoData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPoolMember();
      }
    }

    public void getBuddyPoolMembers(org.apache.thrift.async.AsyncMethodCallback<java.util.List<FogInfoData>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBuddyPoolMembers_call method_call = new getBuddyPoolMembers_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBuddyPoolMembers_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<FogInfoData>> {
      public getBuddyPoolMembers_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<FogInfoData>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBuddyPoolMembers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBuddyPoolMembers_args args = new getBuddyPoolMembers_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<FogInfoData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBuddyPoolMembers();
      }
    }

    public void getNeighborCountPerPool(org.apache.thrift.async.AsyncMethodCallback<NeighborCount> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNeighborCountPerPool_call method_call = new getNeighborCountPerPool_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNeighborCountPerPool_call extends org.apache.thrift.async.TAsyncMethodCall<NeighborCount> {
      public getNeighborCountPerPool_call(org.apache.thrift.async.AsyncMethodCallback<NeighborCount> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNeighborCountPerPool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNeighborCountPerPool_args args = new getNeighborCountPerPool_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NeighborCount getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNeighborCountPerPool();
      }
    }

    public void requestNeighbors(java.util.Map<java.lang.Short,java.lang.Short> requestMap, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestNeighbors_call method_call = new requestNeighbors_call(requestMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestNeighbors_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NeighborInfoData>> {
      private java.util.Map<java.lang.Short,java.lang.Short> requestMap;
      public requestNeighbors_call(java.util.Map<java.lang.Short,java.lang.Short> requestMap, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestMap = requestMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestNeighbors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestNeighbors_args args = new requestNeighbors_args();
        args.setRequestMap(requestMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<NeighborInfoData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestNeighbors();
      }
    }

    public void nodeJoiningComplete(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      nodeJoiningComplete_call method_call = new nodeJoiningComplete_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class nodeJoiningComplete_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public nodeJoiningComplete_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("nodeJoiningComplete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        nodeJoiningComplete_args args = new nodeJoiningComplete_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void subscribe(NodeInfoData nodeInfoData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subscribe_call method_call = new subscribe_call(nodeInfoData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subscribe_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private NodeInfoData nodeInfoData;
      public subscribe_call(NodeInfoData nodeInfoData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeInfoData = nodeInfoData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subscribe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        subscribe_args args = new subscribe_args();
        args.setNodeInfoData(nodeInfoData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_subscribe();
      }
    }

    public void edgeHeartBeats(EdgePayload edgePayload, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edgeHeartBeats_call method_call = new edgeHeartBeats_call(edgePayload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edgeHeartBeats_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private EdgePayload edgePayload;
      public edgeHeartBeats_call(EdgePayload edgePayload, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.edgePayload = edgePayload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edgeHeartBeats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edgeHeartBeats_args args = new edgeHeartBeats_args();
        args.setEdgePayload(edgePayload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edgeHeartBeats();
      }
    }

    public void edgeJoin(EdgeInfoData edgeInfoData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edgeJoin_call method_call = new edgeJoin_call(edgeInfoData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edgeJoin_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Byte> {
      private EdgeInfoData edgeInfoData;
      public edgeJoin_call(EdgeInfoData edgeInfoData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.edgeInfoData = edgeInfoData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edgeJoin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edgeJoin_args args = new edgeJoin_args();
        args.setEdgeInfoData(edgeInfoData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edgeJoin();
      }
    }

    public void edgeLeave(EdgeInfoData edgeInfoData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edgeLeave_call method_call = new edgeLeave_call(edgeInfoData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edgeLeave_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Byte> {
      private EdgeInfoData edgeInfoData;
      public edgeLeave_call(EdgeInfoData edgeInfoData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.edgeInfoData = edgeInfoData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edgeLeave", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edgeLeave_args args = new edgeLeave_args();
        args.setEdgeInfoData(edgeInfoData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edgeLeave();
      }
    }

    public void terminate(java.lang.String streamId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminate_call method_call = new terminate_call(streamId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Byte> {
      private java.lang.String streamId;
      public terminate_call(java.lang.String streamId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamId = streamId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminate_args args = new terminate_args();
        args.setStreamId(streamId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terminate();
      }
    }

    public void registerStream(java.lang.String streamId, StreamMetadata streamMetadata, long startSequenceNumber, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerStream_call method_call = new registerStream_call(streamId, streamMetadata, startSequenceNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerStream_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Byte> {
      private java.lang.String streamId;
      private StreamMetadata streamMetadata;
      private long startSequenceNumber;
      public registerStream_call(java.lang.String streamId, StreamMetadata streamMetadata, long startSequenceNumber, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamId = streamId;
        this.streamMetadata = streamMetadata;
        this.startSequenceNumber = startSequenceNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerStream_args args = new registerStream_args();
        args.setStreamId(streamId);
        args.setStreamMetadata(streamMetadata);
        args.setStartSequenceNumber(startSequenceNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerStream();
      }
    }

    public void intentToWrite(byte clientId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      intentToWrite_call method_call = new intentToWrite_call(clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class intentToWrite_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private byte clientId;
      public intentToWrite_call(byte clientId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("intentToWrite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        intentToWrite_args args = new intentToWrite_args();
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_intentToWrite();
      }
    }

    public void getStreamMetadata(java.lang.String streamId, boolean checkNeighbors, boolean checkBuddies, boolean forceLatest, org.apache.thrift.async.AsyncMethodCallback<StreamMetadataInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStreamMetadata_call method_call = new getStreamMetadata_call(streamId, checkNeighbors, checkBuddies, forceLatest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStreamMetadata_call extends org.apache.thrift.async.TAsyncMethodCall<StreamMetadataInfo> {
      private java.lang.String streamId;
      private boolean checkNeighbors;
      private boolean checkBuddies;
      private boolean forceLatest;
      public getStreamMetadata_call(java.lang.String streamId, boolean checkNeighbors, boolean checkBuddies, boolean forceLatest, org.apache.thrift.async.AsyncMethodCallback<StreamMetadataInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamId = streamId;
        this.checkNeighbors = checkNeighbors;
        this.checkBuddies = checkBuddies;
        this.forceLatest = forceLatest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStreamMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStreamMetadata_args args = new getStreamMetadata_args();
        args.setStreamId(streamId);
        args.setCheckNeighbors(checkNeighbors);
        args.setCheckBuddies(checkBuddies);
        args.setForceLatest(forceLatest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StreamMetadataInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStreamMetadata();
      }
    }

    public void getStreamMetadataFromOwner(java.lang.String streamId, org.apache.thrift.async.AsyncMethodCallback<StreamMetadata> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStreamMetadataFromOwner_call method_call = new getStreamMetadataFromOwner_call(streamId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStreamMetadataFromOwner_call extends org.apache.thrift.async.TAsyncMethodCall<StreamMetadata> {
      private java.lang.String streamId;
      public getStreamMetadataFromOwner_call(java.lang.String streamId, org.apache.thrift.async.AsyncMethodCallback<StreamMetadata> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamId = streamId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStreamMetadataFromOwner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStreamMetadataFromOwner_args args = new getStreamMetadataFromOwner_args();
        args.setStreamId(streamId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StreamMetadata getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStreamMetadataFromOwner();
      }
    }

    public void getWriteLocations(byte dataLength, Metadata metadata, java.util.List<java.lang.Short> blackListedFogs, boolean isEdge, org.apache.thrift.async.AsyncMethodCallback<java.util.List<WritableFogData>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWriteLocations_call method_call = new getWriteLocations_call(dataLength, metadata, blackListedFogs, isEdge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWriteLocations_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<WritableFogData>> {
      private byte dataLength;
      private Metadata metadata;
      private java.util.List<java.lang.Short> blackListedFogs;
      private boolean isEdge;
      public getWriteLocations_call(byte dataLength, Metadata metadata, java.util.List<java.lang.Short> blackListedFogs, boolean isEdge, org.apache.thrift.async.AsyncMethodCallback<java.util.List<WritableFogData>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataLength = dataLength;
        this.metadata = metadata;
        this.blackListedFogs = blackListedFogs;
        this.isEdge = isEdge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWriteLocations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWriteLocations_args args = new getWriteLocations_args();
        args.setDataLength(dataLength);
        args.setMetadata(metadata);
        args.setBlackListedFogs(blackListedFogs);
        args.setIsEdge(isEdge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<WritableFogData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWriteLocations();
      }
    }

    public void write(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      write_call method_call = new write_call(mbMetadata, data, preference, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class write_call extends org.apache.thrift.async.TAsyncMethodCall<WriteResponse> {
      private Metadata mbMetadata;
      private java.nio.ByteBuffer data;
      private WritePreference preference;
      public write_call(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mbMetadata = mbMetadata;
        this.data = data;
        this.preference = preference;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("write", org.apache.thrift.protocol.TMessageType.CALL, 0));
        write_args args = new write_args();
        args.setMbMetadata(mbMetadata);
        args.setData(data);
        args.setPreference(preference);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WriteResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_write();
      }
    }

    public void writeNext(java.lang.String sessionId, Metadata mbData, byte dataLength, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeInfoData>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeNext_call method_call = new writeNext_call(sessionId, mbData, dataLength, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeNext_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NodeInfoData>> {
      private java.lang.String sessionId;
      private Metadata mbData;
      private byte dataLength;
      public writeNext_call(java.lang.String sessionId, Metadata mbData, byte dataLength, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeInfoData>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.mbData = mbData;
        this.dataLength = dataLength;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeNext", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeNext_args args = new writeNext_args();
        args.setSessionId(sessionId);
        args.setMbData(mbData);
        args.setDataLength(dataLength);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<NodeInfoData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeNext();
      }
    }

    public void insertMetadata(Metadata mbMetadata, EdgeInfoData edgeInfoData, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertMetadata_call method_call = new insertMetadata_call(mbMetadata, edgeInfoData, metaKeyValueMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertMetadata_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Byte> {
      private Metadata mbMetadata;
      private EdgeInfoData edgeInfoData;
      private java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap;
      public insertMetadata_call(Metadata mbMetadata, EdgeInfoData edgeInfoData, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mbMetadata = mbMetadata;
        this.edgeInfoData = edgeInfoData;
        this.metaKeyValueMap = metaKeyValueMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertMetadata_args args = new insertMetadata_args();
        args.setMbMetadata(mbMetadata);
        args.setEdgeInfoData(edgeInfoData);
        args.setMetaKeyValueMap(metaKeyValueMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertMetadata();
      }
    }

    public void findNext(java.lang.String microbatchId, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findNext_call method_call = new findNext_call(microbatchId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findNext_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String microbatchId;
      public findNext_call(java.lang.String microbatchId, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.microbatchId = microbatchId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findNext", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findNext_args args = new findNext_args();
        args.setMicrobatchId(microbatchId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findNext();
      }
    }

    public void find(long microbatchId, boolean checkNeighbors, boolean checkBuddies, EdgeInfoData selfInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FindReplica>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      find_call method_call = new find_call(microbatchId, checkNeighbors, checkBuddies, selfInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class find_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<FindReplica>> {
      private long microbatchId;
      private boolean checkNeighbors;
      private boolean checkBuddies;
      private EdgeInfoData selfInfo;
      public find_call(long microbatchId, boolean checkNeighbors, boolean checkBuddies, EdgeInfoData selfInfo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FindReplica>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.microbatchId = microbatchId;
        this.checkNeighbors = checkNeighbors;
        this.checkBuddies = checkBuddies;
        this.selfInfo = selfInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("find", org.apache.thrift.protocol.TMessageType.CALL, 0));
        find_args args = new find_args();
        args.setMicrobatchId(microbatchId);
        args.setCheckNeighbors(checkNeighbors);
        args.setCheckBuddies(checkBuddies);
        args.setSelfInfo(selfInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<FindReplica> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_find();
      }
    }

    public void read(long microbatchId, boolean fetchMetadata, org.apache.thrift.async.AsyncMethodCallback<ReadReplica> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      read_call method_call = new read_call(microbatchId, fetchMetadata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class read_call extends org.apache.thrift.async.TAsyncMethodCall<ReadReplica> {
      private long microbatchId;
      private boolean fetchMetadata;
      public read_call(long microbatchId, boolean fetchMetadata, org.apache.thrift.async.AsyncMethodCallback<ReadReplica> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.microbatchId = microbatchId;
        this.fetchMetadata = fetchMetadata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("read", org.apache.thrift.protocol.TMessageType.CALL, 0));
        read_args args = new read_args();
        args.setMicrobatchId(microbatchId);
        args.setFetchMetadata(fetchMetadata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReadReplica getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_read();
      }
    }

    public void findUsingQuery(java.lang.String metadataKey, java.lang.String metadataValue, boolean checkNeighbors, boolean checkBuddies, org.apache.thrift.async.AsyncMethodCallback<QueryReplica> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUsingQuery_call method_call = new findUsingQuery_call(metadataKey, metadataValue, checkNeighbors, checkBuddies, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUsingQuery_call extends org.apache.thrift.async.TAsyncMethodCall<QueryReplica> {
      private java.lang.String metadataKey;
      private java.lang.String metadataValue;
      private boolean checkNeighbors;
      private boolean checkBuddies;
      public findUsingQuery_call(java.lang.String metadataKey, java.lang.String metadataValue, boolean checkNeighbors, boolean checkBuddies, org.apache.thrift.async.AsyncMethodCallback<QueryReplica> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadataKey = metadataKey;
        this.metadataValue = metadataValue;
        this.checkNeighbors = checkNeighbors;
        this.checkBuddies = checkBuddies;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUsingQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUsingQuery_args args = new findUsingQuery_args();
        args.setMetadataKey(metadataKey);
        args.setMetadataValue(metadataValue);
        args.setCheckNeighbors(checkNeighbors);
        args.setCheckBuddies(checkBuddies);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public QueryReplica getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUsingQuery();
      }
    }

    public void getMeta(long microbatchId, boolean checkNeighbors, boolean checkBuddies, org.apache.thrift.async.AsyncMethodCallback<ReadReplica> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMeta_call method_call = new getMeta_call(microbatchId, checkNeighbors, checkBuddies, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMeta_call extends org.apache.thrift.async.TAsyncMethodCall<ReadReplica> {
      private long microbatchId;
      private boolean checkNeighbors;
      private boolean checkBuddies;
      public getMeta_call(long microbatchId, boolean checkNeighbors, boolean checkBuddies, org.apache.thrift.async.AsyncMethodCallback<ReadReplica> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.microbatchId = microbatchId;
        this.checkNeighbors = checkNeighbors;
        this.checkBuddies = checkBuddies;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMeta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMeta_args args = new getMeta_args();
        args.setMicrobatchId(microbatchId);
        args.setCheckNeighbors(checkNeighbors);
        args.setCheckBuddies(checkBuddies);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReadReplica getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMeta();
      }
    }

    public void serializeState(org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      serializeState_call method_call = new serializeState_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class serializeState_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Byte> {
      public serializeState_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("serializeState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        serializeState_args args = new serializeState_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_serializeState();
      }
    }

    public void updateStreamMetadata(StreamMetadata metadata, org.apache.thrift.async.AsyncMethodCallback<StreamMetadataUpdateResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStreamMetadata_call method_call = new updateStreamMetadata_call(metadata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStreamMetadata_call extends org.apache.thrift.async.TAsyncMethodCall<StreamMetadataUpdateResponse> {
      private StreamMetadata metadata;
      public updateStreamMetadata_call(StreamMetadata metadata, org.apache.thrift.async.AsyncMethodCallback<StreamMetadataUpdateResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadata = metadata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStreamMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStreamMetadata_args args = new updateStreamMetadata_args();
        args.setMetadata(metadata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StreamMetadataUpdateResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStreamMetadata();
      }
    }

    public void open(java.lang.String streamId, java.lang.String clientId, int expectedLease, boolean setLease, org.apache.thrift.async.AsyncMethodCallback<OpenStreamResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      open_call method_call = new open_call(streamId, clientId, expectedLease, setLease, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class open_call extends org.apache.thrift.async.TAsyncMethodCall<OpenStreamResponse> {
      private java.lang.String streamId;
      private java.lang.String clientId;
      private int expectedLease;
      private boolean setLease;
      public open_call(java.lang.String streamId, java.lang.String clientId, int expectedLease, boolean setLease, org.apache.thrift.async.AsyncMethodCallback<OpenStreamResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamId = streamId;
        this.clientId = clientId;
        this.expectedLease = expectedLease;
        this.setLease = setLease;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("open", org.apache.thrift.protocol.TMessageType.CALL, 0));
        open_args args = new open_args();
        args.setStreamId(streamId);
        args.setClientId(clientId);
        args.setExpectedLease(expectedLease);
        args.setSetLease(setLease);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OpenStreamResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_open();
      }
    }

    public void putNext(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putNext_call method_call = new putNext_call(mbMetadata, data, preference, metaKeyValueMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putNext_call extends org.apache.thrift.async.TAsyncMethodCall<WriteResponse> {
      private Metadata mbMetadata;
      private java.nio.ByteBuffer data;
      private WritePreference preference;
      private java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap;
      public putNext_call(Metadata mbMetadata, java.nio.ByteBuffer data, WritePreference preference, java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mbMetadata = mbMetadata;
        this.data = data;
        this.preference = preference;
        this.metaKeyValueMap = metaKeyValueMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putNext", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putNext_args args = new putNext_args();
        args.setMbMetadata(mbMetadata);
        args.setData(data);
        args.setPreference(preference);
        args.setMetaKeyValueMap(metaKeyValueMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WriteResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putNext();
      }
    }

    public void incrementBlockCount(Metadata mbMetadata, boolean setLease, org.apache.thrift.async.AsyncMethodCallback<BlockMetadataUpdateResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      incrementBlockCount_call method_call = new incrementBlockCount_call(mbMetadata, setLease, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class incrementBlockCount_call extends org.apache.thrift.async.TAsyncMethodCall<BlockMetadataUpdateResponse> {
      private Metadata mbMetadata;
      private boolean setLease;
      public incrementBlockCount_call(Metadata mbMetadata, boolean setLease, org.apache.thrift.async.AsyncMethodCallback<BlockMetadataUpdateResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mbMetadata = mbMetadata;
        this.setLease = setLease;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("incrementBlockCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        incrementBlockCount_args args = new incrementBlockCount_args();
        args.setMbMetadata(mbMetadata);
        args.setSetLease(setLease);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BlockMetadataUpdateResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_incrementBlockCount();
      }
    }

    public void renewLease(java.lang.String streamId, java.lang.String clientId, java.lang.String sessionSecret, int expectedLease, boolean setLease, org.apache.thrift.async.AsyncMethodCallback<StreamLeaseRenewalResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      renewLease_call method_call = new renewLease_call(streamId, clientId, sessionSecret, expectedLease, setLease, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class renewLease_call extends org.apache.thrift.async.TAsyncMethodCall<StreamLeaseRenewalResponse> {
      private java.lang.String streamId;
      private java.lang.String clientId;
      private java.lang.String sessionSecret;
      private int expectedLease;
      private boolean setLease;
      public renewLease_call(java.lang.String streamId, java.lang.String clientId, java.lang.String sessionSecret, int expectedLease, boolean setLease, org.apache.thrift.async.AsyncMethodCallback<StreamLeaseRenewalResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamId = streamId;
        this.clientId = clientId;
        this.sessionSecret = sessionSecret;
        this.expectedLease = expectedLease;
        this.setLease = setLease;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renewLease", org.apache.thrift.protocol.TMessageType.CALL, 0));
        renewLease_args args = new renewLease_args();
        args.setStreamId(streamId);
        args.setClientId(clientId);
        args.setSessionSecret(sessionSecret);
        args.setExpectedLease(expectedLease);
        args.setSetLease(setLease);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StreamLeaseRenewalResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_renewLease();
      }
    }

    public void getLargestBlockId(java.lang.String streamId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLargestBlockId_call method_call = new getLargestBlockId_call(streamId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLargestBlockId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private java.lang.String streamId;
      public getLargestBlockId_call(java.lang.String streamId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamId = streamId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLargestBlockId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLargestBlockId_args args = new getLargestBlockId_args();
        args.setStreamId(streamId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLargestBlockId();
      }
    }

    public void findStream(SQueryRequest squery, org.apache.thrift.async.AsyncMethodCallback<SQueryResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStream_call method_call = new findStream_call(squery, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStream_call extends org.apache.thrift.async.TAsyncMethodCall<SQueryResponse> {
      private SQueryRequest squery;
      public findStream_call(SQueryRequest squery, org.apache.thrift.async.AsyncMethodCallback<SQueryResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.squery = squery;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStream_args args = new findStream_args();
        args.setSquery(squery);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SQueryResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStream();
      }
    }

    public void updateBlock(long mbId, Metadata mbMetadata, java.nio.ByteBuffer mbData, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBlock_call method_call = new updateBlock_call(mbId, mbMetadata, mbData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBlock_call extends org.apache.thrift.async.TAsyncMethodCall<WriteResponse> {
      private long mbId;
      private Metadata mbMetadata;
      private java.nio.ByteBuffer mbData;
      public updateBlock_call(long mbId, Metadata mbMetadata, java.nio.ByteBuffer mbData, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mbId = mbId;
        this.mbMetadata = mbMetadata;
        this.mbData = mbData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBlock_args args = new updateBlock_args();
        args.setMbId(mbId);
        args.setMbMetadata(mbMetadata);
        args.setMbData(mbData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WriteResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBlock();
      }
    }

    public void listLocalPartitionMbId(boolean flag, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<java.lang.Long>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listLocalPartitionMbId_call method_call = new listLocalPartitionMbId_call(flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listLocalPartitionMbId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Set<java.lang.Long>> {
      private boolean flag;
      public listLocalPartitionMbId_call(boolean flag, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<java.lang.Long>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listLocalPartitionMbId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listLocalPartitionMbId_args args = new listLocalPartitionMbId_args();
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Set<java.lang.Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listLocalPartitionMbId();
      }
    }

    public void requestAllNeighbors(org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestAllNeighbors_call method_call = new requestAllNeighbors_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestAllNeighbors_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NeighborInfoData>> {
      public requestAllNeighbors_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestAllNeighbors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestAllNeighbors_args args = new requestAllNeighbors_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<NeighborInfoData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestAllNeighbors();
      }
    }

    public void requestEdgeMicrobatchMap(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestEdgeMicrobatchMap_call method_call = new requestEdgeMicrobatchMap_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestEdgeMicrobatchMap_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>>> {
      public requestEdgeMicrobatchMap_call(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestEdgeMicrobatchMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestEdgeMicrobatchMap_args args = new requestEdgeMicrobatchMap_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestEdgeMicrobatchMap();
      }
    }

    public void findBlockUsingQuery(java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, boolean checkNeighbors, boolean checkBuddies, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findBlockUsingQuery_call method_call = new findBlockUsingQuery_call(metaKeyValueMap, checkNeighbors, checkBuddies, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findBlockUsingQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.Long,java.lang.String>> {
      private java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap;
      private boolean checkNeighbors;
      private boolean checkBuddies;
      public findBlockUsingQuery_call(java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap, boolean checkNeighbors, boolean checkBuddies, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metaKeyValueMap = metaKeyValueMap;
        this.checkNeighbors = checkNeighbors;
        this.checkBuddies = checkBuddies;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findBlockUsingQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findBlockUsingQuery_args args = new findBlockUsingQuery_args();
        args.setMetaKeyValueMap(metaKeyValueMap);
        args.setCheckNeighbors(checkNeighbors);
        args.setCheckBuddies(checkBuddies);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.Long,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findBlockUsingQuery();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("joinCluster", new joinCluster());
      processMap.put("joinPool", new joinPool());
      processMap.put("getCandidatePool", new getCandidatePool());
      processMap.put("bootstrapFog", new bootstrapFog());
      processMap.put("initiate2PhasePreCommit", new initiate2PhasePreCommit());
      processMap.put("initiate2PhaseCommit", new initiate2PhaseCommit());
      processMap.put("buddyHeartBeat", new buddyHeartBeat());
      processMap.put("neighborHeartBeat", new neighborHeartBeat());
      processMap.put("getPoolMember", new getPoolMember());
      processMap.put("getBuddyPoolMembers", new getBuddyPoolMembers());
      processMap.put("getNeighborCountPerPool", new getNeighborCountPerPool());
      processMap.put("requestNeighbors", new requestNeighbors());
      processMap.put("nodeJoiningComplete", new nodeJoiningComplete());
      processMap.put("subscribe", new subscribe());
      processMap.put("edgeHeartBeats", new edgeHeartBeats());
      processMap.put("edgeJoin", new edgeJoin());
      processMap.put("edgeLeave", new edgeLeave());
      processMap.put("terminate", new terminate());
      processMap.put("registerStream", new registerStream());
      processMap.put("intentToWrite", new intentToWrite());
      processMap.put("getStreamMetadata", new getStreamMetadata());
      processMap.put("getStreamMetadataFromOwner", new getStreamMetadataFromOwner());
      processMap.put("getWriteLocations", new getWriteLocations());
      processMap.put("write", new write());
      processMap.put("writeNext", new writeNext());
      processMap.put("insertMetadata", new insertMetadata());
      processMap.put("findNext", new findNext());
      processMap.put("find", new find());
      processMap.put("read", new read());
      processMap.put("findUsingQuery", new findUsingQuery());
      processMap.put("getMeta", new getMeta());
      processMap.put("serializeState", new serializeState());
      processMap.put("updateStreamMetadata", new updateStreamMetadata());
      processMap.put("open", new open());
      processMap.put("putNext", new putNext());
      processMap.put("incrementBlockCount", new incrementBlockCount());
      processMap.put("renewLease", new renewLease());
      processMap.put("getLargestBlockId", new getLargestBlockId());
      processMap.put("findStream", new findStream());
      processMap.put("updateBlock", new updateBlock());
      processMap.put("listLocalPartitionMbId", new listLocalPartitionMbId());
      processMap.put("requestAllNeighbors", new requestAllNeighbors());
      processMap.put("requestEdgeMicrobatchMap", new requestEdgeMicrobatchMap());
      processMap.put("findBlockUsingQuery", new findBlockUsingQuery());
      return processMap;
    }

    public static class joinCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, joinCluster_args> {
      public joinCluster() {
        super("joinCluster");
      }

      public joinCluster_args getEmptyArgsInstance() {
        return new joinCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public joinCluster_result getResult(I iface, joinCluster_args args) throws org.apache.thrift.TException {
        joinCluster_result result = new joinCluster_result();
        result.success = iface.joinCluster(args.NodeX, args.pmin, args.pmax);
        return result;
      }
    }

    public static class joinPool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, joinPool_args> {
      public joinPool() {
        super("joinPool");
      }

      public joinPool_args getEmptyArgsInstance() {
        return new joinPool_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public joinPool_result getResult(I iface, joinPool_args args) throws org.apache.thrift.TException {
        joinPool_result result = new joinPool_result();
        result.success = iface.joinPool(args.NodeX);
        return result;
      }
    }

    public static class getCandidatePool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCandidatePool_args> {
      public getCandidatePool() {
        super("getCandidatePool");
      }

      public getCandidatePool_args getEmptyArgsInstance() {
        return new getCandidatePool_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getCandidatePool_result getResult(I iface, getCandidatePool_args args) throws org.apache.thrift.TException {
        getCandidatePool_result result = new getCandidatePool_result();
        result.success = iface.getCandidatePool(args.reliability, args.pmin);
        return result;
      }
    }

    public static class bootstrapFog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bootstrapFog_args> {
      public bootstrapFog() {
        super("bootstrapFog");
      }

      public bootstrapFog_args getEmptyArgsInstance() {
        return new bootstrapFog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public bootstrapFog_result getResult(I iface, bootstrapFog_args args) throws org.apache.thrift.TException {
        bootstrapFog_result result = new bootstrapFog_result();
        result.success = iface.bootstrapFog(args.NodeX);
        return result;
      }
    }

    public static class initiate2PhasePreCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initiate2PhasePreCommit_args> {
      public initiate2PhasePreCommit() {
        super("initiate2PhasePreCommit");
      }

      public initiate2PhasePreCommit_args getEmptyArgsInstance() {
        return new initiate2PhasePreCommit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public initiate2PhasePreCommit_result getResult(I iface, initiate2PhasePreCommit_args args) throws org.apache.thrift.TException {
        initiate2PhasePreCommit_result result = new initiate2PhasePreCommit_result();
        result.success = iface.initiate2PhasePreCommit(args.preCommitRequest);
        return result;
      }
    }

    public static class initiate2PhaseCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initiate2PhaseCommit_args> {
      public initiate2PhaseCommit() {
        super("initiate2PhaseCommit");
      }

      public initiate2PhaseCommit_args getEmptyArgsInstance() {
        return new initiate2PhaseCommit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public initiate2PhaseCommit_result getResult(I iface, initiate2PhaseCommit_args args) throws org.apache.thrift.TException {
        initiate2PhaseCommit_result result = new initiate2PhaseCommit_result();
        result.success = iface.initiate2PhaseCommit(args.commitRequest);
        return result;
      }
    }

    public static class buddyHeartBeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, buddyHeartBeat_args> {
      public buddyHeartBeat() {
        super("buddyHeartBeat");
      }

      public buddyHeartBeat_args getEmptyArgsInstance() {
        return new buddyHeartBeat_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, buddyHeartBeat_args args) throws org.apache.thrift.TException {
        iface.buddyHeartBeat(args.payload);
        return null;
      }
    }

    public static class neighborHeartBeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, neighborHeartBeat_args> {
      public neighborHeartBeat() {
        super("neighborHeartBeat");
      }

      public neighborHeartBeat_args getEmptyArgsInstance() {
        return new neighborHeartBeat_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, neighborHeartBeat_args args) throws org.apache.thrift.TException {
        iface.neighborHeartBeat(args.payload);
        return null;
      }
    }

    public static class getPoolMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPoolMember_args> {
      public getPoolMember() {
        super("getPoolMember");
      }

      public getPoolMember_args getEmptyArgsInstance() {
        return new getPoolMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getPoolMember_result getResult(I iface, getPoolMember_args args) throws org.apache.thrift.TException {
        getPoolMember_result result = new getPoolMember_result();
        result.success = iface.getPoolMember(args.buddyPoolId);
        return result;
      }
    }

    public static class getBuddyPoolMembers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBuddyPoolMembers_args> {
      public getBuddyPoolMembers() {
        super("getBuddyPoolMembers");
      }

      public getBuddyPoolMembers_args getEmptyArgsInstance() {
        return new getBuddyPoolMembers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getBuddyPoolMembers_result getResult(I iface, getBuddyPoolMembers_args args) throws org.apache.thrift.TException {
        getBuddyPoolMembers_result result = new getBuddyPoolMembers_result();
        result.success = iface.getBuddyPoolMembers();
        return result;
      }
    }

    public static class getNeighborCountPerPool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNeighborCountPerPool_args> {
      public getNeighborCountPerPool() {
        super("getNeighborCountPerPool");
      }

      public getNeighborCountPerPool_args getEmptyArgsInstance() {
        return new getNeighborCountPerPool_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getNeighborCountPerPool_result getResult(I iface, getNeighborCountPerPool_args args) throws org.apache.thrift.TException {
        getNeighborCountPerPool_result result = new getNeighborCountPerPool_result();
        result.success = iface.getNeighborCountPerPool();
        return result;
      }
    }

    public static class requestNeighbors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestNeighbors_args> {
      public requestNeighbors() {
        super("requestNeighbors");
      }

      public requestNeighbors_args getEmptyArgsInstance() {
        return new requestNeighbors_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public requestNeighbors_result getResult(I iface, requestNeighbors_args args) throws org.apache.thrift.TException {
        requestNeighbors_result result = new requestNeighbors_result();
        result.success = iface.requestNeighbors(args.requestMap);
        return result;
      }
    }

    public static class nodeJoiningComplete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, nodeJoiningComplete_args> {
      public nodeJoiningComplete() {
        super("nodeJoiningComplete");
      }

      public nodeJoiningComplete_args getEmptyArgsInstance() {
        return new nodeJoiningComplete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public nodeJoiningComplete_result getResult(I iface, nodeJoiningComplete_args args) throws org.apache.thrift.TException {
        nodeJoiningComplete_result result = new nodeJoiningComplete_result();
        iface.nodeJoiningComplete();
        return result;
      }
    }

    public static class subscribe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subscribe_args> {
      public subscribe() {
        super("subscribe");
      }

      public subscribe_args getEmptyArgsInstance() {
        return new subscribe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public subscribe_result getResult(I iface, subscribe_args args) throws org.apache.thrift.TException {
        subscribe_result result = new subscribe_result();
        result.success = iface.subscribe(args.nodeInfoData);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class edgeHeartBeats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edgeHeartBeats_args> {
      public edgeHeartBeats() {
        super("edgeHeartBeats");
      }

      public edgeHeartBeats_args getEmptyArgsInstance() {
        return new edgeHeartBeats_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public edgeHeartBeats_result getResult(I iface, edgeHeartBeats_args args) throws org.apache.thrift.TException {
        edgeHeartBeats_result result = new edgeHeartBeats_result();
        result.success = iface.edgeHeartBeats(args.edgePayload);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class edgeJoin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edgeJoin_args> {
      public edgeJoin() {
        super("edgeJoin");
      }

      public edgeJoin_args getEmptyArgsInstance() {
        return new edgeJoin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public edgeJoin_result getResult(I iface, edgeJoin_args args) throws org.apache.thrift.TException {
        edgeJoin_result result = new edgeJoin_result();
        result.success = iface.edgeJoin(args.edgeInfoData);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class edgeLeave<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edgeLeave_args> {
      public edgeLeave() {
        super("edgeLeave");
      }

      public edgeLeave_args getEmptyArgsInstance() {
        return new edgeLeave_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public edgeLeave_result getResult(I iface, edgeLeave_args args) throws org.apache.thrift.TException {
        edgeLeave_result result = new edgeLeave_result();
        result.success = iface.edgeLeave(args.edgeInfoData);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class terminate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminate_args> {
      public terminate() {
        super("terminate");
      }

      public terminate_args getEmptyArgsInstance() {
        return new terminate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public terminate_result getResult(I iface, terminate_args args) throws org.apache.thrift.TException {
        terminate_result result = new terminate_result();
        result.success = iface.terminate(args.streamId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class registerStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerStream_args> {
      public registerStream() {
        super("registerStream");
      }

      public registerStream_args getEmptyArgsInstance() {
        return new registerStream_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public registerStream_result getResult(I iface, registerStream_args args) throws org.apache.thrift.TException {
        registerStream_result result = new registerStream_result();
        result.success = iface.registerStream(args.streamId, args.streamMetadata, args.startSequenceNumber);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class intentToWrite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, intentToWrite_args> {
      public intentToWrite() {
        super("intentToWrite");
      }

      public intentToWrite_args getEmptyArgsInstance() {
        return new intentToWrite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public intentToWrite_result getResult(I iface, intentToWrite_args args) throws org.apache.thrift.TException {
        intentToWrite_result result = new intentToWrite_result();
        result.success = iface.intentToWrite(args.clientId);
        return result;
      }
    }

    public static class getStreamMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStreamMetadata_args> {
      public getStreamMetadata() {
        super("getStreamMetadata");
      }

      public getStreamMetadata_args getEmptyArgsInstance() {
        return new getStreamMetadata_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getStreamMetadata_result getResult(I iface, getStreamMetadata_args args) throws org.apache.thrift.TException {
        getStreamMetadata_result result = new getStreamMetadata_result();
        result.success = iface.getStreamMetadata(args.streamId, args.checkNeighbors, args.checkBuddies, args.forceLatest);
        return result;
      }
    }

    public static class getStreamMetadataFromOwner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStreamMetadataFromOwner_args> {
      public getStreamMetadataFromOwner() {
        super("getStreamMetadataFromOwner");
      }

      public getStreamMetadataFromOwner_args getEmptyArgsInstance() {
        return new getStreamMetadataFromOwner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getStreamMetadataFromOwner_result getResult(I iface, getStreamMetadataFromOwner_args args) throws org.apache.thrift.TException {
        getStreamMetadataFromOwner_result result = new getStreamMetadataFromOwner_result();
        result.success = iface.getStreamMetadataFromOwner(args.streamId);
        return result;
      }
    }

    public static class getWriteLocations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWriteLocations_args> {
      public getWriteLocations() {
        super("getWriteLocations");
      }

      public getWriteLocations_args getEmptyArgsInstance() {
        return new getWriteLocations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getWriteLocations_result getResult(I iface, getWriteLocations_args args) throws org.apache.thrift.TException {
        getWriteLocations_result result = new getWriteLocations_result();
        result.success = iface.getWriteLocations(args.dataLength, args.metadata, args.blackListedFogs, args.isEdge);
        return result;
      }
    }

    public static class write<I extends Iface> extends org.apache.thrift.ProcessFunction<I, write_args> {
      public write() {
        super("write");
      }

      public write_args getEmptyArgsInstance() {
        return new write_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public write_result getResult(I iface, write_args args) throws org.apache.thrift.TException {
        write_result result = new write_result();
        result.success = iface.write(args.mbMetadata, args.data, args.preference);
        return result;
      }
    }

    public static class writeNext<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeNext_args> {
      public writeNext() {
        super("writeNext");
      }

      public writeNext_args getEmptyArgsInstance() {
        return new writeNext_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeNext_result getResult(I iface, writeNext_args args) throws org.apache.thrift.TException {
        writeNext_result result = new writeNext_result();
        result.success = iface.writeNext(args.sessionId, args.mbData, args.dataLength);
        return result;
      }
    }

    public static class insertMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertMetadata_args> {
      public insertMetadata() {
        super("insertMetadata");
      }

      public insertMetadata_args getEmptyArgsInstance() {
        return new insertMetadata_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public insertMetadata_result getResult(I iface, insertMetadata_args args) throws org.apache.thrift.TException {
        insertMetadata_result result = new insertMetadata_result();
        result.success = iface.insertMetadata(args.mbMetadata, args.edgeInfoData, args.metaKeyValueMap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findNext<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findNext_args> {
      public findNext() {
        super("findNext");
      }

      public findNext_args getEmptyArgsInstance() {
        return new findNext_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findNext_result getResult(I iface, findNext_args args) throws org.apache.thrift.TException {
        findNext_result result = new findNext_result();
        result.success = iface.findNext(args.microbatchId);
        return result;
      }
    }

    public static class find<I extends Iface> extends org.apache.thrift.ProcessFunction<I, find_args> {
      public find() {
        super("find");
      }

      public find_args getEmptyArgsInstance() {
        return new find_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public find_result getResult(I iface, find_args args) throws org.apache.thrift.TException {
        find_result result = new find_result();
        result.success = iface.find(args.microbatchId, args.checkNeighbors, args.checkBuddies, args.selfInfo);
        return result;
      }
    }

    public static class read<I extends Iface> extends org.apache.thrift.ProcessFunction<I, read_args> {
      public read() {
        super("read");
      }

      public read_args getEmptyArgsInstance() {
        return new read_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public read_result getResult(I iface, read_args args) throws org.apache.thrift.TException {
        read_result result = new read_result();
        result.success = iface.read(args.microbatchId, args.fetchMetadata);
        return result;
      }
    }

    public static class findUsingQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUsingQuery_args> {
      public findUsingQuery() {
        super("findUsingQuery");
      }

      public findUsingQuery_args getEmptyArgsInstance() {
        return new findUsingQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findUsingQuery_result getResult(I iface, findUsingQuery_args args) throws org.apache.thrift.TException {
        findUsingQuery_result result = new findUsingQuery_result();
        result.success = iface.findUsingQuery(args.metadataKey, args.metadataValue, args.checkNeighbors, args.checkBuddies);
        return result;
      }
    }

    public static class getMeta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMeta_args> {
      public getMeta() {
        super("getMeta");
      }

      public getMeta_args getEmptyArgsInstance() {
        return new getMeta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getMeta_result getResult(I iface, getMeta_args args) throws org.apache.thrift.TException {
        getMeta_result result = new getMeta_result();
        result.success = iface.getMeta(args.microbatchId, args.checkNeighbors, args.checkBuddies);
        return result;
      }
    }

    public static class serializeState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, serializeState_args> {
      public serializeState() {
        super("serializeState");
      }

      public serializeState_args getEmptyArgsInstance() {
        return new serializeState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public serializeState_result getResult(I iface, serializeState_args args) throws org.apache.thrift.TException {
        serializeState_result result = new serializeState_result();
        result.success = iface.serializeState();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateStreamMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStreamMetadata_args> {
      public updateStreamMetadata() {
        super("updateStreamMetadata");
      }

      public updateStreamMetadata_args getEmptyArgsInstance() {
        return new updateStreamMetadata_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateStreamMetadata_result getResult(I iface, updateStreamMetadata_args args) throws org.apache.thrift.TException {
        updateStreamMetadata_result result = new updateStreamMetadata_result();
        result.success = iface.updateStreamMetadata(args.metadata);
        return result;
      }
    }

    public static class open<I extends Iface> extends org.apache.thrift.ProcessFunction<I, open_args> {
      public open() {
        super("open");
      }

      public open_args getEmptyArgsInstance() {
        return new open_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public open_result getResult(I iface, open_args args) throws org.apache.thrift.TException {
        open_result result = new open_result();
        result.success = iface.open(args.streamId, args.clientId, args.expectedLease, args.setLease);
        return result;
      }
    }

    public static class putNext<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putNext_args> {
      public putNext() {
        super("putNext");
      }

      public putNext_args getEmptyArgsInstance() {
        return new putNext_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public putNext_result getResult(I iface, putNext_args args) throws org.apache.thrift.TException {
        putNext_result result = new putNext_result();
        result.success = iface.putNext(args.mbMetadata, args.data, args.preference, args.metaKeyValueMap);
        return result;
      }
    }

    public static class incrementBlockCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, incrementBlockCount_args> {
      public incrementBlockCount() {
        super("incrementBlockCount");
      }

      public incrementBlockCount_args getEmptyArgsInstance() {
        return new incrementBlockCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public incrementBlockCount_result getResult(I iface, incrementBlockCount_args args) throws org.apache.thrift.TException {
        incrementBlockCount_result result = new incrementBlockCount_result();
        result.success = iface.incrementBlockCount(args.mbMetadata, args.setLease);
        return result;
      }
    }

    public static class renewLease<I extends Iface> extends org.apache.thrift.ProcessFunction<I, renewLease_args> {
      public renewLease() {
        super("renewLease");
      }

      public renewLease_args getEmptyArgsInstance() {
        return new renewLease_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public renewLease_result getResult(I iface, renewLease_args args) throws org.apache.thrift.TException {
        renewLease_result result = new renewLease_result();
        result.success = iface.renewLease(args.streamId, args.clientId, args.sessionSecret, args.expectedLease, args.setLease);
        return result;
      }
    }

    public static class getLargestBlockId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLargestBlockId_args> {
      public getLargestBlockId() {
        super("getLargestBlockId");
      }

      public getLargestBlockId_args getEmptyArgsInstance() {
        return new getLargestBlockId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getLargestBlockId_result getResult(I iface, getLargestBlockId_args args) throws org.apache.thrift.TException {
        getLargestBlockId_result result = new getLargestBlockId_result();
        result.success = iface.getLargestBlockId(args.streamId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStream_args> {
      public findStream() {
        super("findStream");
      }

      public findStream_args getEmptyArgsInstance() {
        return new findStream_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findStream_result getResult(I iface, findStream_args args) throws org.apache.thrift.TException {
        findStream_result result = new findStream_result();
        result.success = iface.findStream(args.squery);
        return result;
      }
    }

    public static class updateBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBlock_args> {
      public updateBlock() {
        super("updateBlock");
      }

      public updateBlock_args getEmptyArgsInstance() {
        return new updateBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateBlock_result getResult(I iface, updateBlock_args args) throws org.apache.thrift.TException {
        updateBlock_result result = new updateBlock_result();
        result.success = iface.updateBlock(args.mbId, args.mbMetadata, args.mbData);
        return result;
      }
    }

    public static class listLocalPartitionMbId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listLocalPartitionMbId_args> {
      public listLocalPartitionMbId() {
        super("listLocalPartitionMbId");
      }

      public listLocalPartitionMbId_args getEmptyArgsInstance() {
        return new listLocalPartitionMbId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public listLocalPartitionMbId_result getResult(I iface, listLocalPartitionMbId_args args) throws org.apache.thrift.TException {
        listLocalPartitionMbId_result result = new listLocalPartitionMbId_result();
        result.success = iface.listLocalPartitionMbId(args.flag);
        return result;
      }
    }

    public static class requestAllNeighbors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestAllNeighbors_args> {
      public requestAllNeighbors() {
        super("requestAllNeighbors");
      }

      public requestAllNeighbors_args getEmptyArgsInstance() {
        return new requestAllNeighbors_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public requestAllNeighbors_result getResult(I iface, requestAllNeighbors_args args) throws org.apache.thrift.TException {
        requestAllNeighbors_result result = new requestAllNeighbors_result();
        result.success = iface.requestAllNeighbors();
        return result;
      }
    }

    public static class requestEdgeMicrobatchMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestEdgeMicrobatchMap_args> {
      public requestEdgeMicrobatchMap() {
        super("requestEdgeMicrobatchMap");
      }

      public requestEdgeMicrobatchMap_args getEmptyArgsInstance() {
        return new requestEdgeMicrobatchMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public requestEdgeMicrobatchMap_result getResult(I iface, requestEdgeMicrobatchMap_args args) throws org.apache.thrift.TException {
        requestEdgeMicrobatchMap_result result = new requestEdgeMicrobatchMap_result();
        result.success = iface.requestEdgeMicrobatchMap();
        return result;
      }
    }

    public static class findBlockUsingQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findBlockUsingQuery_args> {
      public findBlockUsingQuery() {
        super("findBlockUsingQuery");
      }

      public findBlockUsingQuery_args getEmptyArgsInstance() {
        return new findBlockUsingQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public findBlockUsingQuery_result getResult(I iface, findBlockUsingQuery_args args) throws org.apache.thrift.TException {
        findBlockUsingQuery_result result = new findBlockUsingQuery_result();
        result.success = iface.findBlockUsingQuery(args.metaKeyValueMap, args.checkNeighbors, args.checkBuddies);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("joinCluster", new joinCluster());
      processMap.put("joinPool", new joinPool());
      processMap.put("getCandidatePool", new getCandidatePool());
      processMap.put("bootstrapFog", new bootstrapFog());
      processMap.put("initiate2PhasePreCommit", new initiate2PhasePreCommit());
      processMap.put("initiate2PhaseCommit", new initiate2PhaseCommit());
      processMap.put("buddyHeartBeat", new buddyHeartBeat());
      processMap.put("neighborHeartBeat", new neighborHeartBeat());
      processMap.put("getPoolMember", new getPoolMember());
      processMap.put("getBuddyPoolMembers", new getBuddyPoolMembers());
      processMap.put("getNeighborCountPerPool", new getNeighborCountPerPool());
      processMap.put("requestNeighbors", new requestNeighbors());
      processMap.put("nodeJoiningComplete", new nodeJoiningComplete());
      processMap.put("subscribe", new subscribe());
      processMap.put("edgeHeartBeats", new edgeHeartBeats());
      processMap.put("edgeJoin", new edgeJoin());
      processMap.put("edgeLeave", new edgeLeave());
      processMap.put("terminate", new terminate());
      processMap.put("registerStream", new registerStream());
      processMap.put("intentToWrite", new intentToWrite());
      processMap.put("getStreamMetadata", new getStreamMetadata());
      processMap.put("getStreamMetadataFromOwner", new getStreamMetadataFromOwner());
      processMap.put("getWriteLocations", new getWriteLocations());
      processMap.put("write", new write());
      processMap.put("writeNext", new writeNext());
      processMap.put("insertMetadata", new insertMetadata());
      processMap.put("findNext", new findNext());
      processMap.put("find", new find());
      processMap.put("read", new read());
      processMap.put("findUsingQuery", new findUsingQuery());
      processMap.put("getMeta", new getMeta());
      processMap.put("serializeState", new serializeState());
      processMap.put("updateStreamMetadata", new updateStreamMetadata());
      processMap.put("open", new open());
      processMap.put("putNext", new putNext());
      processMap.put("incrementBlockCount", new incrementBlockCount());
      processMap.put("renewLease", new renewLease());
      processMap.put("getLargestBlockId", new getLargestBlockId());
      processMap.put("findStream", new findStream());
      processMap.put("updateBlock", new updateBlock());
      processMap.put("listLocalPartitionMbId", new listLocalPartitionMbId());
      processMap.put("requestAllNeighbors", new requestAllNeighbors());
      processMap.put("requestEdgeMicrobatchMap", new requestEdgeMicrobatchMap());
      processMap.put("findBlockUsingQuery", new findBlockUsingQuery());
      return processMap;
    }

    public static class joinCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, joinCluster_args, java.util.List<NeighborInfoData>> {
      public joinCluster() {
        super("joinCluster");
      }

      public joinCluster_args getEmptyArgsInstance() {
        return new joinCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>>() { 
          public void onComplete(java.util.List<NeighborInfoData> o) {
            joinCluster_result result = new joinCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            joinCluster_result result = new joinCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, joinCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException {
        iface.joinCluster(args.NodeX, args.pmin, args.pmax,resultHandler);
      }
    }

    public static class joinPool<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, joinPool_args, TwoPhaseCommitResponse> {
      public joinPool() {
        super("joinPool");
      }

      public joinPool_args getEmptyArgsInstance() {
        return new joinPool_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse>() { 
          public void onComplete(TwoPhaseCommitResponse o) {
            joinPool_result result = new joinPool_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            joinPool_result result = new joinPool_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, joinPool_args args, org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> resultHandler) throws org.apache.thrift.TException {
        iface.joinPool(args.NodeX,resultHandler);
      }
    }

    public static class getCandidatePool<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCandidatePool_args, java.util.List<NeighborInfoData>> {
      public getCandidatePool() {
        super("getCandidatePool");
      }

      public getCandidatePool_args getEmptyArgsInstance() {
        return new getCandidatePool_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>>() { 
          public void onComplete(java.util.List<NeighborInfoData> o) {
            getCandidatePool_result result = new getCandidatePool_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCandidatePool_result result = new getCandidatePool_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCandidatePool_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException {
        iface.getCandidatePool(args.reliability, args.pmin,resultHandler);
      }
    }

    public static class bootstrapFog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bootstrapFog_args, java.lang.String> {
      public bootstrapFog() {
        super("bootstrapFog");
      }

      public bootstrapFog_args getEmptyArgsInstance() {
        return new bootstrapFog_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            bootstrapFog_result result = new bootstrapFog_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bootstrapFog_result result = new bootstrapFog_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bootstrapFog_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.bootstrapFog(args.NodeX,resultHandler);
      }
    }

    public static class initiate2PhasePreCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initiate2PhasePreCommit_args, TwoPhasePreCommitResponse> {
      public initiate2PhasePreCommit() {
        super("initiate2PhasePreCommit");
      }

      public initiate2PhasePreCommit_args getEmptyArgsInstance() {
        return new initiate2PhasePreCommit_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TwoPhasePreCommitResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TwoPhasePreCommitResponse>() { 
          public void onComplete(TwoPhasePreCommitResponse o) {
            initiate2PhasePreCommit_result result = new initiate2PhasePreCommit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            initiate2PhasePreCommit_result result = new initiate2PhasePreCommit_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initiate2PhasePreCommit_args args, org.apache.thrift.async.AsyncMethodCallback<TwoPhasePreCommitResponse> resultHandler) throws org.apache.thrift.TException {
        iface.initiate2PhasePreCommit(args.preCommitRequest,resultHandler);
      }
    }

    public static class initiate2PhaseCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initiate2PhaseCommit_args, TwoPhaseCommitResponse> {
      public initiate2PhaseCommit() {
        super("initiate2PhaseCommit");
      }

      public initiate2PhaseCommit_args getEmptyArgsInstance() {
        return new initiate2PhaseCommit_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse>() { 
          public void onComplete(TwoPhaseCommitResponse o) {
            initiate2PhaseCommit_result result = new initiate2PhaseCommit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            initiate2PhaseCommit_result result = new initiate2PhaseCommit_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initiate2PhaseCommit_args args, org.apache.thrift.async.AsyncMethodCallback<TwoPhaseCommitResponse> resultHandler) throws org.apache.thrift.TException {
        iface.initiate2PhaseCommit(args.commitRequest,resultHandler);
      }
    }

    public static class buddyHeartBeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, buddyHeartBeat_args, Void> {
      public buddyHeartBeat() {
        super("buddyHeartBeat");
      }

      public buddyHeartBeat_args getEmptyArgsInstance() {
        return new buddyHeartBeat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, buddyHeartBeat_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.buddyHeartBeat(args.payload,resultHandler);
      }
    }

    public static class neighborHeartBeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, neighborHeartBeat_args, Void> {
      public neighborHeartBeat() {
        super("neighborHeartBeat");
      }

      public neighborHeartBeat_args getEmptyArgsInstance() {
        return new neighborHeartBeat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, neighborHeartBeat_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.neighborHeartBeat(args.payload,resultHandler);
      }
    }

    public static class getPoolMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPoolMember_args, NodeInfoData> {
      public getPoolMember() {
        super("getPoolMember");
      }

      public getPoolMember_args getEmptyArgsInstance() {
        return new getPoolMember_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<NodeInfoData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<NodeInfoData>() { 
          public void onComplete(NodeInfoData o) {
            getPoolMember_result result = new getPoolMember_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPoolMember_result result = new getPoolMember_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPoolMember_args args, org.apache.thrift.async.AsyncMethodCallback<NodeInfoData> resultHandler) throws org.apache.thrift.TException {
        iface.getPoolMember(args.buddyPoolId,resultHandler);
      }
    }

    public static class getBuddyPoolMembers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBuddyPoolMembers_args, java.util.List<FogInfoData>> {
      public getBuddyPoolMembers() {
        super("getBuddyPoolMembers");
      }

      public getBuddyPoolMembers_args getEmptyArgsInstance() {
        return new getBuddyPoolMembers_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<FogInfoData>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<FogInfoData>>() { 
          public void onComplete(java.util.List<FogInfoData> o) {
            getBuddyPoolMembers_result result = new getBuddyPoolMembers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getBuddyPoolMembers_result result = new getBuddyPoolMembers_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBuddyPoolMembers_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FogInfoData>> resultHandler) throws org.apache.thrift.TException {
        iface.getBuddyPoolMembers(resultHandler);
      }
    }

    public static class getNeighborCountPerPool<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNeighborCountPerPool_args, NeighborCount> {
      public getNeighborCountPerPool() {
        super("getNeighborCountPerPool");
      }

      public getNeighborCountPerPool_args getEmptyArgsInstance() {
        return new getNeighborCountPerPool_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<NeighborCount> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<NeighborCount>() { 
          public void onComplete(NeighborCount o) {
            getNeighborCountPerPool_result result = new getNeighborCountPerPool_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getNeighborCountPerPool_result result = new getNeighborCountPerPool_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNeighborCountPerPool_args args, org.apache.thrift.async.AsyncMethodCallback<NeighborCount> resultHandler) throws org.apache.thrift.TException {
        iface.getNeighborCountPerPool(resultHandler);
      }
    }

    public static class requestNeighbors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestNeighbors_args, java.util.List<NeighborInfoData>> {
      public requestNeighbors() {
        super("requestNeighbors");
      }

      public requestNeighbors_args getEmptyArgsInstance() {
        return new requestNeighbors_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>>() { 
          public void onComplete(java.util.List<NeighborInfoData> o) {
            requestNeighbors_result result = new requestNeighbors_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestNeighbors_result result = new requestNeighbors_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestNeighbors_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException {
        iface.requestNeighbors(args.requestMap,resultHandler);
      }
    }

    public static class nodeJoiningComplete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, nodeJoiningComplete_args, Void> {
      public nodeJoiningComplete() {
        super("nodeJoiningComplete");
      }

      public nodeJoiningComplete_args getEmptyArgsInstance() {
        return new nodeJoiningComplete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            nodeJoiningComplete_result result = new nodeJoiningComplete_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            nodeJoiningComplete_result result = new nodeJoiningComplete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, nodeJoiningComplete_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.nodeJoiningComplete(resultHandler);
      }
    }

    public static class subscribe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, subscribe_args, java.lang.Boolean> {
      public subscribe() {
        super("subscribe");
      }

      public subscribe_args getEmptyArgsInstance() {
        return new subscribe_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            subscribe_result result = new subscribe_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            subscribe_result result = new subscribe_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, subscribe_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.subscribe(args.nodeInfoData,resultHandler);
      }
    }

    public static class edgeHeartBeats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, edgeHeartBeats_args, java.lang.Boolean> {
      public edgeHeartBeats() {
        super("edgeHeartBeats");
      }

      public edgeHeartBeats_args getEmptyArgsInstance() {
        return new edgeHeartBeats_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            edgeHeartBeats_result result = new edgeHeartBeats_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            edgeHeartBeats_result result = new edgeHeartBeats_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, edgeHeartBeats_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.edgeHeartBeats(args.edgePayload,resultHandler);
      }
    }

    public static class edgeJoin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, edgeJoin_args, java.lang.Byte> {
      public edgeJoin() {
        super("edgeJoin");
      }

      public edgeJoin_args getEmptyArgsInstance() {
        return new edgeJoin_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte>() { 
          public void onComplete(java.lang.Byte o) {
            edgeJoin_result result = new edgeJoin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            edgeJoin_result result = new edgeJoin_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, edgeJoin_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
        iface.edgeJoin(args.edgeInfoData,resultHandler);
      }
    }

    public static class edgeLeave<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, edgeLeave_args, java.lang.Byte> {
      public edgeLeave() {
        super("edgeLeave");
      }

      public edgeLeave_args getEmptyArgsInstance() {
        return new edgeLeave_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte>() { 
          public void onComplete(java.lang.Byte o) {
            edgeLeave_result result = new edgeLeave_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            edgeLeave_result result = new edgeLeave_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, edgeLeave_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
        iface.edgeLeave(args.edgeInfoData,resultHandler);
      }
    }

    public static class terminate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminate_args, java.lang.Byte> {
      public terminate() {
        super("terminate");
      }

      public terminate_args getEmptyArgsInstance() {
        return new terminate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte>() { 
          public void onComplete(java.lang.Byte o) {
            terminate_result result = new terminate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            terminate_result result = new terminate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
        iface.terminate(args.streamId,resultHandler);
      }
    }

    public static class registerStream<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerStream_args, java.lang.Byte> {
      public registerStream() {
        super("registerStream");
      }

      public registerStream_args getEmptyArgsInstance() {
        return new registerStream_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte>() { 
          public void onComplete(java.lang.Byte o) {
            registerStream_result result = new registerStream_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registerStream_result result = new registerStream_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerStream_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
        iface.registerStream(args.streamId, args.streamMetadata, args.startSequenceNumber,resultHandler);
      }
    }

    public static class intentToWrite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, intentToWrite_args, java.lang.String> {
      public intentToWrite() {
        super("intentToWrite");
      }

      public intentToWrite_args getEmptyArgsInstance() {
        return new intentToWrite_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            intentToWrite_result result = new intentToWrite_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            intentToWrite_result result = new intentToWrite_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, intentToWrite_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.intentToWrite(args.clientId,resultHandler);
      }
    }

    public static class getStreamMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStreamMetadata_args, StreamMetadataInfo> {
      public getStreamMetadata() {
        super("getStreamMetadata");
      }

      public getStreamMetadata_args getEmptyArgsInstance() {
        return new getStreamMetadata_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StreamMetadataInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StreamMetadataInfo>() { 
          public void onComplete(StreamMetadataInfo o) {
            getStreamMetadata_result result = new getStreamMetadata_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getStreamMetadata_result result = new getStreamMetadata_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStreamMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<StreamMetadataInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getStreamMetadata(args.streamId, args.checkNeighbors, args.checkBuddies, args.forceLatest,resultHandler);
      }
    }

    public static class getStreamMetadataFromOwner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStreamMetadataFromOwner_args, StreamMetadata> {
      public getStreamMetadataFromOwner() {
        super("getStreamMetadataFromOwner");
      }

      public getStreamMetadataFromOwner_args getEmptyArgsInstance() {
        return new getStreamMetadataFromOwner_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StreamMetadata> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StreamMetadata>() { 
          public void onComplete(StreamMetadata o) {
            getStreamMetadataFromOwner_result result = new getStreamMetadataFromOwner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getStreamMetadataFromOwner_result result = new getStreamMetadataFromOwner_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStreamMetadataFromOwner_args args, org.apache.thrift.async.AsyncMethodCallback<StreamMetadata> resultHandler) throws org.apache.thrift.TException {
        iface.getStreamMetadataFromOwner(args.streamId,resultHandler);
      }
    }

    public static class getWriteLocations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWriteLocations_args, java.util.List<WritableFogData>> {
      public getWriteLocations() {
        super("getWriteLocations");
      }

      public getWriteLocations_args getEmptyArgsInstance() {
        return new getWriteLocations_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<WritableFogData>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<WritableFogData>>() { 
          public void onComplete(java.util.List<WritableFogData> o) {
            getWriteLocations_result result = new getWriteLocations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getWriteLocations_result result = new getWriteLocations_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWriteLocations_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<WritableFogData>> resultHandler) throws org.apache.thrift.TException {
        iface.getWriteLocations(args.dataLength, args.metadata, args.blackListedFogs, args.isEdge,resultHandler);
      }
    }

    public static class write<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, write_args, WriteResponse> {
      public write() {
        super("write");
      }

      public write_args getEmptyArgsInstance() {
        return new write_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WriteResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WriteResponse>() { 
          public void onComplete(WriteResponse o) {
            write_result result = new write_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            write_result result = new write_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, write_args args, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler) throws org.apache.thrift.TException {
        iface.write(args.mbMetadata, args.data, args.preference,resultHandler);
      }
    }

    public static class writeNext<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeNext_args, java.util.List<NodeInfoData>> {
      public writeNext() {
        super("writeNext");
      }

      public writeNext_args getEmptyArgsInstance() {
        return new writeNext_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeInfoData>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeInfoData>>() { 
          public void onComplete(java.util.List<NodeInfoData> o) {
            writeNext_result result = new writeNext_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeNext_result result = new writeNext_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeNext_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeInfoData>> resultHandler) throws org.apache.thrift.TException {
        iface.writeNext(args.sessionId, args.mbData, args.dataLength,resultHandler);
      }
    }

    public static class insertMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertMetadata_args, java.lang.Byte> {
      public insertMetadata() {
        super("insertMetadata");
      }

      public insertMetadata_args getEmptyArgsInstance() {
        return new insertMetadata_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte>() { 
          public void onComplete(java.lang.Byte o) {
            insertMetadata_result result = new insertMetadata_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            insertMetadata_result result = new insertMetadata_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
        iface.insertMetadata(args.mbMetadata, args.edgeInfoData, args.metaKeyValueMap,resultHandler);
      }
    }

    public static class findNext<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findNext_args, java.nio.ByteBuffer> {
      public findNext() {
        super("findNext");
      }

      public findNext_args getEmptyArgsInstance() {
        return new findNext_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          public void onComplete(java.nio.ByteBuffer o) {
            findNext_result result = new findNext_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findNext_result result = new findNext_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findNext_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.findNext(args.microbatchId,resultHandler);
      }
    }

    public static class find<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, find_args, java.util.List<FindReplica>> {
      public find() {
        super("find");
      }

      public find_args getEmptyArgsInstance() {
        return new find_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<FindReplica>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<FindReplica>>() { 
          public void onComplete(java.util.List<FindReplica> o) {
            find_result result = new find_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            find_result result = new find_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, find_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FindReplica>> resultHandler) throws org.apache.thrift.TException {
        iface.find(args.microbatchId, args.checkNeighbors, args.checkBuddies, args.selfInfo,resultHandler);
      }
    }

    public static class read<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, read_args, ReadReplica> {
      public read() {
        super("read");
      }

      public read_args getEmptyArgsInstance() {
        return new read_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ReadReplica> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ReadReplica>() { 
          public void onComplete(ReadReplica o) {
            read_result result = new read_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            read_result result = new read_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, read_args args, org.apache.thrift.async.AsyncMethodCallback<ReadReplica> resultHandler) throws org.apache.thrift.TException {
        iface.read(args.microbatchId, args.fetchMetadata,resultHandler);
      }
    }

    public static class findUsingQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUsingQuery_args, QueryReplica> {
      public findUsingQuery() {
        super("findUsingQuery");
      }

      public findUsingQuery_args getEmptyArgsInstance() {
        return new findUsingQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<QueryReplica> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<QueryReplica>() { 
          public void onComplete(QueryReplica o) {
            findUsingQuery_result result = new findUsingQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findUsingQuery_result result = new findUsingQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUsingQuery_args args, org.apache.thrift.async.AsyncMethodCallback<QueryReplica> resultHandler) throws org.apache.thrift.TException {
        iface.findUsingQuery(args.metadataKey, args.metadataValue, args.checkNeighbors, args.checkBuddies,resultHandler);
      }
    }

    public static class getMeta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMeta_args, ReadReplica> {
      public getMeta() {
        super("getMeta");
      }

      public getMeta_args getEmptyArgsInstance() {
        return new getMeta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ReadReplica> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ReadReplica>() { 
          public void onComplete(ReadReplica o) {
            getMeta_result result = new getMeta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMeta_result result = new getMeta_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMeta_args args, org.apache.thrift.async.AsyncMethodCallback<ReadReplica> resultHandler) throws org.apache.thrift.TException {
        iface.getMeta(args.microbatchId, args.checkNeighbors, args.checkBuddies,resultHandler);
      }
    }

    public static class serializeState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, serializeState_args, java.lang.Byte> {
      public serializeState() {
        super("serializeState");
      }

      public serializeState_args getEmptyArgsInstance() {
        return new serializeState_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte>() { 
          public void onComplete(java.lang.Byte o) {
            serializeState_result result = new serializeState_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            serializeState_result result = new serializeState_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, serializeState_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Byte> resultHandler) throws org.apache.thrift.TException {
        iface.serializeState(resultHandler);
      }
    }

    public static class updateStreamMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStreamMetadata_args, StreamMetadataUpdateResponse> {
      public updateStreamMetadata() {
        super("updateStreamMetadata");
      }

      public updateStreamMetadata_args getEmptyArgsInstance() {
        return new updateStreamMetadata_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StreamMetadataUpdateResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StreamMetadataUpdateResponse>() { 
          public void onComplete(StreamMetadataUpdateResponse o) {
            updateStreamMetadata_result result = new updateStreamMetadata_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateStreamMetadata_result result = new updateStreamMetadata_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStreamMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<StreamMetadataUpdateResponse> resultHandler) throws org.apache.thrift.TException {
        iface.updateStreamMetadata(args.metadata,resultHandler);
      }
    }

    public static class open<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, open_args, OpenStreamResponse> {
      public open() {
        super("open");
      }

      public open_args getEmptyArgsInstance() {
        return new open_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<OpenStreamResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<OpenStreamResponse>() { 
          public void onComplete(OpenStreamResponse o) {
            open_result result = new open_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            open_result result = new open_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, open_args args, org.apache.thrift.async.AsyncMethodCallback<OpenStreamResponse> resultHandler) throws org.apache.thrift.TException {
        iface.open(args.streamId, args.clientId, args.expectedLease, args.setLease,resultHandler);
      }
    }

    public static class putNext<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putNext_args, WriteResponse> {
      public putNext() {
        super("putNext");
      }

      public putNext_args getEmptyArgsInstance() {
        return new putNext_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WriteResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WriteResponse>() { 
          public void onComplete(WriteResponse o) {
            putNext_result result = new putNext_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            putNext_result result = new putNext_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putNext_args args, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler) throws org.apache.thrift.TException {
        iface.putNext(args.mbMetadata, args.data, args.preference, args.metaKeyValueMap,resultHandler);
      }
    }

    public static class incrementBlockCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, incrementBlockCount_args, BlockMetadataUpdateResponse> {
      public incrementBlockCount() {
        super("incrementBlockCount");
      }

      public incrementBlockCount_args getEmptyArgsInstance() {
        return new incrementBlockCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<BlockMetadataUpdateResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<BlockMetadataUpdateResponse>() { 
          public void onComplete(BlockMetadataUpdateResponse o) {
            incrementBlockCount_result result = new incrementBlockCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            incrementBlockCount_result result = new incrementBlockCount_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, incrementBlockCount_args args, org.apache.thrift.async.AsyncMethodCallback<BlockMetadataUpdateResponse> resultHandler) throws org.apache.thrift.TException {
        iface.incrementBlockCount(args.mbMetadata, args.setLease,resultHandler);
      }
    }

    public static class renewLease<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, renewLease_args, StreamLeaseRenewalResponse> {
      public renewLease() {
        super("renewLease");
      }

      public renewLease_args getEmptyArgsInstance() {
        return new renewLease_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StreamLeaseRenewalResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StreamLeaseRenewalResponse>() { 
          public void onComplete(StreamLeaseRenewalResponse o) {
            renewLease_result result = new renewLease_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            renewLease_result result = new renewLease_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, renewLease_args args, org.apache.thrift.async.AsyncMethodCallback<StreamLeaseRenewalResponse> resultHandler) throws org.apache.thrift.TException {
        iface.renewLease(args.streamId, args.clientId, args.sessionSecret, args.expectedLease, args.setLease,resultHandler);
      }
    }

    public static class getLargestBlockId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLargestBlockId_args, java.lang.Long> {
      public getLargestBlockId() {
        super("getLargestBlockId");
      }

      public getLargestBlockId_args getEmptyArgsInstance() {
        return new getLargestBlockId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            getLargestBlockId_result result = new getLargestBlockId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLargestBlockId_result result = new getLargestBlockId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLargestBlockId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.getLargestBlockId(args.streamId,resultHandler);
      }
    }

    public static class findStream<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findStream_args, SQueryResponse> {
      public findStream() {
        super("findStream");
      }

      public findStream_args getEmptyArgsInstance() {
        return new findStream_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SQueryResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SQueryResponse>() { 
          public void onComplete(SQueryResponse o) {
            findStream_result result = new findStream_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findStream_result result = new findStream_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findStream_args args, org.apache.thrift.async.AsyncMethodCallback<SQueryResponse> resultHandler) throws org.apache.thrift.TException {
        iface.findStream(args.squery,resultHandler);
      }
    }

    public static class updateBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBlock_args, WriteResponse> {
      public updateBlock() {
        super("updateBlock");
      }

      public updateBlock_args getEmptyArgsInstance() {
        return new updateBlock_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WriteResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WriteResponse>() { 
          public void onComplete(WriteResponse o) {
            updateBlock_result result = new updateBlock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateBlock_result result = new updateBlock_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBlock_args args, org.apache.thrift.async.AsyncMethodCallback<WriteResponse> resultHandler) throws org.apache.thrift.TException {
        iface.updateBlock(args.mbId, args.mbMetadata, args.mbData,resultHandler);
      }
    }

    public static class listLocalPartitionMbId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listLocalPartitionMbId_args, java.util.Set<java.lang.Long>> {
      public listLocalPartitionMbId() {
        super("listLocalPartitionMbId");
      }

      public listLocalPartitionMbId_args getEmptyArgsInstance() {
        return new listLocalPartitionMbId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Set<java.lang.Long>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Set<java.lang.Long>>() { 
          public void onComplete(java.util.Set<java.lang.Long> o) {
            listLocalPartitionMbId_result result = new listLocalPartitionMbId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listLocalPartitionMbId_result result = new listLocalPartitionMbId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listLocalPartitionMbId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<java.lang.Long>> resultHandler) throws org.apache.thrift.TException {
        iface.listLocalPartitionMbId(args.flag,resultHandler);
      }
    }

    public static class requestAllNeighbors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestAllNeighbors_args, java.util.List<NeighborInfoData>> {
      public requestAllNeighbors() {
        super("requestAllNeighbors");
      }

      public requestAllNeighbors_args getEmptyArgsInstance() {
        return new requestAllNeighbors_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>>() { 
          public void onComplete(java.util.List<NeighborInfoData> o) {
            requestAllNeighbors_result result = new requestAllNeighbors_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestAllNeighbors_result result = new requestAllNeighbors_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestAllNeighbors_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeighborInfoData>> resultHandler) throws org.apache.thrift.TException {
        iface.requestAllNeighbors(resultHandler);
      }
    }

    public static class requestEdgeMicrobatchMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestEdgeMicrobatchMap_args, java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>>> {
      public requestEdgeMicrobatchMap() {
        super("requestEdgeMicrobatchMap");
      }

      public requestEdgeMicrobatchMap_args getEmptyArgsInstance() {
        return new requestEdgeMicrobatchMap_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>>>() { 
          public void onComplete(java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> o) {
            requestEdgeMicrobatchMap_result result = new requestEdgeMicrobatchMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestEdgeMicrobatchMap_result result = new requestEdgeMicrobatchMap_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestEdgeMicrobatchMap_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>>> resultHandler) throws org.apache.thrift.TException {
        iface.requestEdgeMicrobatchMap(resultHandler);
      }
    }

    public static class findBlockUsingQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findBlockUsingQuery_args, java.util.Map<java.lang.Long,java.lang.String>> {
      public findBlockUsingQuery() {
        super("findBlockUsingQuery");
      }

      public findBlockUsingQuery_args getEmptyArgsInstance() {
        return new findBlockUsingQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.Long,java.lang.String> o) {
            findBlockUsingQuery_result result = new findBlockUsingQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findBlockUsingQuery_result result = new findBlockUsingQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findBlockUsingQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.findBlockUsingQuery(args.metaKeyValueMap, args.checkNeighbors, args.checkBuddies,resultHandler);
      }
    }

  }

  public static class joinCluster_args implements org.apache.thrift.TBase<joinCluster_args, joinCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<joinCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinCluster_args");

    private static final org.apache.thrift.protocol.TField NODE_X_FIELD_DESC = new org.apache.thrift.protocol.TField("NodeX", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("pmin", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField PMAX_FIELD_DESC = new org.apache.thrift.protocol.TField("pmax", org.apache.thrift.protocol.TType.I16, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinCluster_argsTupleSchemeFactory();

    public FogInfoData NodeX; // required
    public short pmin; // required
    public short pmax; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_X((short)1, "NodeX"),
      PMIN((short)2, "pmin"),
      PMAX((short)3, "pmax");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_X
            return NODE_X;
          case 2: // PMIN
            return PMIN;
          case 3: // PMAX
            return PMAX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PMIN_ISSET_ID = 0;
    private static final int __PMAX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_X, new org.apache.thrift.meta_data.FieldMetaData("NodeX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FogInfoData.class)));
      tmpMap.put(_Fields.PMIN, new org.apache.thrift.meta_data.FieldMetaData("pmin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.PMAX, new org.apache.thrift.meta_data.FieldMetaData("pmax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinCluster_args.class, metaDataMap);
    }

    public joinCluster_args() {
    }

    public joinCluster_args(
      FogInfoData NodeX,
      short pmin,
      short pmax)
    {
      this();
      this.NodeX = NodeX;
      this.pmin = pmin;
      setPminIsSet(true);
      this.pmax = pmax;
      setPmaxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinCluster_args(joinCluster_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNodeX()) {
        this.NodeX = new FogInfoData(other.NodeX);
      }
      this.pmin = other.pmin;
      this.pmax = other.pmax;
    }

    public joinCluster_args deepCopy() {
      return new joinCluster_args(this);
    }

    @Override
    public void clear() {
      this.NodeX = null;
      setPminIsSet(false);
      this.pmin = 0;
      setPmaxIsSet(false);
      this.pmax = 0;
    }

    public FogInfoData getNodeX() {
      return this.NodeX;
    }

    public joinCluster_args setNodeX(FogInfoData NodeX) {
      this.NodeX = NodeX;
      return this;
    }

    public void unsetNodeX() {
      this.NodeX = null;
    }

    /** Returns true if field NodeX is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeX() {
      return this.NodeX != null;
    }

    public void setNodeXIsSet(boolean value) {
      if (!value) {
        this.NodeX = null;
      }
    }

    public short getPmin() {
      return this.pmin;
    }

    public joinCluster_args setPmin(short pmin) {
      this.pmin = pmin;
      setPminIsSet(true);
      return this;
    }

    public void unsetPmin() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PMIN_ISSET_ID);
    }

    /** Returns true if field pmin is set (has been assigned a value) and false otherwise */
    public boolean isSetPmin() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PMIN_ISSET_ID);
    }

    public void setPminIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PMIN_ISSET_ID, value);
    }

    public short getPmax() {
      return this.pmax;
    }

    public joinCluster_args setPmax(short pmax) {
      this.pmax = pmax;
      setPmaxIsSet(true);
      return this;
    }

    public void unsetPmax() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PMAX_ISSET_ID);
    }

    /** Returns true if field pmax is set (has been assigned a value) and false otherwise */
    public boolean isSetPmax() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PMAX_ISSET_ID);
    }

    public void setPmaxIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PMAX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NODE_X:
        if (value == null) {
          unsetNodeX();
        } else {
          setNodeX((FogInfoData)value);
        }
        break;

      case PMIN:
        if (value == null) {
          unsetPmin();
        } else {
          setPmin((java.lang.Short)value);
        }
        break;

      case PMAX:
        if (value == null) {
          unsetPmax();
        } else {
          setPmax((java.lang.Short)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_X:
        return getNodeX();

      case PMIN:
        return getPmin();

      case PMAX:
        return getPmax();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NODE_X:
        return isSetNodeX();
      case PMIN:
        return isSetPmin();
      case PMAX:
        return isSetPmax();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof joinCluster_args)
        return this.equals((joinCluster_args)that);
      return false;
    }

    public boolean equals(joinCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_NodeX = true && this.isSetNodeX();
      boolean that_present_NodeX = true && that.isSetNodeX();
      if (this_present_NodeX || that_present_NodeX) {
        if (!(this_present_NodeX && that_present_NodeX))
          return false;
        if (!this.NodeX.equals(that.NodeX))
          return false;
      }

      boolean this_present_pmin = true;
      boolean that_present_pmin = true;
      if (this_present_pmin || that_present_pmin) {
        if (!(this_present_pmin && that_present_pmin))
          return false;
        if (this.pmin != that.pmin)
          return false;
      }

      boolean this_present_pmax = true;
      boolean that_present_pmax = true;
      if (this_present_pmax || that_present_pmax) {
        if (!(this_present_pmax && that_present_pmax))
          return false;
        if (this.pmax != that.pmax)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNodeX()) ? 131071 : 524287);
      if (isSetNodeX())
        hashCode = hashCode * 8191 + NodeX.hashCode();

      hashCode = hashCode * 8191 + pmin;

      hashCode = hashCode * 8191 + pmax;

      return hashCode;
    }

    @Override
    public int compareTo(joinCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNodeX()).compareTo(other.isSetNodeX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NodeX, other.NodeX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPmin()).compareTo(other.isSetPmin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPmin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmin, other.pmin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPmax()).compareTo(other.isSetPmax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPmax()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmax, other.pmax);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("joinCluster_args(");
      boolean first = true;

      sb.append("NodeX:");
      if (this.NodeX == null) {
        sb.append("null");
      } else {
        sb.append(this.NodeX);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pmin:");
      sb.append(this.pmin);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pmax:");
      sb.append(this.pmax);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (NodeX != null) {
        NodeX.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinCluster_argsStandardScheme getScheme() {
        return new joinCluster_argsStandardScheme();
      }
    }

    private static class joinCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<joinCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.NodeX = new FogInfoData();
                struct.NodeX.read(iprot);
                struct.setNodeXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PMIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.pmin = iprot.readI16();
                struct.setPminIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PMAX
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.pmax = iprot.readI16();
                struct.setPmaxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.NodeX != null) {
          oprot.writeFieldBegin(NODE_X_FIELD_DESC);
          struct.NodeX.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PMIN_FIELD_DESC);
        oprot.writeI16(struct.pmin);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PMAX_FIELD_DESC);
        oprot.writeI16(struct.pmax);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinCluster_argsTupleScheme getScheme() {
        return new joinCluster_argsTupleScheme();
      }
    }

    private static class joinCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<joinCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNodeX()) {
          optionals.set(0);
        }
        if (struct.isSetPmin()) {
          optionals.set(1);
        }
        if (struct.isSetPmax()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNodeX()) {
          struct.NodeX.write(oprot);
        }
        if (struct.isSetPmin()) {
          oprot.writeI16(struct.pmin);
        }
        if (struct.isSetPmax()) {
          oprot.writeI16(struct.pmax);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.NodeX = new FogInfoData();
          struct.NodeX.read(iprot);
          struct.setNodeXIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pmin = iprot.readI16();
          struct.setPminIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pmax = iprot.readI16();
          struct.setPmaxIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class joinCluster_result implements org.apache.thrift.TBase<joinCluster_result, joinCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<joinCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinCluster_resultTupleSchemeFactory();

    public java.util.List<NeighborInfoData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeighborInfoData.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinCluster_result.class, metaDataMap);
    }

    public joinCluster_result() {
    }

    public joinCluster_result(
      java.util.List<NeighborInfoData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinCluster_result(joinCluster_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NeighborInfoData> __this__success = new java.util.ArrayList<NeighborInfoData>(other.success.size());
        for (NeighborInfoData other_element : other.success) {
          __this__success.add(new NeighborInfoData(other_element));
        }
        this.success = __this__success;
      }
    }

    public joinCluster_result deepCopy() {
      return new joinCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NeighborInfoData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NeighborInfoData elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NeighborInfoData>();
      }
      this.success.add(elem);
    }

    public java.util.List<NeighborInfoData> getSuccess() {
      return this.success;
    }

    public joinCluster_result setSuccess(java.util.List<NeighborInfoData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NeighborInfoData>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof joinCluster_result)
        return this.equals((joinCluster_result)that);
      return false;
    }

    public boolean equals(joinCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(joinCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("joinCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinCluster_resultStandardScheme getScheme() {
        return new joinCluster_resultStandardScheme();
      }
    }

    private static class joinCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<joinCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NeighborInfoData>(_list92.size);
                  NeighborInfoData _elem93;
                  for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                  {
                    _elem93 = new NeighborInfoData();
                    _elem93.read(iprot);
                    struct.success.add(_elem93);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NeighborInfoData _iter95 : struct.success)
            {
              _iter95.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinCluster_resultTupleScheme getScheme() {
        return new joinCluster_resultTupleScheme();
      }
    }

    private static class joinCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<joinCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NeighborInfoData _iter96 : struct.success)
            {
              _iter96.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<NeighborInfoData>(_list97.size);
            NeighborInfoData _elem98;
            for (int _i99 = 0; _i99 < _list97.size; ++_i99)
            {
              _elem98 = new NeighborInfoData();
              _elem98.read(iprot);
              struct.success.add(_elem98);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class joinPool_args implements org.apache.thrift.TBase<joinPool_args, joinPool_args._Fields>, java.io.Serializable, Cloneable, Comparable<joinPool_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinPool_args");

    private static final org.apache.thrift.protocol.TField NODE_X_FIELD_DESC = new org.apache.thrift.protocol.TField("NodeX", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinPool_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinPool_argsTupleSchemeFactory();

    public FogInfoData NodeX; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_X((short)1, "NodeX");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_X
            return NODE_X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_X, new org.apache.thrift.meta_data.FieldMetaData("NodeX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FogInfoData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinPool_args.class, metaDataMap);
    }

    public joinPool_args() {
    }

    public joinPool_args(
      FogInfoData NodeX)
    {
      this();
      this.NodeX = NodeX;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinPool_args(joinPool_args other) {
      if (other.isSetNodeX()) {
        this.NodeX = new FogInfoData(other.NodeX);
      }
    }

    public joinPool_args deepCopy() {
      return new joinPool_args(this);
    }

    @Override
    public void clear() {
      this.NodeX = null;
    }

    public FogInfoData getNodeX() {
      return this.NodeX;
    }

    public joinPool_args setNodeX(FogInfoData NodeX) {
      this.NodeX = NodeX;
      return this;
    }

    public void unsetNodeX() {
      this.NodeX = null;
    }

    /** Returns true if field NodeX is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeX() {
      return this.NodeX != null;
    }

    public void setNodeXIsSet(boolean value) {
      if (!value) {
        this.NodeX = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NODE_X:
        if (value == null) {
          unsetNodeX();
        } else {
          setNodeX((FogInfoData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_X:
        return getNodeX();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NODE_X:
        return isSetNodeX();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof joinPool_args)
        return this.equals((joinPool_args)that);
      return false;
    }

    public boolean equals(joinPool_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_NodeX = true && this.isSetNodeX();
      boolean that_present_NodeX = true && that.isSetNodeX();
      if (this_present_NodeX || that_present_NodeX) {
        if (!(this_present_NodeX && that_present_NodeX))
          return false;
        if (!this.NodeX.equals(that.NodeX))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNodeX()) ? 131071 : 524287);
      if (isSetNodeX())
        hashCode = hashCode * 8191 + NodeX.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(joinPool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNodeX()).compareTo(other.isSetNodeX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NodeX, other.NodeX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("joinPool_args(");
      boolean first = true;

      sb.append("NodeX:");
      if (this.NodeX == null) {
        sb.append("null");
      } else {
        sb.append(this.NodeX);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (NodeX != null) {
        NodeX.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinPool_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinPool_argsStandardScheme getScheme() {
        return new joinPool_argsStandardScheme();
      }
    }

    private static class joinPool_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<joinPool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinPool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.NodeX = new FogInfoData();
                struct.NodeX.read(iprot);
                struct.setNodeXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinPool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.NodeX != null) {
          oprot.writeFieldBegin(NODE_X_FIELD_DESC);
          struct.NodeX.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinPool_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinPool_argsTupleScheme getScheme() {
        return new joinPool_argsTupleScheme();
      }
    }

    private static class joinPool_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<joinPool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinPool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNodeX()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNodeX()) {
          struct.NodeX.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinPool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.NodeX = new FogInfoData();
          struct.NodeX.read(iprot);
          struct.setNodeXIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class joinPool_result implements org.apache.thrift.TBase<joinPool_result, joinPool_result._Fields>, java.io.Serializable, Cloneable, Comparable<joinPool_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinPool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinPool_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinPool_resultTupleSchemeFactory();

    public TwoPhaseCommitResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwoPhaseCommitResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinPool_result.class, metaDataMap);
    }

    public joinPool_result() {
    }

    public joinPool_result(
      TwoPhaseCommitResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinPool_result(joinPool_result other) {
      if (other.isSetSuccess()) {
        this.success = new TwoPhaseCommitResponse(other.success);
      }
    }

    public joinPool_result deepCopy() {
      return new joinPool_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TwoPhaseCommitResponse getSuccess() {
      return this.success;
    }

    public joinPool_result setSuccess(TwoPhaseCommitResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TwoPhaseCommitResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof joinPool_result)
        return this.equals((joinPool_result)that);
      return false;
    }

    public boolean equals(joinPool_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(joinPool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("joinPool_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinPool_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinPool_resultStandardScheme getScheme() {
        return new joinPool_resultStandardScheme();
      }
    }

    private static class joinPool_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<joinPool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinPool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TwoPhaseCommitResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinPool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinPool_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinPool_resultTupleScheme getScheme() {
        return new joinPool_resultTupleScheme();
      }
    }

    private static class joinPool_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<joinPool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinPool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinPool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TwoPhaseCommitResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidatePool_args implements org.apache.thrift.TBase<getCandidatePool_args, getCandidatePool_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidatePool_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidatePool_args");

    private static final org.apache.thrift.protocol.TField RELIABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("reliability", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField PMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("pmin", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidatePool_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidatePool_argsTupleSchemeFactory();

    public double reliability; // required
    public short pmin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RELIABILITY((short)1, "reliability"),
      PMIN((short)2, "pmin");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RELIABILITY
            return RELIABILITY;
          case 2: // PMIN
            return PMIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RELIABILITY_ISSET_ID = 0;
    private static final int __PMIN_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RELIABILITY, new org.apache.thrift.meta_data.FieldMetaData("reliability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PMIN, new org.apache.thrift.meta_data.FieldMetaData("pmin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidatePool_args.class, metaDataMap);
    }

    public getCandidatePool_args() {
    }

    public getCandidatePool_args(
      double reliability,
      short pmin)
    {
      this();
      this.reliability = reliability;
      setReliabilityIsSet(true);
      this.pmin = pmin;
      setPminIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidatePool_args(getCandidatePool_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reliability = other.reliability;
      this.pmin = other.pmin;
    }

    public getCandidatePool_args deepCopy() {
      return new getCandidatePool_args(this);
    }

    @Override
    public void clear() {
      setReliabilityIsSet(false);
      this.reliability = 0.0;
      setPminIsSet(false);
      this.pmin = 0;
    }

    public double getReliability() {
      return this.reliability;
    }

    public getCandidatePool_args setReliability(double reliability) {
      this.reliability = reliability;
      setReliabilityIsSet(true);
      return this;
    }

    public void unsetReliability() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELIABILITY_ISSET_ID);
    }

    /** Returns true if field reliability is set (has been assigned a value) and false otherwise */
    public boolean isSetReliability() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELIABILITY_ISSET_ID);
    }

    public void setReliabilityIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELIABILITY_ISSET_ID, value);
    }

    public short getPmin() {
      return this.pmin;
    }

    public getCandidatePool_args setPmin(short pmin) {
      this.pmin = pmin;
      setPminIsSet(true);
      return this;
    }

    public void unsetPmin() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PMIN_ISSET_ID);
    }

    /** Returns true if field pmin is set (has been assigned a value) and false otherwise */
    public boolean isSetPmin() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PMIN_ISSET_ID);
    }

    public void setPminIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PMIN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RELIABILITY:
        if (value == null) {
          unsetReliability();
        } else {
          setReliability((java.lang.Double)value);
        }
        break;

      case PMIN:
        if (value == null) {
          unsetPmin();
        } else {
          setPmin((java.lang.Short)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RELIABILITY:
        return getReliability();

      case PMIN:
        return getPmin();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RELIABILITY:
        return isSetReliability();
      case PMIN:
        return isSetPmin();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidatePool_args)
        return this.equals((getCandidatePool_args)that);
      return false;
    }

    public boolean equals(getCandidatePool_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reliability = true;
      boolean that_present_reliability = true;
      if (this_present_reliability || that_present_reliability) {
        if (!(this_present_reliability && that_present_reliability))
          return false;
        if (this.reliability != that.reliability)
          return false;
      }

      boolean this_present_pmin = true;
      boolean that_present_pmin = true;
      if (this_present_pmin || that_present_pmin) {
        if (!(this_present_pmin && that_present_pmin))
          return false;
        if (this.pmin != that.pmin)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reliability);

      hashCode = hashCode * 8191 + pmin;

      return hashCode;
    }

    @Override
    public int compareTo(getCandidatePool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetReliability()).compareTo(other.isSetReliability());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReliability()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reliability, other.reliability);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPmin()).compareTo(other.isSetPmin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPmin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmin, other.pmin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidatePool_args(");
      boolean first = true;

      sb.append("reliability:");
      sb.append(this.reliability);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pmin:");
      sb.append(this.pmin);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidatePool_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePool_argsStandardScheme getScheme() {
        return new getCandidatePool_argsStandardScheme();
      }
    }

    private static class getCandidatePool_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidatePool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidatePool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RELIABILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.reliability = iprot.readDouble();
                struct.setReliabilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PMIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.pmin = iprot.readI16();
                struct.setPminIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidatePool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RELIABILITY_FIELD_DESC);
        oprot.writeDouble(struct.reliability);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PMIN_FIELD_DESC);
        oprot.writeI16(struct.pmin);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidatePool_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePool_argsTupleScheme getScheme() {
        return new getCandidatePool_argsTupleScheme();
      }
    }

    private static class getCandidatePool_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidatePool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidatePool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetReliability()) {
          optionals.set(0);
        }
        if (struct.isSetPmin()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReliability()) {
          oprot.writeDouble(struct.reliability);
        }
        if (struct.isSetPmin()) {
          oprot.writeI16(struct.pmin);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidatePool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reliability = iprot.readDouble();
          struct.setReliabilityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pmin = iprot.readI16();
          struct.setPminIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidatePool_result implements org.apache.thrift.TBase<getCandidatePool_result, getCandidatePool_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidatePool_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidatePool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidatePool_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidatePool_resultTupleSchemeFactory();

    public java.util.List<NeighborInfoData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeighborInfoData.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidatePool_result.class, metaDataMap);
    }

    public getCandidatePool_result() {
    }

    public getCandidatePool_result(
      java.util.List<NeighborInfoData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidatePool_result(getCandidatePool_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NeighborInfoData> __this__success = new java.util.ArrayList<NeighborInfoData>(other.success.size());
        for (NeighborInfoData other_element : other.success) {
          __this__success.add(new NeighborInfoData(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCandidatePool_result deepCopy() {
      return new getCandidatePool_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NeighborInfoData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NeighborInfoData elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NeighborInfoData>();
      }
      this.success.add(elem);
    }

    public java.util.List<NeighborInfoData> getSuccess() {
      return this.success;
    }

    public getCandidatePool_result setSuccess(java.util.List<NeighborInfoData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NeighborInfoData>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidatePool_result)
        return this.equals((getCandidatePool_result)that);
      return false;
    }

    public boolean equals(getCandidatePool_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidatePool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidatePool_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidatePool_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePool_resultStandardScheme getScheme() {
        return new getCandidatePool_resultStandardScheme();
      }
    }

    private static class getCandidatePool_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidatePool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidatePool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NeighborInfoData>(_list100.size);
                  NeighborInfoData _elem101;
                  for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                  {
                    _elem101 = new NeighborInfoData();
                    _elem101.read(iprot);
                    struct.success.add(_elem101);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidatePool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NeighborInfoData _iter103 : struct.success)
            {
              _iter103.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidatePool_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePool_resultTupleScheme getScheme() {
        return new getCandidatePool_resultTupleScheme();
      }
    }

    private static class getCandidatePool_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidatePool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidatePool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NeighborInfoData _iter104 : struct.success)
            {
              _iter104.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidatePool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<NeighborInfoData>(_list105.size);
            NeighborInfoData _elem106;
            for (int _i107 = 0; _i107 < _list105.size; ++_i107)
            {
              _elem106 = new NeighborInfoData();
              _elem106.read(iprot);
              struct.success.add(_elem106);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bootstrapFog_args implements org.apache.thrift.TBase<bootstrapFog_args, bootstrapFog_args._Fields>, java.io.Serializable, Cloneable, Comparable<bootstrapFog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bootstrapFog_args");

    private static final org.apache.thrift.protocol.TField NODE_X_FIELD_DESC = new org.apache.thrift.protocol.TField("NodeX", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bootstrapFog_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bootstrapFog_argsTupleSchemeFactory();

    public FogInfoData NodeX; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_X((short)1, "NodeX");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_X
            return NODE_X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_X, new org.apache.thrift.meta_data.FieldMetaData("NodeX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FogInfoData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bootstrapFog_args.class, metaDataMap);
    }

    public bootstrapFog_args() {
    }

    public bootstrapFog_args(
      FogInfoData NodeX)
    {
      this();
      this.NodeX = NodeX;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bootstrapFog_args(bootstrapFog_args other) {
      if (other.isSetNodeX()) {
        this.NodeX = new FogInfoData(other.NodeX);
      }
    }

    public bootstrapFog_args deepCopy() {
      return new bootstrapFog_args(this);
    }

    @Override
    public void clear() {
      this.NodeX = null;
    }

    public FogInfoData getNodeX() {
      return this.NodeX;
    }

    public bootstrapFog_args setNodeX(FogInfoData NodeX) {
      this.NodeX = NodeX;
      return this;
    }

    public void unsetNodeX() {
      this.NodeX = null;
    }

    /** Returns true if field NodeX is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeX() {
      return this.NodeX != null;
    }

    public void setNodeXIsSet(boolean value) {
      if (!value) {
        this.NodeX = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NODE_X:
        if (value == null) {
          unsetNodeX();
        } else {
          setNodeX((FogInfoData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_X:
        return getNodeX();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NODE_X:
        return isSetNodeX();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bootstrapFog_args)
        return this.equals((bootstrapFog_args)that);
      return false;
    }

    public boolean equals(bootstrapFog_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_NodeX = true && this.isSetNodeX();
      boolean that_present_NodeX = true && that.isSetNodeX();
      if (this_present_NodeX || that_present_NodeX) {
        if (!(this_present_NodeX && that_present_NodeX))
          return false;
        if (!this.NodeX.equals(that.NodeX))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNodeX()) ? 131071 : 524287);
      if (isSetNodeX())
        hashCode = hashCode * 8191 + NodeX.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bootstrapFog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNodeX()).compareTo(other.isSetNodeX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NodeX, other.NodeX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bootstrapFog_args(");
      boolean first = true;

      sb.append("NodeX:");
      if (this.NodeX == null) {
        sb.append("null");
      } else {
        sb.append(this.NodeX);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (NodeX != null) {
        NodeX.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bootstrapFog_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootstrapFog_argsStandardScheme getScheme() {
        return new bootstrapFog_argsStandardScheme();
      }
    }

    private static class bootstrapFog_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bootstrapFog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bootstrapFog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.NodeX = new FogInfoData();
                struct.NodeX.read(iprot);
                struct.setNodeXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bootstrapFog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.NodeX != null) {
          oprot.writeFieldBegin(NODE_X_FIELD_DESC);
          struct.NodeX.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bootstrapFog_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootstrapFog_argsTupleScheme getScheme() {
        return new bootstrapFog_argsTupleScheme();
      }
    }

    private static class bootstrapFog_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bootstrapFog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bootstrapFog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNodeX()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNodeX()) {
          struct.NodeX.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bootstrapFog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.NodeX = new FogInfoData();
          struct.NodeX.read(iprot);
          struct.setNodeXIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bootstrapFog_result implements org.apache.thrift.TBase<bootstrapFog_result, bootstrapFog_result._Fields>, java.io.Serializable, Cloneable, Comparable<bootstrapFog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bootstrapFog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bootstrapFog_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bootstrapFog_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bootstrapFog_result.class, metaDataMap);
    }

    public bootstrapFog_result() {
    }

    public bootstrapFog_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bootstrapFog_result(bootstrapFog_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public bootstrapFog_result deepCopy() {
      return new bootstrapFog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public bootstrapFog_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bootstrapFog_result)
        return this.equals((bootstrapFog_result)that);
      return false;
    }

    public boolean equals(bootstrapFog_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bootstrapFog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bootstrapFog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bootstrapFog_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootstrapFog_resultStandardScheme getScheme() {
        return new bootstrapFog_resultStandardScheme();
      }
    }

    private static class bootstrapFog_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bootstrapFog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bootstrapFog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bootstrapFog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bootstrapFog_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootstrapFog_resultTupleScheme getScheme() {
        return new bootstrapFog_resultTupleScheme();
      }
    }

    private static class bootstrapFog_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bootstrapFog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bootstrapFog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bootstrapFog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initiate2PhasePreCommit_args implements org.apache.thrift.TBase<initiate2PhasePreCommit_args, initiate2PhasePreCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<initiate2PhasePreCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initiate2PhasePreCommit_args");

    private static final org.apache.thrift.protocol.TField PRE_COMMIT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("preCommitRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initiate2PhasePreCommit_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initiate2PhasePreCommit_argsTupleSchemeFactory();

    public TwoPhasePreCommitRequest preCommitRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRE_COMMIT_REQUEST((short)1, "preCommitRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRE_COMMIT_REQUEST
            return PRE_COMMIT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRE_COMMIT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("preCommitRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwoPhasePreCommitRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initiate2PhasePreCommit_args.class, metaDataMap);
    }

    public initiate2PhasePreCommit_args() {
    }

    public initiate2PhasePreCommit_args(
      TwoPhasePreCommitRequest preCommitRequest)
    {
      this();
      this.preCommitRequest = preCommitRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initiate2PhasePreCommit_args(initiate2PhasePreCommit_args other) {
      if (other.isSetPreCommitRequest()) {
        this.preCommitRequest = new TwoPhasePreCommitRequest(other.preCommitRequest);
      }
    }

    public initiate2PhasePreCommit_args deepCopy() {
      return new initiate2PhasePreCommit_args(this);
    }

    @Override
    public void clear() {
      this.preCommitRequest = null;
    }

    public TwoPhasePreCommitRequest getPreCommitRequest() {
      return this.preCommitRequest;
    }

    public initiate2PhasePreCommit_args setPreCommitRequest(TwoPhasePreCommitRequest preCommitRequest) {
      this.preCommitRequest = preCommitRequest;
      return this;
    }

    public void unsetPreCommitRequest() {
      this.preCommitRequest = null;
    }

    /** Returns true if field preCommitRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetPreCommitRequest() {
      return this.preCommitRequest != null;
    }

    public void setPreCommitRequestIsSet(boolean value) {
      if (!value) {
        this.preCommitRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PRE_COMMIT_REQUEST:
        if (value == null) {
          unsetPreCommitRequest();
        } else {
          setPreCommitRequest((TwoPhasePreCommitRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PRE_COMMIT_REQUEST:
        return getPreCommitRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PRE_COMMIT_REQUEST:
        return isSetPreCommitRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof initiate2PhasePreCommit_args)
        return this.equals((initiate2PhasePreCommit_args)that);
      return false;
    }

    public boolean equals(initiate2PhasePreCommit_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_preCommitRequest = true && this.isSetPreCommitRequest();
      boolean that_present_preCommitRequest = true && that.isSetPreCommitRequest();
      if (this_present_preCommitRequest || that_present_preCommitRequest) {
        if (!(this_present_preCommitRequest && that_present_preCommitRequest))
          return false;
        if (!this.preCommitRequest.equals(that.preCommitRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPreCommitRequest()) ? 131071 : 524287);
      if (isSetPreCommitRequest())
        hashCode = hashCode * 8191 + preCommitRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initiate2PhasePreCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPreCommitRequest()).compareTo(other.isSetPreCommitRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreCommitRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preCommitRequest, other.preCommitRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("initiate2PhasePreCommit_args(");
      boolean first = true;

      sb.append("preCommitRequest:");
      if (this.preCommitRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.preCommitRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (preCommitRequest != null) {
        preCommitRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initiate2PhasePreCommit_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initiate2PhasePreCommit_argsStandardScheme getScheme() {
        return new initiate2PhasePreCommit_argsStandardScheme();
      }
    }

    private static class initiate2PhasePreCommit_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initiate2PhasePreCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initiate2PhasePreCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRE_COMMIT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.preCommitRequest = new TwoPhasePreCommitRequest();
                struct.preCommitRequest.read(iprot);
                struct.setPreCommitRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initiate2PhasePreCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.preCommitRequest != null) {
          oprot.writeFieldBegin(PRE_COMMIT_REQUEST_FIELD_DESC);
          struct.preCommitRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initiate2PhasePreCommit_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initiate2PhasePreCommit_argsTupleScheme getScheme() {
        return new initiate2PhasePreCommit_argsTupleScheme();
      }
    }

    private static class initiate2PhasePreCommit_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initiate2PhasePreCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initiate2PhasePreCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPreCommitRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPreCommitRequest()) {
          struct.preCommitRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initiate2PhasePreCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.preCommitRequest = new TwoPhasePreCommitRequest();
          struct.preCommitRequest.read(iprot);
          struct.setPreCommitRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initiate2PhasePreCommit_result implements org.apache.thrift.TBase<initiate2PhasePreCommit_result, initiate2PhasePreCommit_result._Fields>, java.io.Serializable, Cloneable, Comparable<initiate2PhasePreCommit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initiate2PhasePreCommit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initiate2PhasePreCommit_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initiate2PhasePreCommit_resultTupleSchemeFactory();

    public TwoPhasePreCommitResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwoPhasePreCommitResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initiate2PhasePreCommit_result.class, metaDataMap);
    }

    public initiate2PhasePreCommit_result() {
    }

    public initiate2PhasePreCommit_result(
      TwoPhasePreCommitResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initiate2PhasePreCommit_result(initiate2PhasePreCommit_result other) {
      if (other.isSetSuccess()) {
        this.success = new TwoPhasePreCommitResponse(other.success);
      }
    }

    public initiate2PhasePreCommit_result deepCopy() {
      return new initiate2PhasePreCommit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TwoPhasePreCommitResponse getSuccess() {
      return this.success;
    }

    public initiate2PhasePreCommit_result setSuccess(TwoPhasePreCommitResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TwoPhasePreCommitResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof initiate2PhasePreCommit_result)
        return this.equals((initiate2PhasePreCommit_result)that);
      return false;
    }

    public boolean equals(initiate2PhasePreCommit_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initiate2PhasePreCommit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("initiate2PhasePreCommit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initiate2PhasePreCommit_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initiate2PhasePreCommit_resultStandardScheme getScheme() {
        return new initiate2PhasePreCommit_resultStandardScheme();
      }
    }

    private static class initiate2PhasePreCommit_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initiate2PhasePreCommit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initiate2PhasePreCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TwoPhasePreCommitResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initiate2PhasePreCommit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initiate2PhasePreCommit_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initiate2PhasePreCommit_resultTupleScheme getScheme() {
        return new initiate2PhasePreCommit_resultTupleScheme();
      }
    }

    private static class initiate2PhasePreCommit_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initiate2PhasePreCommit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initiate2PhasePreCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initiate2PhasePreCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TwoPhasePreCommitResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initiate2PhaseCommit_args implements org.apache.thrift.TBase<initiate2PhaseCommit_args, initiate2PhaseCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<initiate2PhaseCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initiate2PhaseCommit_args");

    private static final org.apache.thrift.protocol.TField COMMIT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("commitRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initiate2PhaseCommit_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initiate2PhaseCommit_argsTupleSchemeFactory();

    public TwoPhaseCommitRequest commitRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMIT_REQUEST((short)1, "commitRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMIT_REQUEST
            return COMMIT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMIT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("commitRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwoPhaseCommitRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initiate2PhaseCommit_args.class, metaDataMap);
    }

    public initiate2PhaseCommit_args() {
    }

    public initiate2PhaseCommit_args(
      TwoPhaseCommitRequest commitRequest)
    {
      this();
      this.commitRequest = commitRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initiate2PhaseCommit_args(initiate2PhaseCommit_args other) {
      if (other.isSetCommitRequest()) {
        this.commitRequest = new TwoPhaseCommitRequest(other.commitRequest);
      }
    }

    public initiate2PhaseCommit_args deepCopy() {
      return new initiate2PhaseCommit_args(this);
    }

    @Override
    public void clear() {
      this.commitRequest = null;
    }

    public TwoPhaseCommitRequest getCommitRequest() {
      return this.commitRequest;
    }

    public initiate2PhaseCommit_args setCommitRequest(TwoPhaseCommitRequest commitRequest) {
      this.commitRequest = commitRequest;
      return this;
    }

    public void unsetCommitRequest() {
      this.commitRequest = null;
    }

    /** Returns true if field commitRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetCommitRequest() {
      return this.commitRequest != null;
    }

    public void setCommitRequestIsSet(boolean value) {
      if (!value) {
        this.commitRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case COMMIT_REQUEST:
        if (value == null) {
          unsetCommitRequest();
        } else {
          setCommitRequest((TwoPhaseCommitRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMIT_REQUEST:
        return getCommitRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMMIT_REQUEST:
        return isSetCommitRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof initiate2PhaseCommit_args)
        return this.equals((initiate2PhaseCommit_args)that);
      return false;
    }

    public boolean equals(initiate2PhaseCommit_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_commitRequest = true && this.isSetCommitRequest();
      boolean that_present_commitRequest = true && that.isSetCommitRequest();
      if (this_present_commitRequest || that_present_commitRequest) {
        if (!(this_present_commitRequest && that_present_commitRequest))
          return false;
        if (!this.commitRequest.equals(that.commitRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCommitRequest()) ? 131071 : 524287);
      if (isSetCommitRequest())
        hashCode = hashCode * 8191 + commitRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initiate2PhaseCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCommitRequest()).compareTo(other.isSetCommitRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommitRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitRequest, other.commitRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("initiate2PhaseCommit_args(");
      boolean first = true;

      sb.append("commitRequest:");
      if (this.commitRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.commitRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commitRequest != null) {
        commitRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initiate2PhaseCommit_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initiate2PhaseCommit_argsStandardScheme getScheme() {
        return new initiate2PhaseCommit_argsStandardScheme();
      }
    }

    private static class initiate2PhaseCommit_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initiate2PhaseCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initiate2PhaseCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMIT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commitRequest = new TwoPhaseCommitRequest();
                struct.commitRequest.read(iprot);
                struct.setCommitRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initiate2PhaseCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commitRequest != null) {
          oprot.writeFieldBegin(COMMIT_REQUEST_FIELD_DESC);
          struct.commitRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initiate2PhaseCommit_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initiate2PhaseCommit_argsTupleScheme getScheme() {
        return new initiate2PhaseCommit_argsTupleScheme();
      }
    }

    private static class initiate2PhaseCommit_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initiate2PhaseCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initiate2PhaseCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCommitRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommitRequest()) {
          struct.commitRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initiate2PhaseCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commitRequest = new TwoPhaseCommitRequest();
          struct.commitRequest.read(iprot);
          struct.setCommitRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initiate2PhaseCommit_result implements org.apache.thrift.TBase<initiate2PhaseCommit_result, initiate2PhaseCommit_result._Fields>, java.io.Serializable, Cloneable, Comparable<initiate2PhaseCommit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initiate2PhaseCommit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initiate2PhaseCommit_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initiate2PhaseCommit_resultTupleSchemeFactory();

    public TwoPhaseCommitResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwoPhaseCommitResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initiate2PhaseCommit_result.class, metaDataMap);
    }

    public initiate2PhaseCommit_result() {
    }

    public initiate2PhaseCommit_result(
      TwoPhaseCommitResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initiate2PhaseCommit_result(initiate2PhaseCommit_result other) {
      if (other.isSetSuccess()) {
        this.success = new TwoPhaseCommitResponse(other.success);
      }
    }

    public initiate2PhaseCommit_result deepCopy() {
      return new initiate2PhaseCommit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TwoPhaseCommitResponse getSuccess() {
      return this.success;
    }

    public initiate2PhaseCommit_result setSuccess(TwoPhaseCommitResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TwoPhaseCommitResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof initiate2PhaseCommit_result)
        return this.equals((initiate2PhaseCommit_result)that);
      return false;
    }

    public boolean equals(initiate2PhaseCommit_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initiate2PhaseCommit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("initiate2PhaseCommit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initiate2PhaseCommit_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initiate2PhaseCommit_resultStandardScheme getScheme() {
        return new initiate2PhaseCommit_resultStandardScheme();
      }
    }

    private static class initiate2PhaseCommit_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initiate2PhaseCommit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initiate2PhaseCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TwoPhaseCommitResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initiate2PhaseCommit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initiate2PhaseCommit_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initiate2PhaseCommit_resultTupleScheme getScheme() {
        return new initiate2PhaseCommit_resultTupleScheme();
      }
    }

    private static class initiate2PhaseCommit_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initiate2PhaseCommit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initiate2PhaseCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initiate2PhaseCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TwoPhaseCommitResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class buddyHeartBeat_args implements org.apache.thrift.TBase<buddyHeartBeat_args, buddyHeartBeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<buddyHeartBeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buddyHeartBeat_args");

    private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("payload", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new buddyHeartBeat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new buddyHeartBeat_argsTupleSchemeFactory();

    public BuddyPayload payload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYLOAD((short)1, "payload");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYLOAD
            return PAYLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("payload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuddyPayload.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buddyHeartBeat_args.class, metaDataMap);
    }

    public buddyHeartBeat_args() {
    }

    public buddyHeartBeat_args(
      BuddyPayload payload)
    {
      this();
      this.payload = payload;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buddyHeartBeat_args(buddyHeartBeat_args other) {
      if (other.isSetPayload()) {
        this.payload = new BuddyPayload(other.payload);
      }
    }

    public buddyHeartBeat_args deepCopy() {
      return new buddyHeartBeat_args(this);
    }

    @Override
    public void clear() {
      this.payload = null;
    }

    public BuddyPayload getPayload() {
      return this.payload;
    }

    public buddyHeartBeat_args setPayload(BuddyPayload payload) {
      this.payload = payload;
      return this;
    }

    public void unsetPayload() {
      this.payload = null;
    }

    /** Returns true if field payload is set (has been assigned a value) and false otherwise */
    public boolean isSetPayload() {
      return this.payload != null;
    }

    public void setPayloadIsSet(boolean value) {
      if (!value) {
        this.payload = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PAYLOAD:
        if (value == null) {
          unsetPayload();
        } else {
          setPayload((BuddyPayload)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYLOAD:
        return getPayload();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PAYLOAD:
        return isSetPayload();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof buddyHeartBeat_args)
        return this.equals((buddyHeartBeat_args)that);
      return false;
    }

    public boolean equals(buddyHeartBeat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_payload = true && this.isSetPayload();
      boolean that_present_payload = true && that.isSetPayload();
      if (this_present_payload || that_present_payload) {
        if (!(this_present_payload && that_present_payload))
          return false;
        if (!this.payload.equals(that.payload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPayload()) ? 131071 : 524287);
      if (isSetPayload())
        hashCode = hashCode * 8191 + payload.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(buddyHeartBeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload, other.payload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("buddyHeartBeat_args(");
      boolean first = true;

      sb.append("payload:");
      if (this.payload == null) {
        sb.append("null");
      } else {
        sb.append(this.payload);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (payload != null) {
        payload.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buddyHeartBeat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public buddyHeartBeat_argsStandardScheme getScheme() {
        return new buddyHeartBeat_argsStandardScheme();
      }
    }

    private static class buddyHeartBeat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<buddyHeartBeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buddyHeartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.payload = new BuddyPayload();
                struct.payload.read(iprot);
                struct.setPayloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buddyHeartBeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.payload != null) {
          oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
          struct.payload.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buddyHeartBeat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public buddyHeartBeat_argsTupleScheme getScheme() {
        return new buddyHeartBeat_argsTupleScheme();
      }
    }

    private static class buddyHeartBeat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<buddyHeartBeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buddyHeartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPayload()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPayload()) {
          struct.payload.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buddyHeartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.payload = new BuddyPayload();
          struct.payload.read(iprot);
          struct.setPayloadIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class neighborHeartBeat_args implements org.apache.thrift.TBase<neighborHeartBeat_args, neighborHeartBeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<neighborHeartBeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("neighborHeartBeat_args");

    private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("payload", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new neighborHeartBeat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new neighborHeartBeat_argsTupleSchemeFactory();

    public NeighborPayload payload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYLOAD((short)1, "payload");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYLOAD
            return PAYLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("payload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeighborPayload.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(neighborHeartBeat_args.class, metaDataMap);
    }

    public neighborHeartBeat_args() {
    }

    public neighborHeartBeat_args(
      NeighborPayload payload)
    {
      this();
      this.payload = payload;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public neighborHeartBeat_args(neighborHeartBeat_args other) {
      if (other.isSetPayload()) {
        this.payload = new NeighborPayload(other.payload);
      }
    }

    public neighborHeartBeat_args deepCopy() {
      return new neighborHeartBeat_args(this);
    }

    @Override
    public void clear() {
      this.payload = null;
    }

    public NeighborPayload getPayload() {
      return this.payload;
    }

    public neighborHeartBeat_args setPayload(NeighborPayload payload) {
      this.payload = payload;
      return this;
    }

    public void unsetPayload() {
      this.payload = null;
    }

    /** Returns true if field payload is set (has been assigned a value) and false otherwise */
    public boolean isSetPayload() {
      return this.payload != null;
    }

    public void setPayloadIsSet(boolean value) {
      if (!value) {
        this.payload = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PAYLOAD:
        if (value == null) {
          unsetPayload();
        } else {
          setPayload((NeighborPayload)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYLOAD:
        return getPayload();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PAYLOAD:
        return isSetPayload();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof neighborHeartBeat_args)
        return this.equals((neighborHeartBeat_args)that);
      return false;
    }

    public boolean equals(neighborHeartBeat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_payload = true && this.isSetPayload();
      boolean that_present_payload = true && that.isSetPayload();
      if (this_present_payload || that_present_payload) {
        if (!(this_present_payload && that_present_payload))
          return false;
        if (!this.payload.equals(that.payload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPayload()) ? 131071 : 524287);
      if (isSetPayload())
        hashCode = hashCode * 8191 + payload.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(neighborHeartBeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload, other.payload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("neighborHeartBeat_args(");
      boolean first = true;

      sb.append("payload:");
      if (this.payload == null) {
        sb.append("null");
      } else {
        sb.append(this.payload);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (payload != null) {
        payload.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class neighborHeartBeat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public neighborHeartBeat_argsStandardScheme getScheme() {
        return new neighborHeartBeat_argsStandardScheme();
      }
    }

    private static class neighborHeartBeat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<neighborHeartBeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, neighborHeartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.payload = new NeighborPayload();
                struct.payload.read(iprot);
                struct.setPayloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, neighborHeartBeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.payload != null) {
          oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
          struct.payload.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class neighborHeartBeat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public neighborHeartBeat_argsTupleScheme getScheme() {
        return new neighborHeartBeat_argsTupleScheme();
      }
    }

    private static class neighborHeartBeat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<neighborHeartBeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, neighborHeartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPayload()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPayload()) {
          struct.payload.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, neighborHeartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.payload = new NeighborPayload();
          struct.payload.read(iprot);
          struct.setPayloadIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPoolMember_args implements org.apache.thrift.TBase<getPoolMember_args, getPoolMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPoolMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPoolMember_args");

    private static final org.apache.thrift.protocol.TField BUDDY_POOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("buddyPoolId", org.apache.thrift.protocol.TType.I16, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPoolMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPoolMember_argsTupleSchemeFactory();

    public short buddyPoolId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUDDY_POOL_ID((short)1, "buddyPoolId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUDDY_POOL_ID
            return BUDDY_POOL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BUDDYPOOLID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUDDY_POOL_ID, new org.apache.thrift.meta_data.FieldMetaData("buddyPoolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPoolMember_args.class, metaDataMap);
    }

    public getPoolMember_args() {
    }

    public getPoolMember_args(
      short buddyPoolId)
    {
      this();
      this.buddyPoolId = buddyPoolId;
      setBuddyPoolIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPoolMember_args(getPoolMember_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.buddyPoolId = other.buddyPoolId;
    }

    public getPoolMember_args deepCopy() {
      return new getPoolMember_args(this);
    }

    @Override
    public void clear() {
      setBuddyPoolIdIsSet(false);
      this.buddyPoolId = 0;
    }

    public short getBuddyPoolId() {
      return this.buddyPoolId;
    }

    public getPoolMember_args setBuddyPoolId(short buddyPoolId) {
      this.buddyPoolId = buddyPoolId;
      setBuddyPoolIdIsSet(true);
      return this;
    }

    public void unsetBuddyPoolId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUDDYPOOLID_ISSET_ID);
    }

    /** Returns true if field buddyPoolId is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyPoolId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUDDYPOOLID_ISSET_ID);
    }

    public void setBuddyPoolIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUDDYPOOLID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUDDY_POOL_ID:
        if (value == null) {
          unsetBuddyPoolId();
        } else {
          setBuddyPoolId((java.lang.Short)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUDDY_POOL_ID:
        return getBuddyPoolId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUDDY_POOL_ID:
        return isSetBuddyPoolId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPoolMember_args)
        return this.equals((getPoolMember_args)that);
      return false;
    }

    public boolean equals(getPoolMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyPoolId = true;
      boolean that_present_buddyPoolId = true;
      if (this_present_buddyPoolId || that_present_buddyPoolId) {
        if (!(this_present_buddyPoolId && that_present_buddyPoolId))
          return false;
        if (this.buddyPoolId != that.buddyPoolId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + buddyPoolId;

      return hashCode;
    }

    @Override
    public int compareTo(getPoolMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBuddyPoolId()).compareTo(other.isSetBuddyPoolId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyPoolId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buddyPoolId, other.buddyPoolId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPoolMember_args(");
      boolean first = true;

      sb.append("buddyPoolId:");
      sb.append(this.buddyPoolId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPoolMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPoolMember_argsStandardScheme getScheme() {
        return new getPoolMember_argsStandardScheme();
      }
    }

    private static class getPoolMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPoolMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPoolMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUDDY_POOL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.buddyPoolId = iprot.readI16();
                struct.setBuddyPoolIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPoolMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BUDDY_POOL_ID_FIELD_DESC);
        oprot.writeI16(struct.buddyPoolId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPoolMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPoolMember_argsTupleScheme getScheme() {
        return new getPoolMember_argsTupleScheme();
      }
    }

    private static class getPoolMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPoolMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPoolMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBuddyPoolId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBuddyPoolId()) {
          oprot.writeI16(struct.buddyPoolId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPoolMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.buddyPoolId = iprot.readI16();
          struct.setBuddyPoolIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPoolMember_result implements org.apache.thrift.TBase<getPoolMember_result, getPoolMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPoolMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPoolMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPoolMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPoolMember_resultTupleSchemeFactory();

    public NodeInfoData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfoData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPoolMember_result.class, metaDataMap);
    }

    public getPoolMember_result() {
    }

    public getPoolMember_result(
      NodeInfoData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPoolMember_result(getPoolMember_result other) {
      if (other.isSetSuccess()) {
        this.success = new NodeInfoData(other.success);
      }
    }

    public getPoolMember_result deepCopy() {
      return new getPoolMember_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NodeInfoData getSuccess() {
      return this.success;
    }

    public getPoolMember_result setSuccess(NodeInfoData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NodeInfoData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPoolMember_result)
        return this.equals((getPoolMember_result)that);
      return false;
    }

    public boolean equals(getPoolMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPoolMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPoolMember_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPoolMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPoolMember_resultStandardScheme getScheme() {
        return new getPoolMember_resultStandardScheme();
      }
    }

    private static class getPoolMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPoolMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPoolMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NodeInfoData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPoolMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPoolMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPoolMember_resultTupleScheme getScheme() {
        return new getPoolMember_resultTupleScheme();
      }
    }

    private static class getPoolMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPoolMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPoolMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPoolMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NodeInfoData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBuddyPoolMembers_args implements org.apache.thrift.TBase<getBuddyPoolMembers_args, getBuddyPoolMembers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBuddyPoolMembers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBuddyPoolMembers_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBuddyPoolMembers_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBuddyPoolMembers_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBuddyPoolMembers_args.class, metaDataMap);
    }

    public getBuddyPoolMembers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyPoolMembers_args(getBuddyPoolMembers_args other) {
    }

    public getBuddyPoolMembers_args deepCopy() {
      return new getBuddyPoolMembers_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyPoolMembers_args)
        return this.equals((getBuddyPoolMembers_args)that);
      return false;
    }

    public boolean equals(getBuddyPoolMembers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getBuddyPoolMembers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBuddyPoolMembers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBuddyPoolMembers_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBuddyPoolMembers_argsStandardScheme getScheme() {
        return new getBuddyPoolMembers_argsStandardScheme();
      }
    }

    private static class getBuddyPoolMembers_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBuddyPoolMembers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBuddyPoolMembers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBuddyPoolMembers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBuddyPoolMembers_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBuddyPoolMembers_argsTupleScheme getScheme() {
        return new getBuddyPoolMembers_argsTupleScheme();
      }
    }

    private static class getBuddyPoolMembers_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBuddyPoolMembers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBuddyPoolMembers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBuddyPoolMembers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBuddyPoolMembers_result implements org.apache.thrift.TBase<getBuddyPoolMembers_result, getBuddyPoolMembers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBuddyPoolMembers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBuddyPoolMembers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBuddyPoolMembers_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBuddyPoolMembers_resultTupleSchemeFactory();

    public java.util.List<FogInfoData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FogInfoData.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBuddyPoolMembers_result.class, metaDataMap);
    }

    public getBuddyPoolMembers_result() {
    }

    public getBuddyPoolMembers_result(
      java.util.List<FogInfoData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyPoolMembers_result(getBuddyPoolMembers_result other) {
      if (other.isSetSuccess()) {
        java.util.List<FogInfoData> __this__success = new java.util.ArrayList<FogInfoData>(other.success.size());
        for (FogInfoData other_element : other.success) {
          __this__success.add(new FogInfoData(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBuddyPoolMembers_result deepCopy() {
      return new getBuddyPoolMembers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FogInfoData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FogInfoData elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<FogInfoData>();
      }
      this.success.add(elem);
    }

    public java.util.List<FogInfoData> getSuccess() {
      return this.success;
    }

    public getBuddyPoolMembers_result setSuccess(java.util.List<FogInfoData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<FogInfoData>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyPoolMembers_result)
        return this.equals((getBuddyPoolMembers_result)that);
      return false;
    }

    public boolean equals(getBuddyPoolMembers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBuddyPoolMembers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBuddyPoolMembers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBuddyPoolMembers_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBuddyPoolMembers_resultStandardScheme getScheme() {
        return new getBuddyPoolMembers_resultStandardScheme();
      }
    }

    private static class getBuddyPoolMembers_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBuddyPoolMembers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBuddyPoolMembers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<FogInfoData>(_list108.size);
                  FogInfoData _elem109;
                  for (int _i110 = 0; _i110 < _list108.size; ++_i110)
                  {
                    _elem109 = new FogInfoData();
                    _elem109.read(iprot);
                    struct.success.add(_elem109);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBuddyPoolMembers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FogInfoData _iter111 : struct.success)
            {
              _iter111.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBuddyPoolMembers_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBuddyPoolMembers_resultTupleScheme getScheme() {
        return new getBuddyPoolMembers_resultTupleScheme();
      }
    }

    private static class getBuddyPoolMembers_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBuddyPoolMembers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBuddyPoolMembers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FogInfoData _iter112 : struct.success)
            {
              _iter112.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBuddyPoolMembers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<FogInfoData>(_list113.size);
            FogInfoData _elem114;
            for (int _i115 = 0; _i115 < _list113.size; ++_i115)
            {
              _elem114 = new FogInfoData();
              _elem114.read(iprot);
              struct.success.add(_elem114);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNeighborCountPerPool_args implements org.apache.thrift.TBase<getNeighborCountPerPool_args, getNeighborCountPerPool_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNeighborCountPerPool_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNeighborCountPerPool_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNeighborCountPerPool_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNeighborCountPerPool_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNeighborCountPerPool_args.class, metaDataMap);
    }

    public getNeighborCountPerPool_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNeighborCountPerPool_args(getNeighborCountPerPool_args other) {
    }

    public getNeighborCountPerPool_args deepCopy() {
      return new getNeighborCountPerPool_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNeighborCountPerPool_args)
        return this.equals((getNeighborCountPerPool_args)that);
      return false;
    }

    public boolean equals(getNeighborCountPerPool_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getNeighborCountPerPool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNeighborCountPerPool_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNeighborCountPerPool_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNeighborCountPerPool_argsStandardScheme getScheme() {
        return new getNeighborCountPerPool_argsStandardScheme();
      }
    }

    private static class getNeighborCountPerPool_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNeighborCountPerPool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNeighborCountPerPool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNeighborCountPerPool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNeighborCountPerPool_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNeighborCountPerPool_argsTupleScheme getScheme() {
        return new getNeighborCountPerPool_argsTupleScheme();
      }
    }

    private static class getNeighborCountPerPool_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNeighborCountPerPool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNeighborCountPerPool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNeighborCountPerPool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNeighborCountPerPool_result implements org.apache.thrift.TBase<getNeighborCountPerPool_result, getNeighborCountPerPool_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNeighborCountPerPool_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNeighborCountPerPool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNeighborCountPerPool_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNeighborCountPerPool_resultTupleSchemeFactory();

    public NeighborCount success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeighborCount.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNeighborCountPerPool_result.class, metaDataMap);
    }

    public getNeighborCountPerPool_result() {
    }

    public getNeighborCountPerPool_result(
      NeighborCount success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNeighborCountPerPool_result(getNeighborCountPerPool_result other) {
      if (other.isSetSuccess()) {
        this.success = new NeighborCount(other.success);
      }
    }

    public getNeighborCountPerPool_result deepCopy() {
      return new getNeighborCountPerPool_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NeighborCount getSuccess() {
      return this.success;
    }

    public getNeighborCountPerPool_result setSuccess(NeighborCount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NeighborCount)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNeighborCountPerPool_result)
        return this.equals((getNeighborCountPerPool_result)that);
      return false;
    }

    public boolean equals(getNeighborCountPerPool_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNeighborCountPerPool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNeighborCountPerPool_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNeighborCountPerPool_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNeighborCountPerPool_resultStandardScheme getScheme() {
        return new getNeighborCountPerPool_resultStandardScheme();
      }
    }

    private static class getNeighborCountPerPool_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNeighborCountPerPool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNeighborCountPerPool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NeighborCount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNeighborCountPerPool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNeighborCountPerPool_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNeighborCountPerPool_resultTupleScheme getScheme() {
        return new getNeighborCountPerPool_resultTupleScheme();
      }
    }

    private static class getNeighborCountPerPool_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNeighborCountPerPool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNeighborCountPerPool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNeighborCountPerPool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NeighborCount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestNeighbors_args implements org.apache.thrift.TBase<requestNeighbors_args, requestNeighbors_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestNeighbors_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestNeighbors_args");

    private static final org.apache.thrift.protocol.TField REQUEST_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("requestMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestNeighbors_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestNeighbors_argsTupleSchemeFactory();

    public java.util.Map<java.lang.Short,java.lang.Short> requestMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_MAP((short)1, "requestMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_MAP
            return REQUEST_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_MAP, new org.apache.thrift.meta_data.FieldMetaData("requestMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestNeighbors_args.class, metaDataMap);
    }

    public requestNeighbors_args() {
    }

    public requestNeighbors_args(
      java.util.Map<java.lang.Short,java.lang.Short> requestMap)
    {
      this();
      this.requestMap = requestMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestNeighbors_args(requestNeighbors_args other) {
      if (other.isSetRequestMap()) {
        java.util.Map<java.lang.Short,java.lang.Short> __this__requestMap = new java.util.HashMap<java.lang.Short,java.lang.Short>(other.requestMap);
        this.requestMap = __this__requestMap;
      }
    }

    public requestNeighbors_args deepCopy() {
      return new requestNeighbors_args(this);
    }

    @Override
    public void clear() {
      this.requestMap = null;
    }

    public int getRequestMapSize() {
      return (this.requestMap == null) ? 0 : this.requestMap.size();
    }

    public void putToRequestMap(short key, short val) {
      if (this.requestMap == null) {
        this.requestMap = new java.util.HashMap<java.lang.Short,java.lang.Short>();
      }
      this.requestMap.put(key, val);
    }

    public java.util.Map<java.lang.Short,java.lang.Short> getRequestMap() {
      return this.requestMap;
    }

    public requestNeighbors_args setRequestMap(java.util.Map<java.lang.Short,java.lang.Short> requestMap) {
      this.requestMap = requestMap;
      return this;
    }

    public void unsetRequestMap() {
      this.requestMap = null;
    }

    /** Returns true if field requestMap is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestMap() {
      return this.requestMap != null;
    }

    public void setRequestMapIsSet(boolean value) {
      if (!value) {
        this.requestMap = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_MAP:
        if (value == null) {
          unsetRequestMap();
        } else {
          setRequestMap((java.util.Map<java.lang.Short,java.lang.Short>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_MAP:
        return getRequestMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_MAP:
        return isSetRequestMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestNeighbors_args)
        return this.equals((requestNeighbors_args)that);
      return false;
    }

    public boolean equals(requestNeighbors_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestMap = true && this.isSetRequestMap();
      boolean that_present_requestMap = true && that.isSetRequestMap();
      if (this_present_requestMap || that_present_requestMap) {
        if (!(this_present_requestMap && that_present_requestMap))
          return false;
        if (!this.requestMap.equals(that.requestMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequestMap()) ? 131071 : 524287);
      if (isSetRequestMap())
        hashCode = hashCode * 8191 + requestMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestNeighbors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestMap()).compareTo(other.isSetRequestMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestMap, other.requestMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestNeighbors_args(");
      boolean first = true;

      sb.append("requestMap:");
      if (this.requestMap == null) {
        sb.append("null");
      } else {
        sb.append(this.requestMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestNeighbors_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestNeighbors_argsStandardScheme getScheme() {
        return new requestNeighbors_argsStandardScheme();
      }
    }

    private static class requestNeighbors_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestNeighbors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestNeighbors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
                  struct.requestMap = new java.util.HashMap<java.lang.Short,java.lang.Short>(2*_map116.size);
                  short _key117;
                  short _val118;
                  for (int _i119 = 0; _i119 < _map116.size; ++_i119)
                  {
                    _key117 = iprot.readI16();
                    _val118 = iprot.readI16();
                    struct.requestMap.put(_key117, _val118);
                  }
                  iprot.readMapEnd();
                }
                struct.setRequestMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestNeighbors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestMap != null) {
          oprot.writeFieldBegin(REQUEST_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, struct.requestMap.size()));
            for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter120 : struct.requestMap.entrySet())
            {
              oprot.writeI16(_iter120.getKey());
              oprot.writeI16(_iter120.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestNeighbors_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestNeighbors_argsTupleScheme getScheme() {
        return new requestNeighbors_argsTupleScheme();
      }
    }

    private static class requestNeighbors_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestNeighbors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestNeighbors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestMap()) {
          {
            oprot.writeI32(struct.requestMap.size());
            for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter121 : struct.requestMap.entrySet())
            {
              oprot.writeI16(_iter121.getKey());
              oprot.writeI16(_iter121.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestNeighbors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map122 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, iprot.readI32());
            struct.requestMap = new java.util.HashMap<java.lang.Short,java.lang.Short>(2*_map122.size);
            short _key123;
            short _val124;
            for (int _i125 = 0; _i125 < _map122.size; ++_i125)
            {
              _key123 = iprot.readI16();
              _val124 = iprot.readI16();
              struct.requestMap.put(_key123, _val124);
            }
          }
          struct.setRequestMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestNeighbors_result implements org.apache.thrift.TBase<requestNeighbors_result, requestNeighbors_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestNeighbors_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestNeighbors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestNeighbors_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestNeighbors_resultTupleSchemeFactory();

    public java.util.List<NeighborInfoData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeighborInfoData.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestNeighbors_result.class, metaDataMap);
    }

    public requestNeighbors_result() {
    }

    public requestNeighbors_result(
      java.util.List<NeighborInfoData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestNeighbors_result(requestNeighbors_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NeighborInfoData> __this__success = new java.util.ArrayList<NeighborInfoData>(other.success.size());
        for (NeighborInfoData other_element : other.success) {
          __this__success.add(new NeighborInfoData(other_element));
        }
        this.success = __this__success;
      }
    }

    public requestNeighbors_result deepCopy() {
      return new requestNeighbors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NeighborInfoData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NeighborInfoData elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NeighborInfoData>();
      }
      this.success.add(elem);
    }

    public java.util.List<NeighborInfoData> getSuccess() {
      return this.success;
    }

    public requestNeighbors_result setSuccess(java.util.List<NeighborInfoData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NeighborInfoData>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestNeighbors_result)
        return this.equals((requestNeighbors_result)that);
      return false;
    }

    public boolean equals(requestNeighbors_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestNeighbors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestNeighbors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestNeighbors_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestNeighbors_resultStandardScheme getScheme() {
        return new requestNeighbors_resultStandardScheme();
      }
    }

    private static class requestNeighbors_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestNeighbors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestNeighbors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NeighborInfoData>(_list126.size);
                  NeighborInfoData _elem127;
                  for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                  {
                    _elem127 = new NeighborInfoData();
                    _elem127.read(iprot);
                    struct.success.add(_elem127);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestNeighbors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NeighborInfoData _iter129 : struct.success)
            {
              _iter129.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestNeighbors_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestNeighbors_resultTupleScheme getScheme() {
        return new requestNeighbors_resultTupleScheme();
      }
    }

    private static class requestNeighbors_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestNeighbors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestNeighbors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NeighborInfoData _iter130 : struct.success)
            {
              _iter130.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestNeighbors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<NeighborInfoData>(_list131.size);
            NeighborInfoData _elem132;
            for (int _i133 = 0; _i133 < _list131.size; ++_i133)
            {
              _elem132 = new NeighborInfoData();
              _elem132.read(iprot);
              struct.success.add(_elem132);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class nodeJoiningComplete_args implements org.apache.thrift.TBase<nodeJoiningComplete_args, nodeJoiningComplete_args._Fields>, java.io.Serializable, Cloneable, Comparable<nodeJoiningComplete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nodeJoiningComplete_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new nodeJoiningComplete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new nodeJoiningComplete_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nodeJoiningComplete_args.class, metaDataMap);
    }

    public nodeJoiningComplete_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nodeJoiningComplete_args(nodeJoiningComplete_args other) {
    }

    public nodeJoiningComplete_args deepCopy() {
      return new nodeJoiningComplete_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof nodeJoiningComplete_args)
        return this.equals((nodeJoiningComplete_args)that);
      return false;
    }

    public boolean equals(nodeJoiningComplete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(nodeJoiningComplete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("nodeJoiningComplete_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nodeJoiningComplete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nodeJoiningComplete_argsStandardScheme getScheme() {
        return new nodeJoiningComplete_argsStandardScheme();
      }
    }

    private static class nodeJoiningComplete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<nodeJoiningComplete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nodeJoiningComplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nodeJoiningComplete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nodeJoiningComplete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nodeJoiningComplete_argsTupleScheme getScheme() {
        return new nodeJoiningComplete_argsTupleScheme();
      }
    }

    private static class nodeJoiningComplete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<nodeJoiningComplete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nodeJoiningComplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nodeJoiningComplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class nodeJoiningComplete_result implements org.apache.thrift.TBase<nodeJoiningComplete_result, nodeJoiningComplete_result._Fields>, java.io.Serializable, Cloneable, Comparable<nodeJoiningComplete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nodeJoiningComplete_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new nodeJoiningComplete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new nodeJoiningComplete_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nodeJoiningComplete_result.class, metaDataMap);
    }

    public nodeJoiningComplete_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nodeJoiningComplete_result(nodeJoiningComplete_result other) {
    }

    public nodeJoiningComplete_result deepCopy() {
      return new nodeJoiningComplete_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof nodeJoiningComplete_result)
        return this.equals((nodeJoiningComplete_result)that);
      return false;
    }

    public boolean equals(nodeJoiningComplete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(nodeJoiningComplete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("nodeJoiningComplete_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nodeJoiningComplete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nodeJoiningComplete_resultStandardScheme getScheme() {
        return new nodeJoiningComplete_resultStandardScheme();
      }
    }

    private static class nodeJoiningComplete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<nodeJoiningComplete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nodeJoiningComplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nodeJoiningComplete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nodeJoiningComplete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nodeJoiningComplete_resultTupleScheme getScheme() {
        return new nodeJoiningComplete_resultTupleScheme();
      }
    }

    private static class nodeJoiningComplete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<nodeJoiningComplete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nodeJoiningComplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nodeJoiningComplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class subscribe_args implements org.apache.thrift.TBase<subscribe_args, subscribe_args._Fields>, java.io.Serializable, Cloneable, Comparable<subscribe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribe_args");

    private static final org.apache.thrift.protocol.TField NODE_INFO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfoData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new subscribe_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new subscribe_argsTupleSchemeFactory();

    public NodeInfoData nodeInfoData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_INFO_DATA((short)1, "nodeInfoData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_INFO_DATA
            return NODE_INFO_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_INFO_DATA, new org.apache.thrift.meta_data.FieldMetaData("nodeInfoData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfoData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribe_args.class, metaDataMap);
    }

    public subscribe_args() {
    }

    public subscribe_args(
      NodeInfoData nodeInfoData)
    {
      this();
      this.nodeInfoData = nodeInfoData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribe_args(subscribe_args other) {
      if (other.isSetNodeInfoData()) {
        this.nodeInfoData = new NodeInfoData(other.nodeInfoData);
      }
    }

    public subscribe_args deepCopy() {
      return new subscribe_args(this);
    }

    @Override
    public void clear() {
      this.nodeInfoData = null;
    }

    public NodeInfoData getNodeInfoData() {
      return this.nodeInfoData;
    }

    public subscribe_args setNodeInfoData(NodeInfoData nodeInfoData) {
      this.nodeInfoData = nodeInfoData;
      return this;
    }

    public void unsetNodeInfoData() {
      this.nodeInfoData = null;
    }

    /** Returns true if field nodeInfoData is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeInfoData() {
      return this.nodeInfoData != null;
    }

    public void setNodeInfoDataIsSet(boolean value) {
      if (!value) {
        this.nodeInfoData = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NODE_INFO_DATA:
        if (value == null) {
          unsetNodeInfoData();
        } else {
          setNodeInfoData((NodeInfoData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_INFO_DATA:
        return getNodeInfoData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NODE_INFO_DATA:
        return isSetNodeInfoData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribe_args)
        return this.equals((subscribe_args)that);
      return false;
    }

    public boolean equals(subscribe_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nodeInfoData = true && this.isSetNodeInfoData();
      boolean that_present_nodeInfoData = true && that.isSetNodeInfoData();
      if (this_present_nodeInfoData || that_present_nodeInfoData) {
        if (!(this_present_nodeInfoData && that_present_nodeInfoData))
          return false;
        if (!this.nodeInfoData.equals(that.nodeInfoData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNodeInfoData()) ? 131071 : 524287);
      if (isSetNodeInfoData())
        hashCode = hashCode * 8191 + nodeInfoData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(subscribe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNodeInfoData()).compareTo(other.isSetNodeInfoData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeInfoData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfoData, other.nodeInfoData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("subscribe_args(");
      boolean first = true;

      sb.append("nodeInfoData:");
      if (this.nodeInfoData == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeInfoData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (nodeInfoData != null) {
        nodeInfoData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribe_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribe_argsStandardScheme getScheme() {
        return new subscribe_argsStandardScheme();
      }
    }

    private static class subscribe_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<subscribe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_INFO_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeInfoData = new NodeInfoData();
                struct.nodeInfoData.read(iprot);
                struct.setNodeInfoDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeInfoData != null) {
          oprot.writeFieldBegin(NODE_INFO_DATA_FIELD_DESC);
          struct.nodeInfoData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribe_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribe_argsTupleScheme getScheme() {
        return new subscribe_argsTupleScheme();
      }
    }

    private static class subscribe_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<subscribe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNodeInfoData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNodeInfoData()) {
          struct.nodeInfoData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nodeInfoData = new NodeInfoData();
          struct.nodeInfoData.read(iprot);
          struct.setNodeInfoDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class subscribe_result implements org.apache.thrift.TBase<subscribe_result, subscribe_result._Fields>, java.io.Serializable, Cloneable, Comparable<subscribe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new subscribe_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new subscribe_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribe_result.class, metaDataMap);
    }

    public subscribe_result() {
    }

    public subscribe_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribe_result(subscribe_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public subscribe_result deepCopy() {
      return new subscribe_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public subscribe_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribe_result)
        return this.equals((subscribe_result)that);
      return false;
    }

    public boolean equals(subscribe_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(subscribe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("subscribe_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribe_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribe_resultStandardScheme getScheme() {
        return new subscribe_resultStandardScheme();
      }
    }

    private static class subscribe_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<subscribe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribe_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribe_resultTupleScheme getScheme() {
        return new subscribe_resultTupleScheme();
      }
    }

    private static class subscribe_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<subscribe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class edgeHeartBeats_args implements org.apache.thrift.TBase<edgeHeartBeats_args, edgeHeartBeats_args._Fields>, java.io.Serializable, Cloneable, Comparable<edgeHeartBeats_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edgeHeartBeats_args");

    private static final org.apache.thrift.protocol.TField EDGE_PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("edgePayload", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new edgeHeartBeats_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new edgeHeartBeats_argsTupleSchemeFactory();

    public EdgePayload edgePayload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGE_PAYLOAD((short)1, "edgePayload");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDGE_PAYLOAD
            return EDGE_PAYLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDGE_PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("edgePayload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdgePayload.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edgeHeartBeats_args.class, metaDataMap);
    }

    public edgeHeartBeats_args() {
    }

    public edgeHeartBeats_args(
      EdgePayload edgePayload)
    {
      this();
      this.edgePayload = edgePayload;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edgeHeartBeats_args(edgeHeartBeats_args other) {
      if (other.isSetEdgePayload()) {
        this.edgePayload = new EdgePayload(other.edgePayload);
      }
    }

    public edgeHeartBeats_args deepCopy() {
      return new edgeHeartBeats_args(this);
    }

    @Override
    public void clear() {
      this.edgePayload = null;
    }

    public EdgePayload getEdgePayload() {
      return this.edgePayload;
    }

    public edgeHeartBeats_args setEdgePayload(EdgePayload edgePayload) {
      this.edgePayload = edgePayload;
      return this;
    }

    public void unsetEdgePayload() {
      this.edgePayload = null;
    }

    /** Returns true if field edgePayload is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgePayload() {
      return this.edgePayload != null;
    }

    public void setEdgePayloadIsSet(boolean value) {
      if (!value) {
        this.edgePayload = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EDGE_PAYLOAD:
        if (value == null) {
          unsetEdgePayload();
        } else {
          setEdgePayload((EdgePayload)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EDGE_PAYLOAD:
        return getEdgePayload();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EDGE_PAYLOAD:
        return isSetEdgePayload();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof edgeHeartBeats_args)
        return this.equals((edgeHeartBeats_args)that);
      return false;
    }

    public boolean equals(edgeHeartBeats_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_edgePayload = true && this.isSetEdgePayload();
      boolean that_present_edgePayload = true && that.isSetEdgePayload();
      if (this_present_edgePayload || that_present_edgePayload) {
        if (!(this_present_edgePayload && that_present_edgePayload))
          return false;
        if (!this.edgePayload.equals(that.edgePayload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEdgePayload()) ? 131071 : 524287);
      if (isSetEdgePayload())
        hashCode = hashCode * 8191 + edgePayload.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(edgeHeartBeats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEdgePayload()).compareTo(other.isSetEdgePayload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgePayload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgePayload, other.edgePayload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("edgeHeartBeats_args(");
      boolean first = true;

      sb.append("edgePayload:");
      if (this.edgePayload == null) {
        sb.append("null");
      } else {
        sb.append(this.edgePayload);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (edgePayload != null) {
        edgePayload.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edgeHeartBeats_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeHeartBeats_argsStandardScheme getScheme() {
        return new edgeHeartBeats_argsStandardScheme();
      }
    }

    private static class edgeHeartBeats_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<edgeHeartBeats_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edgeHeartBeats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDGE_PAYLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.edgePayload = new EdgePayload();
                struct.edgePayload.read(iprot);
                struct.setEdgePayloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edgeHeartBeats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.edgePayload != null) {
          oprot.writeFieldBegin(EDGE_PAYLOAD_FIELD_DESC);
          struct.edgePayload.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edgeHeartBeats_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeHeartBeats_argsTupleScheme getScheme() {
        return new edgeHeartBeats_argsTupleScheme();
      }
    }

    private static class edgeHeartBeats_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<edgeHeartBeats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edgeHeartBeats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEdgePayload()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEdgePayload()) {
          struct.edgePayload.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edgeHeartBeats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.edgePayload = new EdgePayload();
          struct.edgePayload.read(iprot);
          struct.setEdgePayloadIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class edgeHeartBeats_result implements org.apache.thrift.TBase<edgeHeartBeats_result, edgeHeartBeats_result._Fields>, java.io.Serializable, Cloneable, Comparable<edgeHeartBeats_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edgeHeartBeats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new edgeHeartBeats_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new edgeHeartBeats_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edgeHeartBeats_result.class, metaDataMap);
    }

    public edgeHeartBeats_result() {
    }

    public edgeHeartBeats_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edgeHeartBeats_result(edgeHeartBeats_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public edgeHeartBeats_result deepCopy() {
      return new edgeHeartBeats_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public edgeHeartBeats_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof edgeHeartBeats_result)
        return this.equals((edgeHeartBeats_result)that);
      return false;
    }

    public boolean equals(edgeHeartBeats_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(edgeHeartBeats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("edgeHeartBeats_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edgeHeartBeats_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeHeartBeats_resultStandardScheme getScheme() {
        return new edgeHeartBeats_resultStandardScheme();
      }
    }

    private static class edgeHeartBeats_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<edgeHeartBeats_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edgeHeartBeats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edgeHeartBeats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edgeHeartBeats_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeHeartBeats_resultTupleScheme getScheme() {
        return new edgeHeartBeats_resultTupleScheme();
      }
    }

    private static class edgeHeartBeats_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<edgeHeartBeats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edgeHeartBeats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edgeHeartBeats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class edgeJoin_args implements org.apache.thrift.TBase<edgeJoin_args, edgeJoin_args._Fields>, java.io.Serializable, Cloneable, Comparable<edgeJoin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edgeJoin_args");

    private static final org.apache.thrift.protocol.TField EDGE_INFO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeInfoData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new edgeJoin_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new edgeJoin_argsTupleSchemeFactory();

    public EdgeInfoData edgeInfoData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGE_INFO_DATA((short)1, "edgeInfoData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDGE_INFO_DATA
            return EDGE_INFO_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDGE_INFO_DATA, new org.apache.thrift.meta_data.FieldMetaData("edgeInfoData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdgeInfoData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edgeJoin_args.class, metaDataMap);
    }

    public edgeJoin_args() {
    }

    public edgeJoin_args(
      EdgeInfoData edgeInfoData)
    {
      this();
      this.edgeInfoData = edgeInfoData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edgeJoin_args(edgeJoin_args other) {
      if (other.isSetEdgeInfoData()) {
        this.edgeInfoData = new EdgeInfoData(other.edgeInfoData);
      }
    }

    public edgeJoin_args deepCopy() {
      return new edgeJoin_args(this);
    }

    @Override
    public void clear() {
      this.edgeInfoData = null;
    }

    public EdgeInfoData getEdgeInfoData() {
      return this.edgeInfoData;
    }

    public edgeJoin_args setEdgeInfoData(EdgeInfoData edgeInfoData) {
      this.edgeInfoData = edgeInfoData;
      return this;
    }

    public void unsetEdgeInfoData() {
      this.edgeInfoData = null;
    }

    /** Returns true if field edgeInfoData is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeInfoData() {
      return this.edgeInfoData != null;
    }

    public void setEdgeInfoDataIsSet(boolean value) {
      if (!value) {
        this.edgeInfoData = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EDGE_INFO_DATA:
        if (value == null) {
          unsetEdgeInfoData();
        } else {
          setEdgeInfoData((EdgeInfoData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EDGE_INFO_DATA:
        return getEdgeInfoData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EDGE_INFO_DATA:
        return isSetEdgeInfoData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof edgeJoin_args)
        return this.equals((edgeJoin_args)that);
      return false;
    }

    public boolean equals(edgeJoin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_edgeInfoData = true && this.isSetEdgeInfoData();
      boolean that_present_edgeInfoData = true && that.isSetEdgeInfoData();
      if (this_present_edgeInfoData || that_present_edgeInfoData) {
        if (!(this_present_edgeInfoData && that_present_edgeInfoData))
          return false;
        if (!this.edgeInfoData.equals(that.edgeInfoData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEdgeInfoData()) ? 131071 : 524287);
      if (isSetEdgeInfoData())
        hashCode = hashCode * 8191 + edgeInfoData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(edgeJoin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEdgeInfoData()).compareTo(other.isSetEdgeInfoData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeInfoData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeInfoData, other.edgeInfoData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("edgeJoin_args(");
      boolean first = true;

      sb.append("edgeInfoData:");
      if (this.edgeInfoData == null) {
        sb.append("null");
      } else {
        sb.append(this.edgeInfoData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (edgeInfoData != null) {
        edgeInfoData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edgeJoin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeJoin_argsStandardScheme getScheme() {
        return new edgeJoin_argsStandardScheme();
      }
    }

    private static class edgeJoin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<edgeJoin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edgeJoin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDGE_INFO_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.edgeInfoData = new EdgeInfoData();
                struct.edgeInfoData.read(iprot);
                struct.setEdgeInfoDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edgeJoin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.edgeInfoData != null) {
          oprot.writeFieldBegin(EDGE_INFO_DATA_FIELD_DESC);
          struct.edgeInfoData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edgeJoin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeJoin_argsTupleScheme getScheme() {
        return new edgeJoin_argsTupleScheme();
      }
    }

    private static class edgeJoin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<edgeJoin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edgeJoin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEdgeInfoData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEdgeInfoData()) {
          struct.edgeInfoData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edgeJoin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.edgeInfoData = new EdgeInfoData();
          struct.edgeInfoData.read(iprot);
          struct.setEdgeInfoDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class edgeJoin_result implements org.apache.thrift.TBase<edgeJoin_result, edgeJoin_result._Fields>, java.io.Serializable, Cloneable, Comparable<edgeJoin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edgeJoin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new edgeJoin_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new edgeJoin_resultTupleSchemeFactory();

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edgeJoin_result.class, metaDataMap);
    }

    public edgeJoin_result() {
    }

    public edgeJoin_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edgeJoin_result(edgeJoin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public edgeJoin_result deepCopy() {
      return new edgeJoin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public edgeJoin_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof edgeJoin_result)
        return this.equals((edgeJoin_result)that);
      return false;
    }

    public boolean equals(edgeJoin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (success);

      return hashCode;
    }

    @Override
    public int compareTo(edgeJoin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("edgeJoin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edgeJoin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeJoin_resultStandardScheme getScheme() {
        return new edgeJoin_resultStandardScheme();
      }
    }

    private static class edgeJoin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<edgeJoin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edgeJoin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edgeJoin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeByte(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edgeJoin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeJoin_resultTupleScheme getScheme() {
        return new edgeJoin_resultTupleScheme();
      }
    }

    private static class edgeJoin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<edgeJoin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edgeJoin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edgeJoin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class edgeLeave_args implements org.apache.thrift.TBase<edgeLeave_args, edgeLeave_args._Fields>, java.io.Serializable, Cloneable, Comparable<edgeLeave_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edgeLeave_args");

    private static final org.apache.thrift.protocol.TField EDGE_INFO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeInfoData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new edgeLeave_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new edgeLeave_argsTupleSchemeFactory();

    public EdgeInfoData edgeInfoData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGE_INFO_DATA((short)1, "edgeInfoData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDGE_INFO_DATA
            return EDGE_INFO_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDGE_INFO_DATA, new org.apache.thrift.meta_data.FieldMetaData("edgeInfoData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdgeInfoData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edgeLeave_args.class, metaDataMap);
    }

    public edgeLeave_args() {
    }

    public edgeLeave_args(
      EdgeInfoData edgeInfoData)
    {
      this();
      this.edgeInfoData = edgeInfoData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edgeLeave_args(edgeLeave_args other) {
      if (other.isSetEdgeInfoData()) {
        this.edgeInfoData = new EdgeInfoData(other.edgeInfoData);
      }
    }

    public edgeLeave_args deepCopy() {
      return new edgeLeave_args(this);
    }

    @Override
    public void clear() {
      this.edgeInfoData = null;
    }

    public EdgeInfoData getEdgeInfoData() {
      return this.edgeInfoData;
    }

    public edgeLeave_args setEdgeInfoData(EdgeInfoData edgeInfoData) {
      this.edgeInfoData = edgeInfoData;
      return this;
    }

    public void unsetEdgeInfoData() {
      this.edgeInfoData = null;
    }

    /** Returns true if field edgeInfoData is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeInfoData() {
      return this.edgeInfoData != null;
    }

    public void setEdgeInfoDataIsSet(boolean value) {
      if (!value) {
        this.edgeInfoData = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EDGE_INFO_DATA:
        if (value == null) {
          unsetEdgeInfoData();
        } else {
          setEdgeInfoData((EdgeInfoData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EDGE_INFO_DATA:
        return getEdgeInfoData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EDGE_INFO_DATA:
        return isSetEdgeInfoData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof edgeLeave_args)
        return this.equals((edgeLeave_args)that);
      return false;
    }

    public boolean equals(edgeLeave_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_edgeInfoData = true && this.isSetEdgeInfoData();
      boolean that_present_edgeInfoData = true && that.isSetEdgeInfoData();
      if (this_present_edgeInfoData || that_present_edgeInfoData) {
        if (!(this_present_edgeInfoData && that_present_edgeInfoData))
          return false;
        if (!this.edgeInfoData.equals(that.edgeInfoData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEdgeInfoData()) ? 131071 : 524287);
      if (isSetEdgeInfoData())
        hashCode = hashCode * 8191 + edgeInfoData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(edgeLeave_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEdgeInfoData()).compareTo(other.isSetEdgeInfoData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeInfoData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeInfoData, other.edgeInfoData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("edgeLeave_args(");
      boolean first = true;

      sb.append("edgeInfoData:");
      if (this.edgeInfoData == null) {
        sb.append("null");
      } else {
        sb.append(this.edgeInfoData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (edgeInfoData != null) {
        edgeInfoData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edgeLeave_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeLeave_argsStandardScheme getScheme() {
        return new edgeLeave_argsStandardScheme();
      }
    }

    private static class edgeLeave_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<edgeLeave_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edgeLeave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDGE_INFO_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.edgeInfoData = new EdgeInfoData();
                struct.edgeInfoData.read(iprot);
                struct.setEdgeInfoDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edgeLeave_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.edgeInfoData != null) {
          oprot.writeFieldBegin(EDGE_INFO_DATA_FIELD_DESC);
          struct.edgeInfoData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edgeLeave_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeLeave_argsTupleScheme getScheme() {
        return new edgeLeave_argsTupleScheme();
      }
    }

    private static class edgeLeave_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<edgeLeave_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edgeLeave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEdgeInfoData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEdgeInfoData()) {
          struct.edgeInfoData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edgeLeave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.edgeInfoData = new EdgeInfoData();
          struct.edgeInfoData.read(iprot);
          struct.setEdgeInfoDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class edgeLeave_result implements org.apache.thrift.TBase<edgeLeave_result, edgeLeave_result._Fields>, java.io.Serializable, Cloneable, Comparable<edgeLeave_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edgeLeave_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new edgeLeave_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new edgeLeave_resultTupleSchemeFactory();

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edgeLeave_result.class, metaDataMap);
    }

    public edgeLeave_result() {
    }

    public edgeLeave_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edgeLeave_result(edgeLeave_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public edgeLeave_result deepCopy() {
      return new edgeLeave_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public edgeLeave_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof edgeLeave_result)
        return this.equals((edgeLeave_result)that);
      return false;
    }

    public boolean equals(edgeLeave_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (success);

      return hashCode;
    }

    @Override
    public int compareTo(edgeLeave_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("edgeLeave_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edgeLeave_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeLeave_resultStandardScheme getScheme() {
        return new edgeLeave_resultStandardScheme();
      }
    }

    private static class edgeLeave_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<edgeLeave_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edgeLeave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edgeLeave_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeByte(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edgeLeave_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeLeave_resultTupleScheme getScheme() {
        return new edgeLeave_resultTupleScheme();
      }
    }

    private static class edgeLeave_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<edgeLeave_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edgeLeave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edgeLeave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminate_args implements org.apache.thrift.TBase<terminate_args, terminate_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminate_args");

    private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streamId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminate_argsTupleSchemeFactory();

    public java.lang.String streamId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_ID((short)1, "streamId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_ID
            return STREAM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("streamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminate_args.class, metaDataMap);
    }

    public terminate_args() {
    }

    public terminate_args(
      java.lang.String streamId)
    {
      this();
      this.streamId = streamId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminate_args(terminate_args other) {
      if (other.isSetStreamId()) {
        this.streamId = other.streamId;
      }
    }

    public terminate_args deepCopy() {
      return new terminate_args(this);
    }

    @Override
    public void clear() {
      this.streamId = null;
    }

    public java.lang.String getStreamId() {
      return this.streamId;
    }

    public terminate_args setStreamId(java.lang.String streamId) {
      this.streamId = streamId;
      return this;
    }

    public void unsetStreamId() {
      this.streamId = null;
    }

    /** Returns true if field streamId is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamId() {
      return this.streamId != null;
    }

    public void setStreamIdIsSet(boolean value) {
      if (!value) {
        this.streamId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STREAM_ID:
        if (value == null) {
          unsetStreamId();
        } else {
          setStreamId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_ID:
        return getStreamId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STREAM_ID:
        return isSetStreamId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminate_args)
        return this.equals((terminate_args)that);
      return false;
    }

    public boolean equals(terminate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_streamId = true && this.isSetStreamId();
      boolean that_present_streamId = true && that.isSetStreamId();
      if (this_present_streamId || that_present_streamId) {
        if (!(this_present_streamId && that_present_streamId))
          return false;
        if (!this.streamId.equals(that.streamId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStreamId()) ? 131071 : 524287);
      if (isSetStreamId())
        hashCode = hashCode * 8191 + streamId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStreamId()).compareTo(other.isSetStreamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamId, other.streamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminate_args(");
      boolean first = true;

      sb.append("streamId:");
      if (this.streamId == null) {
        sb.append("null");
      } else {
        sb.append(this.streamId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_argsStandardScheme getScheme() {
        return new terminate_argsStandardScheme();
      }
    }

    private static class terminate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamId = iprot.readString();
                struct.setStreamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamId != null) {
          oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
          oprot.writeString(struct.streamId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_argsTupleScheme getScheme() {
        return new terminate_argsTupleScheme();
      }
    }

    private static class terminate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStreamId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamId()) {
          oprot.writeString(struct.streamId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamId = iprot.readString();
          struct.setStreamIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminate_result implements org.apache.thrift.TBase<terminate_result, terminate_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminate_resultTupleSchemeFactory();

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminate_result.class, metaDataMap);
    }

    public terminate_result() {
    }

    public terminate_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminate_result(terminate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public terminate_result deepCopy() {
      return new terminate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public terminate_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminate_result)
        return this.equals((terminate_result)that);
      return false;
    }

    public boolean equals(terminate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (success);

      return hashCode;
    }

    @Override
    public int compareTo(terminate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_resultStandardScheme getScheme() {
        return new terminate_resultStandardScheme();
      }
    }

    private static class terminate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeByte(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminate_resultTupleScheme getScheme() {
        return new terminate_resultTupleScheme();
      }
    }

    private static class terminate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerStream_args implements org.apache.thrift.TBase<registerStream_args, registerStream_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerStream_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerStream_args");

    private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("streamMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField START_SEQUENCE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("startSequenceNumber", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerStream_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerStream_argsTupleSchemeFactory();

    public java.lang.String streamId; // required
    public StreamMetadata streamMetadata; // required
    public long startSequenceNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_ID((short)1, "streamId"),
      STREAM_METADATA((short)2, "streamMetadata"),
      START_SEQUENCE_NUMBER((short)3, "startSequenceNumber");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_ID
            return STREAM_ID;
          case 2: // STREAM_METADATA
            return STREAM_METADATA;
          case 3: // START_SEQUENCE_NUMBER
            return START_SEQUENCE_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTSEQUENCENUMBER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("streamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM_METADATA, new org.apache.thrift.meta_data.FieldMetaData("streamMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamMetadata.class)));
      tmpMap.put(_Fields.START_SEQUENCE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("startSequenceNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerStream_args.class, metaDataMap);
    }

    public registerStream_args() {
    }

    public registerStream_args(
      java.lang.String streamId,
      StreamMetadata streamMetadata,
      long startSequenceNumber)
    {
      this();
      this.streamId = streamId;
      this.streamMetadata = streamMetadata;
      this.startSequenceNumber = startSequenceNumber;
      setStartSequenceNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerStream_args(registerStream_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStreamId()) {
        this.streamId = other.streamId;
      }
      if (other.isSetStreamMetadata()) {
        this.streamMetadata = new StreamMetadata(other.streamMetadata);
      }
      this.startSequenceNumber = other.startSequenceNumber;
    }

    public registerStream_args deepCopy() {
      return new registerStream_args(this);
    }

    @Override
    public void clear() {
      this.streamId = null;
      this.streamMetadata = null;
      setStartSequenceNumberIsSet(false);
      this.startSequenceNumber = 0;
    }

    public java.lang.String getStreamId() {
      return this.streamId;
    }

    public registerStream_args setStreamId(java.lang.String streamId) {
      this.streamId = streamId;
      return this;
    }

    public void unsetStreamId() {
      this.streamId = null;
    }

    /** Returns true if field streamId is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamId() {
      return this.streamId != null;
    }

    public void setStreamIdIsSet(boolean value) {
      if (!value) {
        this.streamId = null;
      }
    }

    public StreamMetadata getStreamMetadata() {
      return this.streamMetadata;
    }

    public registerStream_args setStreamMetadata(StreamMetadata streamMetadata) {
      this.streamMetadata = streamMetadata;
      return this;
    }

    public void unsetStreamMetadata() {
      this.streamMetadata = null;
    }

    /** Returns true if field streamMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamMetadata() {
      return this.streamMetadata != null;
    }

    public void setStreamMetadataIsSet(boolean value) {
      if (!value) {
        this.streamMetadata = null;
      }
    }

    public long getStartSequenceNumber() {
      return this.startSequenceNumber;
    }

    public registerStream_args setStartSequenceNumber(long startSequenceNumber) {
      this.startSequenceNumber = startSequenceNumber;
      setStartSequenceNumberIsSet(true);
      return this;
    }

    public void unsetStartSequenceNumber() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTSEQUENCENUMBER_ISSET_ID);
    }

    /** Returns true if field startSequenceNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetStartSequenceNumber() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTSEQUENCENUMBER_ISSET_ID);
    }

    public void setStartSequenceNumberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTSEQUENCENUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STREAM_ID:
        if (value == null) {
          unsetStreamId();
        } else {
          setStreamId((java.lang.String)value);
        }
        break;

      case STREAM_METADATA:
        if (value == null) {
          unsetStreamMetadata();
        } else {
          setStreamMetadata((StreamMetadata)value);
        }
        break;

      case START_SEQUENCE_NUMBER:
        if (value == null) {
          unsetStartSequenceNumber();
        } else {
          setStartSequenceNumber((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_ID:
        return getStreamId();

      case STREAM_METADATA:
        return getStreamMetadata();

      case START_SEQUENCE_NUMBER:
        return getStartSequenceNumber();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STREAM_ID:
        return isSetStreamId();
      case STREAM_METADATA:
        return isSetStreamMetadata();
      case START_SEQUENCE_NUMBER:
        return isSetStartSequenceNumber();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerStream_args)
        return this.equals((registerStream_args)that);
      return false;
    }

    public boolean equals(registerStream_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_streamId = true && this.isSetStreamId();
      boolean that_present_streamId = true && that.isSetStreamId();
      if (this_present_streamId || that_present_streamId) {
        if (!(this_present_streamId && that_present_streamId))
          return false;
        if (!this.streamId.equals(that.streamId))
          return false;
      }

      boolean this_present_streamMetadata = true && this.isSetStreamMetadata();
      boolean that_present_streamMetadata = true && that.isSetStreamMetadata();
      if (this_present_streamMetadata || that_present_streamMetadata) {
        if (!(this_present_streamMetadata && that_present_streamMetadata))
          return false;
        if (!this.streamMetadata.equals(that.streamMetadata))
          return false;
      }

      boolean this_present_startSequenceNumber = true;
      boolean that_present_startSequenceNumber = true;
      if (this_present_startSequenceNumber || that_present_startSequenceNumber) {
        if (!(this_present_startSequenceNumber && that_present_startSequenceNumber))
          return false;
        if (this.startSequenceNumber != that.startSequenceNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStreamId()) ? 131071 : 524287);
      if (isSetStreamId())
        hashCode = hashCode * 8191 + streamId.hashCode();

      hashCode = hashCode * 8191 + ((isSetStreamMetadata()) ? 131071 : 524287);
      if (isSetStreamMetadata())
        hashCode = hashCode * 8191 + streamMetadata.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startSequenceNumber);

      return hashCode;
    }

    @Override
    public int compareTo(registerStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStreamId()).compareTo(other.isSetStreamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamId, other.streamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStreamMetadata()).compareTo(other.isSetStreamMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamMetadata, other.streamMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStartSequenceNumber()).compareTo(other.isSetStartSequenceNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartSequenceNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startSequenceNumber, other.startSequenceNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerStream_args(");
      boolean first = true;

      sb.append("streamId:");
      if (this.streamId == null) {
        sb.append("null");
      } else {
        sb.append(this.streamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamMetadata:");
      if (this.streamMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.streamMetadata);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startSequenceNumber:");
      sb.append(this.startSequenceNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (streamMetadata != null) {
        streamMetadata.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerStream_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerStream_argsStandardScheme getScheme() {
        return new registerStream_argsStandardScheme();
      }
    }

    private static class registerStream_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamId = iprot.readString();
                struct.setStreamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamMetadata = new StreamMetadata();
                struct.streamMetadata.read(iprot);
                struct.setStreamMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_SEQUENCE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startSequenceNumber = iprot.readI64();
                struct.setStartSequenceNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamId != null) {
          oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
          oprot.writeString(struct.streamId);
          oprot.writeFieldEnd();
        }
        if (struct.streamMetadata != null) {
          oprot.writeFieldBegin(STREAM_METADATA_FIELD_DESC);
          struct.streamMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_SEQUENCE_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.startSequenceNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerStream_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerStream_argsTupleScheme getScheme() {
        return new registerStream_argsTupleScheme();
      }
    }

    private static class registerStream_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStreamId()) {
          optionals.set(0);
        }
        if (struct.isSetStreamMetadata()) {
          optionals.set(1);
        }
        if (struct.isSetStartSequenceNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStreamId()) {
          oprot.writeString(struct.streamId);
        }
        if (struct.isSetStreamMetadata()) {
          struct.streamMetadata.write(oprot);
        }
        if (struct.isSetStartSequenceNumber()) {
          oprot.writeI64(struct.startSequenceNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.streamId = iprot.readString();
          struct.setStreamIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.streamMetadata = new StreamMetadata();
          struct.streamMetadata.read(iprot);
          struct.setStreamMetadataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startSequenceNumber = iprot.readI64();
          struct.setStartSequenceNumberIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerStream_result implements org.apache.thrift.TBase<registerStream_result, registerStream_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerStream_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerStream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerStream_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerStream_resultTupleSchemeFactory();

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerStream_result.class, metaDataMap);
    }

    public registerStream_result() {
    }

    public registerStream_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerStream_result(registerStream_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public registerStream_result deepCopy() {
      return new registerStream_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public registerStream_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerStream_result)
        return this.equals((registerStream_result)that);
      return false;
    }

    public boolean equals(registerStream_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (success);

      return hashCode;
    }

    @Override
    public int compareTo(registerStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerStream_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerStream_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerStream_resultStandardScheme getScheme() {
        return new registerStream_resultStandardScheme();
      }
    }

    private static class registerStream_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerStream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerStream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeByte(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerStream_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerStream_resultTupleScheme getScheme() {
        return new registerStream_resultTupleScheme();
      }
    }

    private static class registerStream_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerStream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class intentToWrite_args implements org.apache.thrift.TBase<intentToWrite_args, intentToWrite_args._Fields>, java.io.Serializable, Cloneable, Comparable<intentToWrite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("intentToWrite_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.BYTE, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new intentToWrite_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new intentToWrite_argsTupleSchemeFactory();

    public byte clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CLIENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(intentToWrite_args.class, metaDataMap);
    }

    public intentToWrite_args() {
    }

    public intentToWrite_args(
      byte clientId)
    {
      this();
      this.clientId = clientId;
      setClientIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public intentToWrite_args(intentToWrite_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.clientId = other.clientId;
    }

    public intentToWrite_args deepCopy() {
      return new intentToWrite_args(this);
    }

    @Override
    public void clear() {
      setClientIdIsSet(false);
      this.clientId = 0;
    }

    public byte getClientId() {
      return this.clientId;
    }

    public intentToWrite_args setClientId(byte clientId) {
      this.clientId = clientId;
      setClientIdIsSet(true);
      return this;
    }

    public void unsetClientId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    public void setClientIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof intentToWrite_args)
        return this.equals((intentToWrite_args)that);
      return false;
    }

    public boolean equals(intentToWrite_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clientId = true;
      boolean that_present_clientId = true;
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (this.clientId != that.clientId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (clientId);

      return hashCode;
    }

    @Override
    public int compareTo(intentToWrite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("intentToWrite_args(");
      boolean first = true;

      sb.append("clientId:");
      sb.append(this.clientId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class intentToWrite_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public intentToWrite_argsStandardScheme getScheme() {
        return new intentToWrite_argsStandardScheme();
      }
    }

    private static class intentToWrite_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<intentToWrite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, intentToWrite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.clientId = iprot.readByte();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, intentToWrite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeByte(struct.clientId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class intentToWrite_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public intentToWrite_argsTupleScheme getScheme() {
        return new intentToWrite_argsTupleScheme();
      }
    }

    private static class intentToWrite_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<intentToWrite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, intentToWrite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientId()) {
          oprot.writeByte(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, intentToWrite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientId = iprot.readByte();
          struct.setClientIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class intentToWrite_result implements org.apache.thrift.TBase<intentToWrite_result, intentToWrite_result._Fields>, java.io.Serializable, Cloneable, Comparable<intentToWrite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("intentToWrite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new intentToWrite_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new intentToWrite_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(intentToWrite_result.class, metaDataMap);
    }

    public intentToWrite_result() {
    }

    public intentToWrite_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public intentToWrite_result(intentToWrite_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public intentToWrite_result deepCopy() {
      return new intentToWrite_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public intentToWrite_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof intentToWrite_result)
        return this.equals((intentToWrite_result)that);
      return false;
    }

    public boolean equals(intentToWrite_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(intentToWrite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("intentToWrite_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class intentToWrite_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public intentToWrite_resultStandardScheme getScheme() {
        return new intentToWrite_resultStandardScheme();
      }
    }

    private static class intentToWrite_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<intentToWrite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, intentToWrite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, intentToWrite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class intentToWrite_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public intentToWrite_resultTupleScheme getScheme() {
        return new intentToWrite_resultTupleScheme();
      }
    }

    private static class intentToWrite_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<intentToWrite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, intentToWrite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, intentToWrite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStreamMetadata_args implements org.apache.thrift.TBase<getStreamMetadata_args, getStreamMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStreamMetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamMetadata_args");

    private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHECK_NEIGHBORS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkNeighbors", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField CHECK_BUDDIES_FIELD_DESC = new org.apache.thrift.protocol.TField("checkBuddies", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField FORCE_LATEST_FIELD_DESC = new org.apache.thrift.protocol.TField("forceLatest", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStreamMetadata_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStreamMetadata_argsTupleSchemeFactory();

    public java.lang.String streamId; // required
    public boolean checkNeighbors; // required
    public boolean checkBuddies; // required
    public boolean forceLatest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_ID((short)1, "streamId"),
      CHECK_NEIGHBORS((short)2, "checkNeighbors"),
      CHECK_BUDDIES((short)3, "checkBuddies"),
      FORCE_LATEST((short)4, "forceLatest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_ID
            return STREAM_ID;
          case 2: // CHECK_NEIGHBORS
            return CHECK_NEIGHBORS;
          case 3: // CHECK_BUDDIES
            return CHECK_BUDDIES;
          case 4: // FORCE_LATEST
            return FORCE_LATEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHECKNEIGHBORS_ISSET_ID = 0;
    private static final int __CHECKBUDDIES_ISSET_ID = 1;
    private static final int __FORCELATEST_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("streamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHECK_NEIGHBORS, new org.apache.thrift.meta_data.FieldMetaData("checkNeighbors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CHECK_BUDDIES, new org.apache.thrift.meta_data.FieldMetaData("checkBuddies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FORCE_LATEST, new org.apache.thrift.meta_data.FieldMetaData("forceLatest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamMetadata_args.class, metaDataMap);
    }

    public getStreamMetadata_args() {
    }

    public getStreamMetadata_args(
      java.lang.String streamId,
      boolean checkNeighbors,
      boolean checkBuddies,
      boolean forceLatest)
    {
      this();
      this.streamId = streamId;
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
      this.forceLatest = forceLatest;
      setForceLatestIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamMetadata_args(getStreamMetadata_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStreamId()) {
        this.streamId = other.streamId;
      }
      this.checkNeighbors = other.checkNeighbors;
      this.checkBuddies = other.checkBuddies;
      this.forceLatest = other.forceLatest;
    }

    public getStreamMetadata_args deepCopy() {
      return new getStreamMetadata_args(this);
    }

    @Override
    public void clear() {
      this.streamId = null;
      setCheckNeighborsIsSet(false);
      this.checkNeighbors = false;
      setCheckBuddiesIsSet(false);
      this.checkBuddies = false;
      setForceLatestIsSet(false);
      this.forceLatest = false;
    }

    public java.lang.String getStreamId() {
      return this.streamId;
    }

    public getStreamMetadata_args setStreamId(java.lang.String streamId) {
      this.streamId = streamId;
      return this;
    }

    public void unsetStreamId() {
      this.streamId = null;
    }

    /** Returns true if field streamId is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamId() {
      return this.streamId != null;
    }

    public void setStreamIdIsSet(boolean value) {
      if (!value) {
        this.streamId = null;
      }
    }

    public boolean isCheckNeighbors() {
      return this.checkNeighbors;
    }

    public getStreamMetadata_args setCheckNeighbors(boolean checkNeighbors) {
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      return this;
    }

    public void unsetCheckNeighbors() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    /** Returns true if field checkNeighbors is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckNeighbors() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    public void setCheckNeighborsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID, value);
    }

    public boolean isCheckBuddies() {
      return this.checkBuddies;
    }

    public getStreamMetadata_args setCheckBuddies(boolean checkBuddies) {
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
      return this;
    }

    public void unsetCheckBuddies() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    /** Returns true if field checkBuddies is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckBuddies() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    public void setCheckBuddiesIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID, value);
    }

    public boolean isForceLatest() {
      return this.forceLatest;
    }

    public getStreamMetadata_args setForceLatest(boolean forceLatest) {
      this.forceLatest = forceLatest;
      setForceLatestIsSet(true);
      return this;
    }

    public void unsetForceLatest() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORCELATEST_ISSET_ID);
    }

    /** Returns true if field forceLatest is set (has been assigned a value) and false otherwise */
    public boolean isSetForceLatest() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORCELATEST_ISSET_ID);
    }

    public void setForceLatestIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORCELATEST_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STREAM_ID:
        if (value == null) {
          unsetStreamId();
        } else {
          setStreamId((java.lang.String)value);
        }
        break;

      case CHECK_NEIGHBORS:
        if (value == null) {
          unsetCheckNeighbors();
        } else {
          setCheckNeighbors((java.lang.Boolean)value);
        }
        break;

      case CHECK_BUDDIES:
        if (value == null) {
          unsetCheckBuddies();
        } else {
          setCheckBuddies((java.lang.Boolean)value);
        }
        break;

      case FORCE_LATEST:
        if (value == null) {
          unsetForceLatest();
        } else {
          setForceLatest((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_ID:
        return getStreamId();

      case CHECK_NEIGHBORS:
        return isCheckNeighbors();

      case CHECK_BUDDIES:
        return isCheckBuddies();

      case FORCE_LATEST:
        return isForceLatest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STREAM_ID:
        return isSetStreamId();
      case CHECK_NEIGHBORS:
        return isSetCheckNeighbors();
      case CHECK_BUDDIES:
        return isSetCheckBuddies();
      case FORCE_LATEST:
        return isSetForceLatest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamMetadata_args)
        return this.equals((getStreamMetadata_args)that);
      return false;
    }

    public boolean equals(getStreamMetadata_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_streamId = true && this.isSetStreamId();
      boolean that_present_streamId = true && that.isSetStreamId();
      if (this_present_streamId || that_present_streamId) {
        if (!(this_present_streamId && that_present_streamId))
          return false;
        if (!this.streamId.equals(that.streamId))
          return false;
      }

      boolean this_present_checkNeighbors = true;
      boolean that_present_checkNeighbors = true;
      if (this_present_checkNeighbors || that_present_checkNeighbors) {
        if (!(this_present_checkNeighbors && that_present_checkNeighbors))
          return false;
        if (this.checkNeighbors != that.checkNeighbors)
          return false;
      }

      boolean this_present_checkBuddies = true;
      boolean that_present_checkBuddies = true;
      if (this_present_checkBuddies || that_present_checkBuddies) {
        if (!(this_present_checkBuddies && that_present_checkBuddies))
          return false;
        if (this.checkBuddies != that.checkBuddies)
          return false;
      }

      boolean this_present_forceLatest = true;
      boolean that_present_forceLatest = true;
      if (this_present_forceLatest || that_present_forceLatest) {
        if (!(this_present_forceLatest && that_present_forceLatest))
          return false;
        if (this.forceLatest != that.forceLatest)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStreamId()) ? 131071 : 524287);
      if (isSetStreamId())
        hashCode = hashCode * 8191 + streamId.hashCode();

      hashCode = hashCode * 8191 + ((checkNeighbors) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((checkBuddies) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((forceLatest) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getStreamMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStreamId()).compareTo(other.isSetStreamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamId, other.streamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckNeighbors()).compareTo(other.isSetCheckNeighbors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckNeighbors()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkNeighbors, other.checkNeighbors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckBuddies()).compareTo(other.isSetCheckBuddies());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckBuddies()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkBuddies, other.checkBuddies);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetForceLatest()).compareTo(other.isSetForceLatest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForceLatest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forceLatest, other.forceLatest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStreamMetadata_args(");
      boolean first = true;

      sb.append("streamId:");
      if (this.streamId == null) {
        sb.append("null");
      } else {
        sb.append(this.streamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkNeighbors:");
      sb.append(this.checkNeighbors);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkBuddies:");
      sb.append(this.checkBuddies);
      first = false;
      if (!first) sb.append(", ");
      sb.append("forceLatest:");
      sb.append(this.forceLatest);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamMetadata_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStreamMetadata_argsStandardScheme getScheme() {
        return new getStreamMetadata_argsStandardScheme();
      }
    }

    private static class getStreamMetadata_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStreamMetadata_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamId = iprot.readString();
                struct.setStreamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHECK_NEIGHBORS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkNeighbors = iprot.readBool();
                struct.setCheckNeighborsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHECK_BUDDIES
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkBuddies = iprot.readBool();
                struct.setCheckBuddiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FORCE_LATEST
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.forceLatest = iprot.readBool();
                struct.setForceLatestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamMetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamId != null) {
          oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
          oprot.writeString(struct.streamId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHECK_NEIGHBORS_FIELD_DESC);
        oprot.writeBool(struct.checkNeighbors);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHECK_BUDDIES_FIELD_DESC);
        oprot.writeBool(struct.checkBuddies);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FORCE_LATEST_FIELD_DESC);
        oprot.writeBool(struct.forceLatest);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamMetadata_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStreamMetadata_argsTupleScheme getScheme() {
        return new getStreamMetadata_argsTupleScheme();
      }
    }

    private static class getStreamMetadata_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStreamMetadata_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStreamId()) {
          optionals.set(0);
        }
        if (struct.isSetCheckNeighbors()) {
          optionals.set(1);
        }
        if (struct.isSetCheckBuddies()) {
          optionals.set(2);
        }
        if (struct.isSetForceLatest()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetStreamId()) {
          oprot.writeString(struct.streamId);
        }
        if (struct.isSetCheckNeighbors()) {
          oprot.writeBool(struct.checkNeighbors);
        }
        if (struct.isSetCheckBuddies()) {
          oprot.writeBool(struct.checkBuddies);
        }
        if (struct.isSetForceLatest()) {
          oprot.writeBool(struct.forceLatest);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.streamId = iprot.readString();
          struct.setStreamIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.checkNeighbors = iprot.readBool();
          struct.setCheckNeighborsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.checkBuddies = iprot.readBool();
          struct.setCheckBuddiesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.forceLatest = iprot.readBool();
          struct.setForceLatestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStreamMetadata_result implements org.apache.thrift.TBase<getStreamMetadata_result, getStreamMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStreamMetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamMetadata_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStreamMetadata_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStreamMetadata_resultTupleSchemeFactory();

    public StreamMetadataInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamMetadataInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamMetadata_result.class, metaDataMap);
    }

    public getStreamMetadata_result() {
    }

    public getStreamMetadata_result(
      StreamMetadataInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamMetadata_result(getStreamMetadata_result other) {
      if (other.isSetSuccess()) {
        this.success = new StreamMetadataInfo(other.success);
      }
    }

    public getStreamMetadata_result deepCopy() {
      return new getStreamMetadata_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StreamMetadataInfo getSuccess() {
      return this.success;
    }

    public getStreamMetadata_result setSuccess(StreamMetadataInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StreamMetadataInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamMetadata_result)
        return this.equals((getStreamMetadata_result)that);
      return false;
    }

    public boolean equals(getStreamMetadata_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getStreamMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStreamMetadata_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamMetadata_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStreamMetadata_resultStandardScheme getScheme() {
        return new getStreamMetadata_resultStandardScheme();
      }
    }

    private static class getStreamMetadata_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStreamMetadata_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StreamMetadataInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamMetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamMetadata_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStreamMetadata_resultTupleScheme getScheme() {
        return new getStreamMetadata_resultTupleScheme();
      }
    }

    private static class getStreamMetadata_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStreamMetadata_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StreamMetadataInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStreamMetadataFromOwner_args implements org.apache.thrift.TBase<getStreamMetadataFromOwner_args, getStreamMetadataFromOwner_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStreamMetadataFromOwner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamMetadataFromOwner_args");

    private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streamId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStreamMetadataFromOwner_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStreamMetadataFromOwner_argsTupleSchemeFactory();

    public java.lang.String streamId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_ID((short)1, "streamId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_ID
            return STREAM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("streamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamMetadataFromOwner_args.class, metaDataMap);
    }

    public getStreamMetadataFromOwner_args() {
    }

    public getStreamMetadataFromOwner_args(
      java.lang.String streamId)
    {
      this();
      this.streamId = streamId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamMetadataFromOwner_args(getStreamMetadataFromOwner_args other) {
      if (other.isSetStreamId()) {
        this.streamId = other.streamId;
      }
    }

    public getStreamMetadataFromOwner_args deepCopy() {
      return new getStreamMetadataFromOwner_args(this);
    }

    @Override
    public void clear() {
      this.streamId = null;
    }

    public java.lang.String getStreamId() {
      return this.streamId;
    }

    public getStreamMetadataFromOwner_args setStreamId(java.lang.String streamId) {
      this.streamId = streamId;
      return this;
    }

    public void unsetStreamId() {
      this.streamId = null;
    }

    /** Returns true if field streamId is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamId() {
      return this.streamId != null;
    }

    public void setStreamIdIsSet(boolean value) {
      if (!value) {
        this.streamId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STREAM_ID:
        if (value == null) {
          unsetStreamId();
        } else {
          setStreamId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_ID:
        return getStreamId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STREAM_ID:
        return isSetStreamId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamMetadataFromOwner_args)
        return this.equals((getStreamMetadataFromOwner_args)that);
      return false;
    }

    public boolean equals(getStreamMetadataFromOwner_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_streamId = true && this.isSetStreamId();
      boolean that_present_streamId = true && that.isSetStreamId();
      if (this_present_streamId || that_present_streamId) {
        if (!(this_present_streamId && that_present_streamId))
          return false;
        if (!this.streamId.equals(that.streamId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStreamId()) ? 131071 : 524287);
      if (isSetStreamId())
        hashCode = hashCode * 8191 + streamId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getStreamMetadataFromOwner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStreamId()).compareTo(other.isSetStreamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamId, other.streamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStreamMetadataFromOwner_args(");
      boolean first = true;

      sb.append("streamId:");
      if (this.streamId == null) {
        sb.append("null");
      } else {
        sb.append(this.streamId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamMetadataFromOwner_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStreamMetadataFromOwner_argsStandardScheme getScheme() {
        return new getStreamMetadataFromOwner_argsStandardScheme();
      }
    }

    private static class getStreamMetadataFromOwner_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStreamMetadataFromOwner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamMetadataFromOwner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamId = iprot.readString();
                struct.setStreamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamMetadataFromOwner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamId != null) {
          oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
          oprot.writeString(struct.streamId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamMetadataFromOwner_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStreamMetadataFromOwner_argsTupleScheme getScheme() {
        return new getStreamMetadataFromOwner_argsTupleScheme();
      }
    }

    private static class getStreamMetadataFromOwner_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStreamMetadataFromOwner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamMetadataFromOwner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStreamId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamId()) {
          oprot.writeString(struct.streamId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamMetadataFromOwner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamId = iprot.readString();
          struct.setStreamIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStreamMetadataFromOwner_result implements org.apache.thrift.TBase<getStreamMetadataFromOwner_result, getStreamMetadataFromOwner_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStreamMetadataFromOwner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamMetadataFromOwner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStreamMetadataFromOwner_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStreamMetadataFromOwner_resultTupleSchemeFactory();

    public StreamMetadata success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamMetadata.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamMetadataFromOwner_result.class, metaDataMap);
    }

    public getStreamMetadataFromOwner_result() {
    }

    public getStreamMetadataFromOwner_result(
      StreamMetadata success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamMetadataFromOwner_result(getStreamMetadataFromOwner_result other) {
      if (other.isSetSuccess()) {
        this.success = new StreamMetadata(other.success);
      }
    }

    public getStreamMetadataFromOwner_result deepCopy() {
      return new getStreamMetadataFromOwner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StreamMetadata getSuccess() {
      return this.success;
    }

    public getStreamMetadataFromOwner_result setSuccess(StreamMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StreamMetadata)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamMetadataFromOwner_result)
        return this.equals((getStreamMetadataFromOwner_result)that);
      return false;
    }

    public boolean equals(getStreamMetadataFromOwner_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getStreamMetadataFromOwner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStreamMetadataFromOwner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamMetadataFromOwner_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStreamMetadataFromOwner_resultStandardScheme getScheme() {
        return new getStreamMetadataFromOwner_resultStandardScheme();
      }
    }

    private static class getStreamMetadataFromOwner_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStreamMetadataFromOwner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamMetadataFromOwner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StreamMetadata();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamMetadataFromOwner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamMetadataFromOwner_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStreamMetadataFromOwner_resultTupleScheme getScheme() {
        return new getStreamMetadataFromOwner_resultTupleScheme();
      }
    }

    private static class getStreamMetadataFromOwner_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStreamMetadataFromOwner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamMetadataFromOwner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamMetadataFromOwner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StreamMetadata();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getWriteLocations_args implements org.apache.thrift.TBase<getWriteLocations_args, getWriteLocations_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWriteLocations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWriteLocations_args");

    private static final org.apache.thrift.protocol.TField DATA_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("dataLength", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField BLACK_LISTED_FOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("blackListedFogs", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField IS_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("isEdge", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWriteLocations_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWriteLocations_argsTupleSchemeFactory();

    public byte dataLength; // required
    public Metadata metadata; // required
    public java.util.List<java.lang.Short> blackListedFogs; // required
    public boolean isEdge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_LENGTH((short)1, "dataLength"),
      METADATA((short)2, "metadata"),
      BLACK_LISTED_FOGS((short)3, "blackListedFogs"),
      IS_EDGE((short)4, "isEdge");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_LENGTH
            return DATA_LENGTH;
          case 2: // METADATA
            return METADATA;
          case 3: // BLACK_LISTED_FOGS
            return BLACK_LISTED_FOGS;
          case 4: // IS_EDGE
            return IS_EDGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATALENGTH_ISSET_ID = 0;
    private static final int __ISEDGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("dataLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metadata.class)));
      tmpMap.put(_Fields.BLACK_LISTED_FOGS, new org.apache.thrift.meta_data.FieldMetaData("blackListedFogs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
      tmpMap.put(_Fields.IS_EDGE, new org.apache.thrift.meta_data.FieldMetaData("isEdge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWriteLocations_args.class, metaDataMap);
    }

    public getWriteLocations_args() {
    }

    public getWriteLocations_args(
      byte dataLength,
      Metadata metadata,
      java.util.List<java.lang.Short> blackListedFogs,
      boolean isEdge)
    {
      this();
      this.dataLength = dataLength;
      setDataLengthIsSet(true);
      this.metadata = metadata;
      this.blackListedFogs = blackListedFogs;
      this.isEdge = isEdge;
      setIsEdgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWriteLocations_args(getWriteLocations_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dataLength = other.dataLength;
      if (other.isSetMetadata()) {
        this.metadata = new Metadata(other.metadata);
      }
      if (other.isSetBlackListedFogs()) {
        java.util.List<java.lang.Short> __this__blackListedFogs = new java.util.ArrayList<java.lang.Short>(other.blackListedFogs);
        this.blackListedFogs = __this__blackListedFogs;
      }
      this.isEdge = other.isEdge;
    }

    public getWriteLocations_args deepCopy() {
      return new getWriteLocations_args(this);
    }

    @Override
    public void clear() {
      setDataLengthIsSet(false);
      this.dataLength = 0;
      this.metadata = null;
      this.blackListedFogs = null;
      setIsEdgeIsSet(false);
      this.isEdge = false;
    }

    public byte getDataLength() {
      return this.dataLength;
    }

    public getWriteLocations_args setDataLength(byte dataLength) {
      this.dataLength = dataLength;
      setDataLengthIsSet(true);
      return this;
    }

    public void unsetDataLength() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATALENGTH_ISSET_ID);
    }

    /** Returns true if field dataLength is set (has been assigned a value) and false otherwise */
    public boolean isSetDataLength() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATALENGTH_ISSET_ID);
    }

    public void setDataLengthIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATALENGTH_ISSET_ID, value);
    }

    public Metadata getMetadata() {
      return this.metadata;
    }

    public getWriteLocations_args setMetadata(Metadata metadata) {
      this.metadata = metadata;
      return this;
    }

    public void unsetMetadata() {
      this.metadata = null;
    }

    /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadata() {
      return this.metadata != null;
    }

    public void setMetadataIsSet(boolean value) {
      if (!value) {
        this.metadata = null;
      }
    }

    public int getBlackListedFogsSize() {
      return (this.blackListedFogs == null) ? 0 : this.blackListedFogs.size();
    }

    public java.util.Iterator<java.lang.Short> getBlackListedFogsIterator() {
      return (this.blackListedFogs == null) ? null : this.blackListedFogs.iterator();
    }

    public void addToBlackListedFogs(short elem) {
      if (this.blackListedFogs == null) {
        this.blackListedFogs = new java.util.ArrayList<java.lang.Short>();
      }
      this.blackListedFogs.add(elem);
    }

    public java.util.List<java.lang.Short> getBlackListedFogs() {
      return this.blackListedFogs;
    }

    public getWriteLocations_args setBlackListedFogs(java.util.List<java.lang.Short> blackListedFogs) {
      this.blackListedFogs = blackListedFogs;
      return this;
    }

    public void unsetBlackListedFogs() {
      this.blackListedFogs = null;
    }

    /** Returns true if field blackListedFogs is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackListedFogs() {
      return this.blackListedFogs != null;
    }

    public void setBlackListedFogsIsSet(boolean value) {
      if (!value) {
        this.blackListedFogs = null;
      }
    }

    public boolean isIsEdge() {
      return this.isEdge;
    }

    public getWriteLocations_args setIsEdge(boolean isEdge) {
      this.isEdge = isEdge;
      setIsEdgeIsSet(true);
      return this;
    }

    public void unsetIsEdge() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISEDGE_ISSET_ID);
    }

    /** Returns true if field isEdge is set (has been assigned a value) and false otherwise */
    public boolean isSetIsEdge() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISEDGE_ISSET_ID);
    }

    public void setIsEdgeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISEDGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DATA_LENGTH:
        if (value == null) {
          unsetDataLength();
        } else {
          setDataLength((java.lang.Byte)value);
        }
        break;

      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          setMetadata((Metadata)value);
        }
        break;

      case BLACK_LISTED_FOGS:
        if (value == null) {
          unsetBlackListedFogs();
        } else {
          setBlackListedFogs((java.util.List<java.lang.Short>)value);
        }
        break;

      case IS_EDGE:
        if (value == null) {
          unsetIsEdge();
        } else {
          setIsEdge((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_LENGTH:
        return getDataLength();

      case METADATA:
        return getMetadata();

      case BLACK_LISTED_FOGS:
        return getBlackListedFogs();

      case IS_EDGE:
        return isIsEdge();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DATA_LENGTH:
        return isSetDataLength();
      case METADATA:
        return isSetMetadata();
      case BLACK_LISTED_FOGS:
        return isSetBlackListedFogs();
      case IS_EDGE:
        return isSetIsEdge();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getWriteLocations_args)
        return this.equals((getWriteLocations_args)that);
      return false;
    }

    public boolean equals(getWriteLocations_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dataLength = true;
      boolean that_present_dataLength = true;
      if (this_present_dataLength || that_present_dataLength) {
        if (!(this_present_dataLength && that_present_dataLength))
          return false;
        if (this.dataLength != that.dataLength)
          return false;
      }

      boolean this_present_metadata = true && this.isSetMetadata();
      boolean that_present_metadata = true && that.isSetMetadata();
      if (this_present_metadata || that_present_metadata) {
        if (!(this_present_metadata && that_present_metadata))
          return false;
        if (!this.metadata.equals(that.metadata))
          return false;
      }

      boolean this_present_blackListedFogs = true && this.isSetBlackListedFogs();
      boolean that_present_blackListedFogs = true && that.isSetBlackListedFogs();
      if (this_present_blackListedFogs || that_present_blackListedFogs) {
        if (!(this_present_blackListedFogs && that_present_blackListedFogs))
          return false;
        if (!this.blackListedFogs.equals(that.blackListedFogs))
          return false;
      }

      boolean this_present_isEdge = true;
      boolean that_present_isEdge = true;
      if (this_present_isEdge || that_present_isEdge) {
        if (!(this_present_isEdge && that_present_isEdge))
          return false;
        if (this.isEdge != that.isEdge)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (dataLength);

      hashCode = hashCode * 8191 + ((isSetMetadata()) ? 131071 : 524287);
      if (isSetMetadata())
        hashCode = hashCode * 8191 + metadata.hashCode();

      hashCode = hashCode * 8191 + ((isSetBlackListedFogs()) ? 131071 : 524287);
      if (isSetBlackListedFogs())
        hashCode = hashCode * 8191 + blackListedFogs.hashCode();

      hashCode = hashCode * 8191 + ((isEdge) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getWriteLocations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDataLength()).compareTo(other.isSetDataLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataLength, other.dataLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBlackListedFogs()).compareTo(other.isSetBlackListedFogs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackListedFogs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackListedFogs, other.blackListedFogs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIsEdge()).compareTo(other.isSetIsEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEdge, other.isEdge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getWriteLocations_args(");
      boolean first = true;

      sb.append("dataLength:");
      sb.append(this.dataLength);
      first = false;
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blackListedFogs:");
      if (this.blackListedFogs == null) {
        sb.append("null");
      } else {
        sb.append(this.blackListedFogs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isEdge:");
      sb.append(this.isEdge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (metadata != null) {
        metadata.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWriteLocations_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWriteLocations_argsStandardScheme getScheme() {
        return new getWriteLocations_argsStandardScheme();
      }
    }

    private static class getWriteLocations_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getWriteLocations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWriteLocations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.dataLength = iprot.readByte();
                struct.setDataLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.metadata = new Metadata();
                struct.metadata.read(iprot);
                struct.setMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BLACK_LISTED_FOGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                  struct.blackListedFogs = new java.util.ArrayList<java.lang.Short>(_list134.size);
                  short _elem135;
                  for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                  {
                    _elem135 = iprot.readI16();
                    struct.blackListedFogs.add(_elem135);
                  }
                  iprot.readListEnd();
                }
                struct.setBlackListedFogsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isEdge = iprot.readBool();
                struct.setIsEdgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWriteLocations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATA_LENGTH_FIELD_DESC);
        oprot.writeByte(struct.dataLength);
        oprot.writeFieldEnd();
        if (struct.metadata != null) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          struct.metadata.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.blackListedFogs != null) {
          oprot.writeFieldBegin(BLACK_LISTED_FOGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.blackListedFogs.size()));
            for (short _iter137 : struct.blackListedFogs)
            {
              oprot.writeI16(_iter137);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_EDGE_FIELD_DESC);
        oprot.writeBool(struct.isEdge);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWriteLocations_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWriteLocations_argsTupleScheme getScheme() {
        return new getWriteLocations_argsTupleScheme();
      }
    }

    private static class getWriteLocations_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getWriteLocations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWriteLocations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDataLength()) {
          optionals.set(0);
        }
        if (struct.isSetMetadata()) {
          optionals.set(1);
        }
        if (struct.isSetBlackListedFogs()) {
          optionals.set(2);
        }
        if (struct.isSetIsEdge()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDataLength()) {
          oprot.writeByte(struct.dataLength);
        }
        if (struct.isSetMetadata()) {
          struct.metadata.write(oprot);
        }
        if (struct.isSetBlackListedFogs()) {
          {
            oprot.writeI32(struct.blackListedFogs.size());
            for (short _iter138 : struct.blackListedFogs)
            {
              oprot.writeI16(_iter138);
            }
          }
        }
        if (struct.isSetIsEdge()) {
          oprot.writeBool(struct.isEdge);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWriteLocations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.dataLength = iprot.readByte();
          struct.setDataLengthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.metadata = new Metadata();
          struct.metadata.read(iprot);
          struct.setMetadataIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
            struct.blackListedFogs = new java.util.ArrayList<java.lang.Short>(_list139.size);
            short _elem140;
            for (int _i141 = 0; _i141 < _list139.size; ++_i141)
            {
              _elem140 = iprot.readI16();
              struct.blackListedFogs.add(_elem140);
            }
          }
          struct.setBlackListedFogsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.isEdge = iprot.readBool();
          struct.setIsEdgeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getWriteLocations_result implements org.apache.thrift.TBase<getWriteLocations_result, getWriteLocations_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWriteLocations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWriteLocations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWriteLocations_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWriteLocations_resultTupleSchemeFactory();

    public java.util.List<WritableFogData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WritableFogData.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWriteLocations_result.class, metaDataMap);
    }

    public getWriteLocations_result() {
    }

    public getWriteLocations_result(
      java.util.List<WritableFogData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWriteLocations_result(getWriteLocations_result other) {
      if (other.isSetSuccess()) {
        java.util.List<WritableFogData> __this__success = new java.util.ArrayList<WritableFogData>(other.success.size());
        for (WritableFogData other_element : other.success) {
          __this__success.add(new WritableFogData(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWriteLocations_result deepCopy() {
      return new getWriteLocations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WritableFogData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WritableFogData elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<WritableFogData>();
      }
      this.success.add(elem);
    }

    public java.util.List<WritableFogData> getSuccess() {
      return this.success;
    }

    public getWriteLocations_result setSuccess(java.util.List<WritableFogData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<WritableFogData>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getWriteLocations_result)
        return this.equals((getWriteLocations_result)that);
      return false;
    }

    public boolean equals(getWriteLocations_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getWriteLocations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getWriteLocations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWriteLocations_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWriteLocations_resultStandardScheme getScheme() {
        return new getWriteLocations_resultStandardScheme();
      }
    }

    private static class getWriteLocations_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getWriteLocations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWriteLocations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<WritableFogData>(_list142.size);
                  WritableFogData _elem143;
                  for (int _i144 = 0; _i144 < _list142.size; ++_i144)
                  {
                    _elem143 = new WritableFogData();
                    _elem143.read(iprot);
                    struct.success.add(_elem143);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWriteLocations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WritableFogData _iter145 : struct.success)
            {
              _iter145.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWriteLocations_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWriteLocations_resultTupleScheme getScheme() {
        return new getWriteLocations_resultTupleScheme();
      }
    }

    private static class getWriteLocations_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getWriteLocations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWriteLocations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WritableFogData _iter146 : struct.success)
            {
              _iter146.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWriteLocations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list147 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<WritableFogData>(_list147.size);
            WritableFogData _elem148;
            for (int _i149 = 0; _i149 < _list147.size; ++_i149)
            {
              _elem148 = new WritableFogData();
              _elem148.read(iprot);
              struct.success.add(_elem148);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class write_args implements org.apache.thrift.TBase<write_args, write_args._Fields>, java.io.Serializable, Cloneable, Comparable<write_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("write_args");

    private static final org.apache.thrift.protocol.TField MB_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mbMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("preference", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new write_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new write_argsTupleSchemeFactory();

    public Metadata mbMetadata; // required
    public java.nio.ByteBuffer data; // required
    /**
     * 
     * @see WritePreference
     */
    public WritePreference preference; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MB_METADATA((short)1, "mbMetadata"),
      DATA((short)2, "data"),
      /**
       * 
       * @see WritePreference
       */
      PREFERENCE((short)3, "preference");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MB_METADATA
            return MB_METADATA;
          case 2: // DATA
            return DATA;
          case 3: // PREFERENCE
            return PREFERENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MB_METADATA, new org.apache.thrift.meta_data.FieldMetaData("mbMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metadata.class)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.PREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("preference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WritePreference.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(write_args.class, metaDataMap);
    }

    public write_args() {
    }

    public write_args(
      Metadata mbMetadata,
      java.nio.ByteBuffer data,
      WritePreference preference)
    {
      this();
      this.mbMetadata = mbMetadata;
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
      this.preference = preference;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public write_args(write_args other) {
      if (other.isSetMbMetadata()) {
        this.mbMetadata = new Metadata(other.mbMetadata);
      }
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
      }
      if (other.isSetPreference()) {
        this.preference = other.preference;
      }
    }

    public write_args deepCopy() {
      return new write_args(this);
    }

    @Override
    public void clear() {
      this.mbMetadata = null;
      this.data = null;
      this.preference = null;
    }

    public Metadata getMbMetadata() {
      return this.mbMetadata;
    }

    public write_args setMbMetadata(Metadata mbMetadata) {
      this.mbMetadata = mbMetadata;
      return this;
    }

    public void unsetMbMetadata() {
      this.mbMetadata = null;
    }

    /** Returns true if field mbMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMbMetadata() {
      return this.mbMetadata != null;
    }

    public void setMbMetadataIsSet(boolean value) {
      if (!value) {
        this.mbMetadata = null;
      }
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public java.nio.ByteBuffer bufferForData() {
      return org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    public write_args setData(byte[] data) {
      this.data = data == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(data.clone());
      return this;
    }

    public write_args setData(java.nio.ByteBuffer data) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    /**
     * 
     * @see WritePreference
     */
    public WritePreference getPreference() {
      return this.preference;
    }

    /**
     * 
     * @see WritePreference
     */
    public write_args setPreference(WritePreference preference) {
      this.preference = preference;
      return this;
    }

    public void unsetPreference() {
      this.preference = null;
    }

    /** Returns true if field preference is set (has been assigned a value) and false otherwise */
    public boolean isSetPreference() {
      return this.preference != null;
    }

    public void setPreferenceIsSet(boolean value) {
      if (!value) {
        this.preference = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MB_METADATA:
        if (value == null) {
          unsetMbMetadata();
        } else {
          setMbMetadata((Metadata)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          if (value instanceof byte[]) {
            setData((byte[])value);
          } else {
            setData((java.nio.ByteBuffer)value);
          }
        }
        break;

      case PREFERENCE:
        if (value == null) {
          unsetPreference();
        } else {
          setPreference((WritePreference)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MB_METADATA:
        return getMbMetadata();

      case DATA:
        return getData();

      case PREFERENCE:
        return getPreference();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MB_METADATA:
        return isSetMbMetadata();
      case DATA:
        return isSetData();
      case PREFERENCE:
        return isSetPreference();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof write_args)
        return this.equals((write_args)that);
      return false;
    }

    public boolean equals(write_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mbMetadata = true && this.isSetMbMetadata();
      boolean that_present_mbMetadata = true && that.isSetMbMetadata();
      if (this_present_mbMetadata || that_present_mbMetadata) {
        if (!(this_present_mbMetadata && that_present_mbMetadata))
          return false;
        if (!this.mbMetadata.equals(that.mbMetadata))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_preference = true && this.isSetPreference();
      boolean that_present_preference = true && that.isSetPreference();
      if (this_present_preference || that_present_preference) {
        if (!(this_present_preference && that_present_preference))
          return false;
        if (!this.preference.equals(that.preference))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMbMetadata()) ? 131071 : 524287);
      if (isSetMbMetadata())
        hashCode = hashCode * 8191 + mbMetadata.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      hashCode = hashCode * 8191 + ((isSetPreference()) ? 131071 : 524287);
      if (isSetPreference())
        hashCode = hashCode * 8191 + preference.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(write_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMbMetadata()).compareTo(other.isSetMbMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbMetadata, other.mbMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPreference()).compareTo(other.isSetPreference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreference()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preference, other.preference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("write_args(");
      boolean first = true;

      sb.append("mbMetadata:");
      if (this.mbMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.mbMetadata);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("preference:");
      if (this.preference == null) {
        sb.append("null");
      } else {
        sb.append(this.preference);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbMetadata != null) {
        mbMetadata.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class write_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public write_argsStandardScheme getScheme() {
        return new write_argsStandardScheme();
      }
    }

    private static class write_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<write_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, write_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MB_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbMetadata = new Metadata();
                struct.mbMetadata.read(iprot);
                struct.setMbMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PREFERENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.preference = com.dreamlab.edgefs.thrift.WritePreference.findByValue(iprot.readI32());
                struct.setPreferenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, write_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mbMetadata != null) {
          oprot.writeFieldBegin(MB_METADATA_FIELD_DESC);
          struct.mbMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        if (struct.preference != null) {
          oprot.writeFieldBegin(PREFERENCE_FIELD_DESC);
          oprot.writeI32(struct.preference.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class write_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public write_argsTupleScheme getScheme() {
        return new write_argsTupleScheme();
      }
    }

    private static class write_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<write_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, write_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMbMetadata()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        if (struct.isSetPreference()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMbMetadata()) {
          struct.mbMetadata.write(oprot);
        }
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
        if (struct.isSetPreference()) {
          oprot.writeI32(struct.preference.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, write_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.mbMetadata = new Metadata();
          struct.mbMetadata.read(iprot);
          struct.setMbMetadataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.preference = com.dreamlab.edgefs.thrift.WritePreference.findByValue(iprot.readI32());
          struct.setPreferenceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class write_result implements org.apache.thrift.TBase<write_result, write_result._Fields>, java.io.Serializable, Cloneable, Comparable<write_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("write_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new write_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new write_resultTupleSchemeFactory();

    public WriteResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WriteResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(write_result.class, metaDataMap);
    }

    public write_result() {
    }

    public write_result(
      WriteResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public write_result(write_result other) {
      if (other.isSetSuccess()) {
        this.success = new WriteResponse(other.success);
      }
    }

    public write_result deepCopy() {
      return new write_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WriteResponse getSuccess() {
      return this.success;
    }

    public write_result setSuccess(WriteResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WriteResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof write_result)
        return this.equals((write_result)that);
      return false;
    }

    public boolean equals(write_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(write_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("write_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class write_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public write_resultStandardScheme getScheme() {
        return new write_resultStandardScheme();
      }
    }

    private static class write_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<write_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, write_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WriteResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, write_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class write_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public write_resultTupleScheme getScheme() {
        return new write_resultTupleScheme();
      }
    }

    private static class write_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<write_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, write_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, write_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WriteResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeNext_args implements org.apache.thrift.TBase<writeNext_args, writeNext_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeNext_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeNext_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MB_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mbData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("dataLength", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeNext_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeNext_argsTupleSchemeFactory();

    public java.lang.String sessionId; // required
    public Metadata mbData; // required
    public byte dataLength; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      MB_DATA((short)2, "mbData"),
      DATA_LENGTH((short)3, "dataLength");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // MB_DATA
            return MB_DATA;
          case 3: // DATA_LENGTH
            return DATA_LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATALENGTH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MB_DATA, new org.apache.thrift.meta_data.FieldMetaData("mbData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metadata.class)));
      tmpMap.put(_Fields.DATA_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("dataLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeNext_args.class, metaDataMap);
    }

    public writeNext_args() {
    }

    public writeNext_args(
      java.lang.String sessionId,
      Metadata mbData,
      byte dataLength)
    {
      this();
      this.sessionId = sessionId;
      this.mbData = mbData;
      this.dataLength = dataLength;
      setDataLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeNext_args(writeNext_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetMbData()) {
        this.mbData = new Metadata(other.mbData);
      }
      this.dataLength = other.dataLength;
    }

    public writeNext_args deepCopy() {
      return new writeNext_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.mbData = null;
      setDataLengthIsSet(false);
      this.dataLength = 0;
    }

    public java.lang.String getSessionId() {
      return this.sessionId;
    }

    public writeNext_args setSessionId(java.lang.String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public Metadata getMbData() {
      return this.mbData;
    }

    public writeNext_args setMbData(Metadata mbData) {
      this.mbData = mbData;
      return this;
    }

    public void unsetMbData() {
      this.mbData = null;
    }

    /** Returns true if field mbData is set (has been assigned a value) and false otherwise */
    public boolean isSetMbData() {
      return this.mbData != null;
    }

    public void setMbDataIsSet(boolean value) {
      if (!value) {
        this.mbData = null;
      }
    }

    public byte getDataLength() {
      return this.dataLength;
    }

    public writeNext_args setDataLength(byte dataLength) {
      this.dataLength = dataLength;
      setDataLengthIsSet(true);
      return this;
    }

    public void unsetDataLength() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATALENGTH_ISSET_ID);
    }

    /** Returns true if field dataLength is set (has been assigned a value) and false otherwise */
    public boolean isSetDataLength() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATALENGTH_ISSET_ID);
    }

    public void setDataLengthIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATALENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((java.lang.String)value);
        }
        break;

      case MB_DATA:
        if (value == null) {
          unsetMbData();
        } else {
          setMbData((Metadata)value);
        }
        break;

      case DATA_LENGTH:
        if (value == null) {
          unsetDataLength();
        } else {
          setDataLength((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case MB_DATA:
        return getMbData();

      case DATA_LENGTH:
        return getDataLength();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case MB_DATA:
        return isSetMbData();
      case DATA_LENGTH:
        return isSetDataLength();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeNext_args)
        return this.equals((writeNext_args)that);
      return false;
    }

    public boolean equals(writeNext_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_mbData = true && this.isSetMbData();
      boolean that_present_mbData = true && that.isSetMbData();
      if (this_present_mbData || that_present_mbData) {
        if (!(this_present_mbData && that_present_mbData))
          return false;
        if (!this.mbData.equals(that.mbData))
          return false;
      }

      boolean this_present_dataLength = true;
      boolean that_present_dataLength = true;
      if (this_present_dataLength || that_present_dataLength) {
        if (!(this_present_dataLength && that_present_dataLength))
          return false;
        if (this.dataLength != that.dataLength)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
      if (isSetSessionId())
        hashCode = hashCode * 8191 + sessionId.hashCode();

      hashCode = hashCode * 8191 + ((isSetMbData()) ? 131071 : 524287);
      if (isSetMbData())
        hashCode = hashCode * 8191 + mbData.hashCode();

      hashCode = hashCode * 8191 + (int) (dataLength);

      return hashCode;
    }

    @Override
    public int compareTo(writeNext_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMbData()).compareTo(other.isSetMbData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbData, other.mbData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataLength()).compareTo(other.isSetDataLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataLength, other.dataLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeNext_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbData:");
      if (this.mbData == null) {
        sb.append("null");
      } else {
        sb.append(this.mbData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataLength:");
      sb.append(this.dataLength);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbData != null) {
        mbData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeNext_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeNext_argsStandardScheme getScheme() {
        return new writeNext_argsStandardScheme();
      }
    }

    private static class writeNext_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeNext_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeNext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MB_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbData = new Metadata();
                struct.mbData.read(iprot);
                struct.setMbDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.dataLength = iprot.readByte();
                struct.setDataLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeNext_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.mbData != null) {
          oprot.writeFieldBegin(MB_DATA_FIELD_DESC);
          struct.mbData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DATA_LENGTH_FIELD_DESC);
        oprot.writeByte(struct.dataLength);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeNext_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeNext_argsTupleScheme getScheme() {
        return new writeNext_argsTupleScheme();
      }
    }

    private static class writeNext_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeNext_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeNext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetMbData()) {
          optionals.set(1);
        }
        if (struct.isSetDataLength()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetMbData()) {
          struct.mbData.write(oprot);
        }
        if (struct.isSetDataLength()) {
          oprot.writeByte(struct.dataLength);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeNext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mbData = new Metadata();
          struct.mbData.read(iprot);
          struct.setMbDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataLength = iprot.readByte();
          struct.setDataLengthIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeNext_result implements org.apache.thrift.TBase<writeNext_result, writeNext_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeNext_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeNext_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeNext_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeNext_resultTupleSchemeFactory();

    public java.util.List<NodeInfoData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfoData.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeNext_result.class, metaDataMap);
    }

    public writeNext_result() {
    }

    public writeNext_result(
      java.util.List<NodeInfoData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeNext_result(writeNext_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NodeInfoData> __this__success = new java.util.ArrayList<NodeInfoData>(other.success.size());
        for (NodeInfoData other_element : other.success) {
          __this__success.add(new NodeInfoData(other_element));
        }
        this.success = __this__success;
      }
    }

    public writeNext_result deepCopy() {
      return new writeNext_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NodeInfoData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NodeInfoData elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NodeInfoData>();
      }
      this.success.add(elem);
    }

    public java.util.List<NodeInfoData> getSuccess() {
      return this.success;
    }

    public writeNext_result setSuccess(java.util.List<NodeInfoData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NodeInfoData>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeNext_result)
        return this.equals((writeNext_result)that);
      return false;
    }

    public boolean equals(writeNext_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeNext_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeNext_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeNext_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeNext_resultStandardScheme getScheme() {
        return new writeNext_resultStandardScheme();
      }
    }

    private static class writeNext_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeNext_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeNext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NodeInfoData>(_list150.size);
                  NodeInfoData _elem151;
                  for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                  {
                    _elem151 = new NodeInfoData();
                    _elem151.read(iprot);
                    struct.success.add(_elem151);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeNext_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NodeInfoData _iter153 : struct.success)
            {
              _iter153.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeNext_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeNext_resultTupleScheme getScheme() {
        return new writeNext_resultTupleScheme();
      }
    }

    private static class writeNext_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeNext_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeNext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NodeInfoData _iter154 : struct.success)
            {
              _iter154.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeNext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list155 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<NodeInfoData>(_list155.size);
            NodeInfoData _elem156;
            for (int _i157 = 0; _i157 < _list155.size; ++_i157)
            {
              _elem156 = new NodeInfoData();
              _elem156.read(iprot);
              struct.success.add(_elem156);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class insertMetadata_args implements org.apache.thrift.TBase<insertMetadata_args, insertMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertMetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertMetadata_args");

    private static final org.apache.thrift.protocol.TField MB_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mbMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EDGE_INFO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeInfoData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField META_KEY_VALUE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("metaKeyValueMap", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new insertMetadata_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new insertMetadata_argsTupleSchemeFactory();

    public Metadata mbMetadata; // required
    public EdgeInfoData edgeInfoData; // required
    public java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MB_METADATA((short)1, "mbMetadata"),
      EDGE_INFO_DATA((short)2, "edgeInfoData"),
      META_KEY_VALUE_MAP((short)3, "metaKeyValueMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MB_METADATA
            return MB_METADATA;
          case 2: // EDGE_INFO_DATA
            return EDGE_INFO_DATA;
          case 3: // META_KEY_VALUE_MAP
            return META_KEY_VALUE_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MB_METADATA, new org.apache.thrift.meta_data.FieldMetaData("mbMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metadata.class)));
      tmpMap.put(_Fields.EDGE_INFO_DATA, new org.apache.thrift.meta_data.FieldMetaData("edgeInfoData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdgeInfoData.class)));
      tmpMap.put(_Fields.META_KEY_VALUE_MAP, new org.apache.thrift.meta_data.FieldMetaData("metaKeyValueMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertMetadata_args.class, metaDataMap);
    }

    public insertMetadata_args() {
    }

    public insertMetadata_args(
      Metadata mbMetadata,
      EdgeInfoData edgeInfoData,
      java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap)
    {
      this();
      this.mbMetadata = mbMetadata;
      this.edgeInfoData = edgeInfoData;
      this.metaKeyValueMap = metaKeyValueMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertMetadata_args(insertMetadata_args other) {
      if (other.isSetMbMetadata()) {
        this.mbMetadata = new Metadata(other.mbMetadata);
      }
      if (other.isSetEdgeInfoData()) {
        this.edgeInfoData = new EdgeInfoData(other.edgeInfoData);
      }
      if (other.isSetMetaKeyValueMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.metaKeyValueMap);
        this.metaKeyValueMap = __this__metaKeyValueMap;
      }
    }

    public insertMetadata_args deepCopy() {
      return new insertMetadata_args(this);
    }

    @Override
    public void clear() {
      this.mbMetadata = null;
      this.edgeInfoData = null;
      this.metaKeyValueMap = null;
    }

    public Metadata getMbMetadata() {
      return this.mbMetadata;
    }

    public insertMetadata_args setMbMetadata(Metadata mbMetadata) {
      this.mbMetadata = mbMetadata;
      return this;
    }

    public void unsetMbMetadata() {
      this.mbMetadata = null;
    }

    /** Returns true if field mbMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMbMetadata() {
      return this.mbMetadata != null;
    }

    public void setMbMetadataIsSet(boolean value) {
      if (!value) {
        this.mbMetadata = null;
      }
    }

    public EdgeInfoData getEdgeInfoData() {
      return this.edgeInfoData;
    }

    public insertMetadata_args setEdgeInfoData(EdgeInfoData edgeInfoData) {
      this.edgeInfoData = edgeInfoData;
      return this;
    }

    public void unsetEdgeInfoData() {
      this.edgeInfoData = null;
    }

    /** Returns true if field edgeInfoData is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeInfoData() {
      return this.edgeInfoData != null;
    }

    public void setEdgeInfoDataIsSet(boolean value) {
      if (!value) {
        this.edgeInfoData = null;
      }
    }

    public int getMetaKeyValueMapSize() {
      return (this.metaKeyValueMap == null) ? 0 : this.metaKeyValueMap.size();
    }

    public void putToMetaKeyValueMap(java.lang.String key, java.lang.String val) {
      if (this.metaKeyValueMap == null) {
        this.metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.metaKeyValueMap.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getMetaKeyValueMap() {
      return this.metaKeyValueMap;
    }

    public insertMetadata_args setMetaKeyValueMap(java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap) {
      this.metaKeyValueMap = metaKeyValueMap;
      return this;
    }

    public void unsetMetaKeyValueMap() {
      this.metaKeyValueMap = null;
    }

    /** Returns true if field metaKeyValueMap is set (has been assigned a value) and false otherwise */
    public boolean isSetMetaKeyValueMap() {
      return this.metaKeyValueMap != null;
    }

    public void setMetaKeyValueMapIsSet(boolean value) {
      if (!value) {
        this.metaKeyValueMap = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MB_METADATA:
        if (value == null) {
          unsetMbMetadata();
        } else {
          setMbMetadata((Metadata)value);
        }
        break;

      case EDGE_INFO_DATA:
        if (value == null) {
          unsetEdgeInfoData();
        } else {
          setEdgeInfoData((EdgeInfoData)value);
        }
        break;

      case META_KEY_VALUE_MAP:
        if (value == null) {
          unsetMetaKeyValueMap();
        } else {
          setMetaKeyValueMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MB_METADATA:
        return getMbMetadata();

      case EDGE_INFO_DATA:
        return getEdgeInfoData();

      case META_KEY_VALUE_MAP:
        return getMetaKeyValueMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MB_METADATA:
        return isSetMbMetadata();
      case EDGE_INFO_DATA:
        return isSetEdgeInfoData();
      case META_KEY_VALUE_MAP:
        return isSetMetaKeyValueMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof insertMetadata_args)
        return this.equals((insertMetadata_args)that);
      return false;
    }

    public boolean equals(insertMetadata_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mbMetadata = true && this.isSetMbMetadata();
      boolean that_present_mbMetadata = true && that.isSetMbMetadata();
      if (this_present_mbMetadata || that_present_mbMetadata) {
        if (!(this_present_mbMetadata && that_present_mbMetadata))
          return false;
        if (!this.mbMetadata.equals(that.mbMetadata))
          return false;
      }

      boolean this_present_edgeInfoData = true && this.isSetEdgeInfoData();
      boolean that_present_edgeInfoData = true && that.isSetEdgeInfoData();
      if (this_present_edgeInfoData || that_present_edgeInfoData) {
        if (!(this_present_edgeInfoData && that_present_edgeInfoData))
          return false;
        if (!this.edgeInfoData.equals(that.edgeInfoData))
          return false;
      }

      boolean this_present_metaKeyValueMap = true && this.isSetMetaKeyValueMap();
      boolean that_present_metaKeyValueMap = true && that.isSetMetaKeyValueMap();
      if (this_present_metaKeyValueMap || that_present_metaKeyValueMap) {
        if (!(this_present_metaKeyValueMap && that_present_metaKeyValueMap))
          return false;
        if (!this.metaKeyValueMap.equals(that.metaKeyValueMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMbMetadata()) ? 131071 : 524287);
      if (isSetMbMetadata())
        hashCode = hashCode * 8191 + mbMetadata.hashCode();

      hashCode = hashCode * 8191 + ((isSetEdgeInfoData()) ? 131071 : 524287);
      if (isSetEdgeInfoData())
        hashCode = hashCode * 8191 + edgeInfoData.hashCode();

      hashCode = hashCode * 8191 + ((isSetMetaKeyValueMap()) ? 131071 : 524287);
      if (isSetMetaKeyValueMap())
        hashCode = hashCode * 8191 + metaKeyValueMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(insertMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMbMetadata()).compareTo(other.isSetMbMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbMetadata, other.mbMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEdgeInfoData()).compareTo(other.isSetEdgeInfoData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeInfoData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeInfoData, other.edgeInfoData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMetaKeyValueMap()).compareTo(other.isSetMetaKeyValueMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetaKeyValueMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaKeyValueMap, other.metaKeyValueMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("insertMetadata_args(");
      boolean first = true;

      sb.append("mbMetadata:");
      if (this.mbMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.mbMetadata);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("edgeInfoData:");
      if (this.edgeInfoData == null) {
        sb.append("null");
      } else {
        sb.append(this.edgeInfoData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("metaKeyValueMap:");
      if (this.metaKeyValueMap == null) {
        sb.append("null");
      } else {
        sb.append(this.metaKeyValueMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbMetadata != null) {
        mbMetadata.validate();
      }
      if (edgeInfoData != null) {
        edgeInfoData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertMetadata_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertMetadata_argsStandardScheme getScheme() {
        return new insertMetadata_argsStandardScheme();
      }
    }

    private static class insertMetadata_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<insertMetadata_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MB_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbMetadata = new Metadata();
                struct.mbMetadata.read(iprot);
                struct.setMbMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EDGE_INFO_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.edgeInfoData = new EdgeInfoData();
                struct.edgeInfoData.read(iprot);
                struct.setEdgeInfoDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // META_KEY_VALUE_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map158 = iprot.readMapBegin();
                  struct.metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map158.size);
                  java.lang.String _key159;
                  java.lang.String _val160;
                  for (int _i161 = 0; _i161 < _map158.size; ++_i161)
                  {
                    _key159 = iprot.readString();
                    _val160 = iprot.readString();
                    struct.metaKeyValueMap.put(_key159, _val160);
                  }
                  iprot.readMapEnd();
                }
                struct.setMetaKeyValueMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertMetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mbMetadata != null) {
          oprot.writeFieldBegin(MB_METADATA_FIELD_DESC);
          struct.mbMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.edgeInfoData != null) {
          oprot.writeFieldBegin(EDGE_INFO_DATA_FIELD_DESC);
          struct.edgeInfoData.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.metaKeyValueMap != null) {
          oprot.writeFieldBegin(META_KEY_VALUE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.metaKeyValueMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter162 : struct.metaKeyValueMap.entrySet())
            {
              oprot.writeString(_iter162.getKey());
              oprot.writeString(_iter162.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertMetadata_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertMetadata_argsTupleScheme getScheme() {
        return new insertMetadata_argsTupleScheme();
      }
    }

    private static class insertMetadata_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<insertMetadata_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMbMetadata()) {
          optionals.set(0);
        }
        if (struct.isSetEdgeInfoData()) {
          optionals.set(1);
        }
        if (struct.isSetMetaKeyValueMap()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMbMetadata()) {
          struct.mbMetadata.write(oprot);
        }
        if (struct.isSetEdgeInfoData()) {
          struct.edgeInfoData.write(oprot);
        }
        if (struct.isSetMetaKeyValueMap()) {
          {
            oprot.writeI32(struct.metaKeyValueMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter163 : struct.metaKeyValueMap.entrySet())
            {
              oprot.writeString(_iter163.getKey());
              oprot.writeString(_iter163.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.mbMetadata = new Metadata();
          struct.mbMetadata.read(iprot);
          struct.setMbMetadataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.edgeInfoData = new EdgeInfoData();
          struct.edgeInfoData.read(iprot);
          struct.setEdgeInfoDataIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map164 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map164.size);
            java.lang.String _key165;
            java.lang.String _val166;
            for (int _i167 = 0; _i167 < _map164.size; ++_i167)
            {
              _key165 = iprot.readString();
              _val166 = iprot.readString();
              struct.metaKeyValueMap.put(_key165, _val166);
            }
          }
          struct.setMetaKeyValueMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class insertMetadata_result implements org.apache.thrift.TBase<insertMetadata_result, insertMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertMetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertMetadata_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new insertMetadata_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new insertMetadata_resultTupleSchemeFactory();

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertMetadata_result.class, metaDataMap);
    }

    public insertMetadata_result() {
    }

    public insertMetadata_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertMetadata_result(insertMetadata_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertMetadata_result deepCopy() {
      return new insertMetadata_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public insertMetadata_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof insertMetadata_result)
        return this.equals((insertMetadata_result)that);
      return false;
    }

    public boolean equals(insertMetadata_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (success);

      return hashCode;
    }

    @Override
    public int compareTo(insertMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("insertMetadata_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertMetadata_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertMetadata_resultStandardScheme getScheme() {
        return new insertMetadata_resultStandardScheme();
      }
    }

    private static class insertMetadata_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<insertMetadata_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertMetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeByte(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertMetadata_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public insertMetadata_resultTupleScheme getScheme() {
        return new insertMetadata_resultTupleScheme();
      }
    }

    private static class insertMetadata_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<insertMetadata_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNext_args implements org.apache.thrift.TBase<findNext_args, findNext_args._Fields>, java.io.Serializable, Cloneable, Comparable<findNext_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNext_args");

    private static final org.apache.thrift.protocol.TField MICROBATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("microbatchId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNext_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNext_argsTupleSchemeFactory();

    public java.lang.String microbatchId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MICROBATCH_ID((short)1, "microbatchId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MICROBATCH_ID
            return MICROBATCH_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MICROBATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("microbatchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNext_args.class, metaDataMap);
    }

    public findNext_args() {
    }

    public findNext_args(
      java.lang.String microbatchId)
    {
      this();
      this.microbatchId = microbatchId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNext_args(findNext_args other) {
      if (other.isSetMicrobatchId()) {
        this.microbatchId = other.microbatchId;
      }
    }

    public findNext_args deepCopy() {
      return new findNext_args(this);
    }

    @Override
    public void clear() {
      this.microbatchId = null;
    }

    public java.lang.String getMicrobatchId() {
      return this.microbatchId;
    }

    public findNext_args setMicrobatchId(java.lang.String microbatchId) {
      this.microbatchId = microbatchId;
      return this;
    }

    public void unsetMicrobatchId() {
      this.microbatchId = null;
    }

    /** Returns true if field microbatchId is set (has been assigned a value) and false otherwise */
    public boolean isSetMicrobatchId() {
      return this.microbatchId != null;
    }

    public void setMicrobatchIdIsSet(boolean value) {
      if (!value) {
        this.microbatchId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MICROBATCH_ID:
        if (value == null) {
          unsetMicrobatchId();
        } else {
          setMicrobatchId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MICROBATCH_ID:
        return getMicrobatchId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MICROBATCH_ID:
        return isSetMicrobatchId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNext_args)
        return this.equals((findNext_args)that);
      return false;
    }

    public boolean equals(findNext_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_microbatchId = true && this.isSetMicrobatchId();
      boolean that_present_microbatchId = true && that.isSetMicrobatchId();
      if (this_present_microbatchId || that_present_microbatchId) {
        if (!(this_present_microbatchId && that_present_microbatchId))
          return false;
        if (!this.microbatchId.equals(that.microbatchId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMicrobatchId()) ? 131071 : 524287);
      if (isSetMicrobatchId())
        hashCode = hashCode * 8191 + microbatchId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNext_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMicrobatchId()).compareTo(other.isSetMicrobatchId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMicrobatchId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.microbatchId, other.microbatchId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNext_args(");
      boolean first = true;

      sb.append("microbatchId:");
      if (this.microbatchId == null) {
        sb.append("null");
      } else {
        sb.append(this.microbatchId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNext_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNext_argsStandardScheme getScheme() {
        return new findNext_argsStandardScheme();
      }
    }

    private static class findNext_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNext_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MICROBATCH_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.microbatchId = iprot.readString();
                struct.setMicrobatchIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNext_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.microbatchId != null) {
          oprot.writeFieldBegin(MICROBATCH_ID_FIELD_DESC);
          oprot.writeString(struct.microbatchId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNext_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNext_argsTupleScheme getScheme() {
        return new findNext_argsTupleScheme();
      }
    }

    private static class findNext_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNext_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMicrobatchId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMicrobatchId()) {
          oprot.writeString(struct.microbatchId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.microbatchId = iprot.readString();
          struct.setMicrobatchIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findNext_result implements org.apache.thrift.TBase<findNext_result, findNext_result._Fields>, java.io.Serializable, Cloneable, Comparable<findNext_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNext_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findNext_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findNext_resultTupleSchemeFactory();

    public java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNext_result.class, metaDataMap);
    }

    public findNext_result() {
    }

    public findNext_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNext_result(findNext_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public findNext_result deepCopy() {
      return new findNext_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public findNext_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public findNext_result setSuccess(java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findNext_result)
        return this.equals((findNext_result)that);
      return false;
    }

    public boolean equals(findNext_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findNext_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findNext_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNext_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNext_resultStandardScheme getScheme() {
        return new findNext_resultStandardScheme();
      }
    }

    private static class findNext_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findNext_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNext_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNext_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findNext_resultTupleScheme getScheme() {
        return new findNext_resultTupleScheme();
      }
    }

    private static class findNext_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findNext_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class find_args implements org.apache.thrift.TBase<find_args, find_args._Fields>, java.io.Serializable, Cloneable, Comparable<find_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("find_args");

    private static final org.apache.thrift.protocol.TField MICROBATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("microbatchId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHECK_NEIGHBORS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkNeighbors", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField CHECK_BUDDIES_FIELD_DESC = new org.apache.thrift.protocol.TField("checkBuddies", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField SELF_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("selfInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new find_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new find_argsTupleSchemeFactory();

    public long microbatchId; // required
    public boolean checkNeighbors; // required
    public boolean checkBuddies; // required
    public EdgeInfoData selfInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MICROBATCH_ID((short)1, "microbatchId"),
      CHECK_NEIGHBORS((short)2, "checkNeighbors"),
      CHECK_BUDDIES((short)3, "checkBuddies"),
      SELF_INFO((short)4, "selfInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MICROBATCH_ID
            return MICROBATCH_ID;
          case 2: // CHECK_NEIGHBORS
            return CHECK_NEIGHBORS;
          case 3: // CHECK_BUDDIES
            return CHECK_BUDDIES;
          case 4: // SELF_INFO
            return SELF_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MICROBATCHID_ISSET_ID = 0;
    private static final int __CHECKNEIGHBORS_ISSET_ID = 1;
    private static final int __CHECKBUDDIES_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MICROBATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("microbatchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHECK_NEIGHBORS, new org.apache.thrift.meta_data.FieldMetaData("checkNeighbors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CHECK_BUDDIES, new org.apache.thrift.meta_data.FieldMetaData("checkBuddies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SELF_INFO, new org.apache.thrift.meta_data.FieldMetaData("selfInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EdgeInfoData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(find_args.class, metaDataMap);
    }

    public find_args() {
    }

    public find_args(
      long microbatchId,
      boolean checkNeighbors,
      boolean checkBuddies,
      EdgeInfoData selfInfo)
    {
      this();
      this.microbatchId = microbatchId;
      setMicrobatchIdIsSet(true);
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
      this.selfInfo = selfInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public find_args(find_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.microbatchId = other.microbatchId;
      this.checkNeighbors = other.checkNeighbors;
      this.checkBuddies = other.checkBuddies;
      if (other.isSetSelfInfo()) {
        this.selfInfo = new EdgeInfoData(other.selfInfo);
      }
    }

    public find_args deepCopy() {
      return new find_args(this);
    }

    @Override
    public void clear() {
      setMicrobatchIdIsSet(false);
      this.microbatchId = 0;
      setCheckNeighborsIsSet(false);
      this.checkNeighbors = false;
      setCheckBuddiesIsSet(false);
      this.checkBuddies = false;
      this.selfInfo = null;
    }

    public long getMicrobatchId() {
      return this.microbatchId;
    }

    public find_args setMicrobatchId(long microbatchId) {
      this.microbatchId = microbatchId;
      setMicrobatchIdIsSet(true);
      return this;
    }

    public void unsetMicrobatchId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MICROBATCHID_ISSET_ID);
    }

    /** Returns true if field microbatchId is set (has been assigned a value) and false otherwise */
    public boolean isSetMicrobatchId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MICROBATCHID_ISSET_ID);
    }

    public void setMicrobatchIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MICROBATCHID_ISSET_ID, value);
    }

    public boolean isCheckNeighbors() {
      return this.checkNeighbors;
    }

    public find_args setCheckNeighbors(boolean checkNeighbors) {
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      return this;
    }

    public void unsetCheckNeighbors() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    /** Returns true if field checkNeighbors is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckNeighbors() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    public void setCheckNeighborsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID, value);
    }

    public boolean isCheckBuddies() {
      return this.checkBuddies;
    }

    public find_args setCheckBuddies(boolean checkBuddies) {
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
      return this;
    }

    public void unsetCheckBuddies() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    /** Returns true if field checkBuddies is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckBuddies() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    public void setCheckBuddiesIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID, value);
    }

    public EdgeInfoData getSelfInfo() {
      return this.selfInfo;
    }

    public find_args setSelfInfo(EdgeInfoData selfInfo) {
      this.selfInfo = selfInfo;
      return this;
    }

    public void unsetSelfInfo() {
      this.selfInfo = null;
    }

    /** Returns true if field selfInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSelfInfo() {
      return this.selfInfo != null;
    }

    public void setSelfInfoIsSet(boolean value) {
      if (!value) {
        this.selfInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MICROBATCH_ID:
        if (value == null) {
          unsetMicrobatchId();
        } else {
          setMicrobatchId((java.lang.Long)value);
        }
        break;

      case CHECK_NEIGHBORS:
        if (value == null) {
          unsetCheckNeighbors();
        } else {
          setCheckNeighbors((java.lang.Boolean)value);
        }
        break;

      case CHECK_BUDDIES:
        if (value == null) {
          unsetCheckBuddies();
        } else {
          setCheckBuddies((java.lang.Boolean)value);
        }
        break;

      case SELF_INFO:
        if (value == null) {
          unsetSelfInfo();
        } else {
          setSelfInfo((EdgeInfoData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MICROBATCH_ID:
        return getMicrobatchId();

      case CHECK_NEIGHBORS:
        return isCheckNeighbors();

      case CHECK_BUDDIES:
        return isCheckBuddies();

      case SELF_INFO:
        return getSelfInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MICROBATCH_ID:
        return isSetMicrobatchId();
      case CHECK_NEIGHBORS:
        return isSetCheckNeighbors();
      case CHECK_BUDDIES:
        return isSetCheckBuddies();
      case SELF_INFO:
        return isSetSelfInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof find_args)
        return this.equals((find_args)that);
      return false;
    }

    public boolean equals(find_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_microbatchId = true;
      boolean that_present_microbatchId = true;
      if (this_present_microbatchId || that_present_microbatchId) {
        if (!(this_present_microbatchId && that_present_microbatchId))
          return false;
        if (this.microbatchId != that.microbatchId)
          return false;
      }

      boolean this_present_checkNeighbors = true;
      boolean that_present_checkNeighbors = true;
      if (this_present_checkNeighbors || that_present_checkNeighbors) {
        if (!(this_present_checkNeighbors && that_present_checkNeighbors))
          return false;
        if (this.checkNeighbors != that.checkNeighbors)
          return false;
      }

      boolean this_present_checkBuddies = true;
      boolean that_present_checkBuddies = true;
      if (this_present_checkBuddies || that_present_checkBuddies) {
        if (!(this_present_checkBuddies && that_present_checkBuddies))
          return false;
        if (this.checkBuddies != that.checkBuddies)
          return false;
      }

      boolean this_present_selfInfo = true && this.isSetSelfInfo();
      boolean that_present_selfInfo = true && that.isSetSelfInfo();
      if (this_present_selfInfo || that_present_selfInfo) {
        if (!(this_present_selfInfo && that_present_selfInfo))
          return false;
        if (!this.selfInfo.equals(that.selfInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(microbatchId);

      hashCode = hashCode * 8191 + ((checkNeighbors) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((checkBuddies) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSelfInfo()) ? 131071 : 524287);
      if (isSetSelfInfo())
        hashCode = hashCode * 8191 + selfInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(find_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMicrobatchId()).compareTo(other.isSetMicrobatchId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMicrobatchId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.microbatchId, other.microbatchId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckNeighbors()).compareTo(other.isSetCheckNeighbors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckNeighbors()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkNeighbors, other.checkNeighbors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckBuddies()).compareTo(other.isSetCheckBuddies());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckBuddies()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkBuddies, other.checkBuddies);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSelfInfo()).compareTo(other.isSetSelfInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelfInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfInfo, other.selfInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("find_args(");
      boolean first = true;

      sb.append("microbatchId:");
      sb.append(this.microbatchId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkNeighbors:");
      sb.append(this.checkNeighbors);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkBuddies:");
      sb.append(this.checkBuddies);
      first = false;
      if (!first) sb.append(", ");
      sb.append("selfInfo:");
      if (this.selfInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.selfInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (selfInfo != null) {
        selfInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class find_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public find_argsStandardScheme getScheme() {
        return new find_argsStandardScheme();
      }
    }

    private static class find_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<find_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, find_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MICROBATCH_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.microbatchId = iprot.readI64();
                struct.setMicrobatchIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHECK_NEIGHBORS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkNeighbors = iprot.readBool();
                struct.setCheckNeighborsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHECK_BUDDIES
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkBuddies = iprot.readBool();
                struct.setCheckBuddiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SELF_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.selfInfo = new EdgeInfoData();
                struct.selfInfo.read(iprot);
                struct.setSelfInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, find_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MICROBATCH_ID_FIELD_DESC);
        oprot.writeI64(struct.microbatchId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHECK_NEIGHBORS_FIELD_DESC);
        oprot.writeBool(struct.checkNeighbors);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHECK_BUDDIES_FIELD_DESC);
        oprot.writeBool(struct.checkBuddies);
        oprot.writeFieldEnd();
        if (struct.selfInfo != null) {
          oprot.writeFieldBegin(SELF_INFO_FIELD_DESC);
          struct.selfInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class find_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public find_argsTupleScheme getScheme() {
        return new find_argsTupleScheme();
      }
    }

    private static class find_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<find_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, find_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMicrobatchId()) {
          optionals.set(0);
        }
        if (struct.isSetCheckNeighbors()) {
          optionals.set(1);
        }
        if (struct.isSetCheckBuddies()) {
          optionals.set(2);
        }
        if (struct.isSetSelfInfo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMicrobatchId()) {
          oprot.writeI64(struct.microbatchId);
        }
        if (struct.isSetCheckNeighbors()) {
          oprot.writeBool(struct.checkNeighbors);
        }
        if (struct.isSetCheckBuddies()) {
          oprot.writeBool(struct.checkBuddies);
        }
        if (struct.isSetSelfInfo()) {
          struct.selfInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, find_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.microbatchId = iprot.readI64();
          struct.setMicrobatchIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.checkNeighbors = iprot.readBool();
          struct.setCheckNeighborsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.checkBuddies = iprot.readBool();
          struct.setCheckBuddiesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.selfInfo = new EdgeInfoData();
          struct.selfInfo.read(iprot);
          struct.setSelfInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class find_result implements org.apache.thrift.TBase<find_result, find_result._Fields>, java.io.Serializable, Cloneable, Comparable<find_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("find_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new find_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new find_resultTupleSchemeFactory();

    public java.util.List<FindReplica> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FindReplica.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(find_result.class, metaDataMap);
    }

    public find_result() {
    }

    public find_result(
      java.util.List<FindReplica> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public find_result(find_result other) {
      if (other.isSetSuccess()) {
        java.util.List<FindReplica> __this__success = new java.util.ArrayList<FindReplica>(other.success.size());
        for (FindReplica other_element : other.success) {
          __this__success.add(new FindReplica(other_element));
        }
        this.success = __this__success;
      }
    }

    public find_result deepCopy() {
      return new find_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FindReplica> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FindReplica elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<FindReplica>();
      }
      this.success.add(elem);
    }

    public java.util.List<FindReplica> getSuccess() {
      return this.success;
    }

    public find_result setSuccess(java.util.List<FindReplica> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<FindReplica>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof find_result)
        return this.equals((find_result)that);
      return false;
    }

    public boolean equals(find_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(find_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("find_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class find_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public find_resultStandardScheme getScheme() {
        return new find_resultStandardScheme();
      }
    }

    private static class find_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<find_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, find_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<FindReplica>(_list168.size);
                  FindReplica _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new FindReplica();
                    _elem169.read(iprot);
                    struct.success.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, find_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FindReplica _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class find_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public find_resultTupleScheme getScheme() {
        return new find_resultTupleScheme();
      }
    }

    private static class find_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<find_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, find_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FindReplica _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, find_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<FindReplica>(_list173.size);
            FindReplica _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new FindReplica();
              _elem174.read(iprot);
              struct.success.add(_elem174);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class read_args implements org.apache.thrift.TBase<read_args, read_args._Fields>, java.io.Serializable, Cloneable, Comparable<read_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_args");

    private static final org.apache.thrift.protocol.TField MICROBATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("microbatchId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FETCH_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchMetadata", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new read_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new read_argsTupleSchemeFactory();

    public long microbatchId; // required
    public boolean fetchMetadata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MICROBATCH_ID((short)1, "microbatchId"),
      FETCH_METADATA((short)2, "fetchMetadata");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MICROBATCH_ID
            return MICROBATCH_ID;
          case 2: // FETCH_METADATA
            return FETCH_METADATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MICROBATCHID_ISSET_ID = 0;
    private static final int __FETCHMETADATA_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MICROBATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("microbatchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FETCH_METADATA, new org.apache.thrift.meta_data.FieldMetaData("fetchMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_args.class, metaDataMap);
    }

    public read_args() {
    }

    public read_args(
      long microbatchId,
      boolean fetchMetadata)
    {
      this();
      this.microbatchId = microbatchId;
      setMicrobatchIdIsSet(true);
      this.fetchMetadata = fetchMetadata;
      setFetchMetadataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_args(read_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.microbatchId = other.microbatchId;
      this.fetchMetadata = other.fetchMetadata;
    }

    public read_args deepCopy() {
      return new read_args(this);
    }

    @Override
    public void clear() {
      setMicrobatchIdIsSet(false);
      this.microbatchId = 0;
      setFetchMetadataIsSet(false);
      this.fetchMetadata = false;
    }

    public long getMicrobatchId() {
      return this.microbatchId;
    }

    public read_args setMicrobatchId(long microbatchId) {
      this.microbatchId = microbatchId;
      setMicrobatchIdIsSet(true);
      return this;
    }

    public void unsetMicrobatchId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MICROBATCHID_ISSET_ID);
    }

    /** Returns true if field microbatchId is set (has been assigned a value) and false otherwise */
    public boolean isSetMicrobatchId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MICROBATCHID_ISSET_ID);
    }

    public void setMicrobatchIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MICROBATCHID_ISSET_ID, value);
    }

    public boolean isFetchMetadata() {
      return this.fetchMetadata;
    }

    public read_args setFetchMetadata(boolean fetchMetadata) {
      this.fetchMetadata = fetchMetadata;
      setFetchMetadataIsSet(true);
      return this;
    }

    public void unsetFetchMetadata() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FETCHMETADATA_ISSET_ID);
    }

    /** Returns true if field fetchMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetFetchMetadata() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FETCHMETADATA_ISSET_ID);
    }

    public void setFetchMetadataIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FETCHMETADATA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MICROBATCH_ID:
        if (value == null) {
          unsetMicrobatchId();
        } else {
          setMicrobatchId((java.lang.Long)value);
        }
        break;

      case FETCH_METADATA:
        if (value == null) {
          unsetFetchMetadata();
        } else {
          setFetchMetadata((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MICROBATCH_ID:
        return getMicrobatchId();

      case FETCH_METADATA:
        return isFetchMetadata();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MICROBATCH_ID:
        return isSetMicrobatchId();
      case FETCH_METADATA:
        return isSetFetchMetadata();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof read_args)
        return this.equals((read_args)that);
      return false;
    }

    public boolean equals(read_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_microbatchId = true;
      boolean that_present_microbatchId = true;
      if (this_present_microbatchId || that_present_microbatchId) {
        if (!(this_present_microbatchId && that_present_microbatchId))
          return false;
        if (this.microbatchId != that.microbatchId)
          return false;
      }

      boolean this_present_fetchMetadata = true;
      boolean that_present_fetchMetadata = true;
      if (this_present_fetchMetadata || that_present_fetchMetadata) {
        if (!(this_present_fetchMetadata && that_present_fetchMetadata))
          return false;
        if (this.fetchMetadata != that.fetchMetadata)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(microbatchId);

      hashCode = hashCode * 8191 + ((fetchMetadata) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(read_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMicrobatchId()).compareTo(other.isSetMicrobatchId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMicrobatchId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.microbatchId, other.microbatchId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFetchMetadata()).compareTo(other.isSetFetchMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFetchMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchMetadata, other.fetchMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("read_args(");
      boolean first = true;

      sb.append("microbatchId:");
      sb.append(this.microbatchId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fetchMetadata:");
      sb.append(this.fetchMetadata);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public read_argsStandardScheme getScheme() {
        return new read_argsStandardScheme();
      }
    }

    private static class read_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<read_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MICROBATCH_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.microbatchId = iprot.readI64();
                struct.setMicrobatchIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FETCH_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.fetchMetadata = iprot.readBool();
                struct.setFetchMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MICROBATCH_ID_FIELD_DESC);
        oprot.writeI64(struct.microbatchId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FETCH_METADATA_FIELD_DESC);
        oprot.writeBool(struct.fetchMetadata);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public read_argsTupleScheme getScheme() {
        return new read_argsTupleScheme();
      }
    }

    private static class read_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<read_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMicrobatchId()) {
          optionals.set(0);
        }
        if (struct.isSetFetchMetadata()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMicrobatchId()) {
          oprot.writeI64(struct.microbatchId);
        }
        if (struct.isSetFetchMetadata()) {
          oprot.writeBool(struct.fetchMetadata);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.microbatchId = iprot.readI64();
          struct.setMicrobatchIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fetchMetadata = iprot.readBool();
          struct.setFetchMetadataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class read_result implements org.apache.thrift.TBase<read_result, read_result._Fields>, java.io.Serializable, Cloneable, Comparable<read_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new read_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new read_resultTupleSchemeFactory();

    public ReadReplica success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReadReplica.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_result.class, metaDataMap);
    }

    public read_result() {
    }

    public read_result(
      ReadReplica success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_result(read_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReadReplica(other.success);
      }
    }

    public read_result deepCopy() {
      return new read_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReadReplica getSuccess() {
      return this.success;
    }

    public read_result setSuccess(ReadReplica success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReadReplica)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof read_result)
        return this.equals((read_result)that);
      return false;
    }

    public boolean equals(read_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(read_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("read_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public read_resultStandardScheme getScheme() {
        return new read_resultStandardScheme();
      }
    }

    private static class read_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<read_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReadReplica();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public read_resultTupleScheme getScheme() {
        return new read_resultTupleScheme();
      }
    }

    private static class read_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<read_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReadReplica();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUsingQuery_args implements org.apache.thrift.TBase<findUsingQuery_args, findUsingQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUsingQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUsingQuery_args");

    private static final org.apache.thrift.protocol.TField METADATA_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField METADATA_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataValue", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHECK_NEIGHBORS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkNeighbors", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField CHECK_BUDDIES_FIELD_DESC = new org.apache.thrift.protocol.TField("checkBuddies", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUsingQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUsingQuery_argsTupleSchemeFactory();

    public java.lang.String metadataKey; // required
    public java.lang.String metadataValue; // required
    public boolean checkNeighbors; // required
    public boolean checkBuddies; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA_KEY((short)1, "metadataKey"),
      METADATA_VALUE((short)2, "metadataValue"),
      CHECK_NEIGHBORS((short)3, "checkNeighbors"),
      CHECK_BUDDIES((short)4, "checkBuddies");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA_KEY
            return METADATA_KEY;
          case 2: // METADATA_VALUE
            return METADATA_VALUE;
          case 3: // CHECK_NEIGHBORS
            return CHECK_NEIGHBORS;
          case 4: // CHECK_BUDDIES
            return CHECK_BUDDIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHECKNEIGHBORS_ISSET_ID = 0;
    private static final int __CHECKBUDDIES_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA_KEY, new org.apache.thrift.meta_data.FieldMetaData("metadataKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METADATA_VALUE, new org.apache.thrift.meta_data.FieldMetaData("metadataValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHECK_NEIGHBORS, new org.apache.thrift.meta_data.FieldMetaData("checkNeighbors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CHECK_BUDDIES, new org.apache.thrift.meta_data.FieldMetaData("checkBuddies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUsingQuery_args.class, metaDataMap);
    }

    public findUsingQuery_args() {
    }

    public findUsingQuery_args(
      java.lang.String metadataKey,
      java.lang.String metadataValue,
      boolean checkNeighbors,
      boolean checkBuddies)
    {
      this();
      this.metadataKey = metadataKey;
      this.metadataValue = metadataValue;
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUsingQuery_args(findUsingQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMetadataKey()) {
        this.metadataKey = other.metadataKey;
      }
      if (other.isSetMetadataValue()) {
        this.metadataValue = other.metadataValue;
      }
      this.checkNeighbors = other.checkNeighbors;
      this.checkBuddies = other.checkBuddies;
    }

    public findUsingQuery_args deepCopy() {
      return new findUsingQuery_args(this);
    }

    @Override
    public void clear() {
      this.metadataKey = null;
      this.metadataValue = null;
      setCheckNeighborsIsSet(false);
      this.checkNeighbors = false;
      setCheckBuddiesIsSet(false);
      this.checkBuddies = false;
    }

    public java.lang.String getMetadataKey() {
      return this.metadataKey;
    }

    public findUsingQuery_args setMetadataKey(java.lang.String metadataKey) {
      this.metadataKey = metadataKey;
      return this;
    }

    public void unsetMetadataKey() {
      this.metadataKey = null;
    }

    /** Returns true if field metadataKey is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataKey() {
      return this.metadataKey != null;
    }

    public void setMetadataKeyIsSet(boolean value) {
      if (!value) {
        this.metadataKey = null;
      }
    }

    public java.lang.String getMetadataValue() {
      return this.metadataValue;
    }

    public findUsingQuery_args setMetadataValue(java.lang.String metadataValue) {
      this.metadataValue = metadataValue;
      return this;
    }

    public void unsetMetadataValue() {
      this.metadataValue = null;
    }

    /** Returns true if field metadataValue is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadataValue() {
      return this.metadataValue != null;
    }

    public void setMetadataValueIsSet(boolean value) {
      if (!value) {
        this.metadataValue = null;
      }
    }

    public boolean isCheckNeighbors() {
      return this.checkNeighbors;
    }

    public findUsingQuery_args setCheckNeighbors(boolean checkNeighbors) {
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      return this;
    }

    public void unsetCheckNeighbors() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    /** Returns true if field checkNeighbors is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckNeighbors() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    public void setCheckNeighborsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID, value);
    }

    public boolean isCheckBuddies() {
      return this.checkBuddies;
    }

    public findUsingQuery_args setCheckBuddies(boolean checkBuddies) {
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
      return this;
    }

    public void unsetCheckBuddies() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    /** Returns true if field checkBuddies is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckBuddies() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    public void setCheckBuddiesIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA_KEY:
        if (value == null) {
          unsetMetadataKey();
        } else {
          setMetadataKey((java.lang.String)value);
        }
        break;

      case METADATA_VALUE:
        if (value == null) {
          unsetMetadataValue();
        } else {
          setMetadataValue((java.lang.String)value);
        }
        break;

      case CHECK_NEIGHBORS:
        if (value == null) {
          unsetCheckNeighbors();
        } else {
          setCheckNeighbors((java.lang.Boolean)value);
        }
        break;

      case CHECK_BUDDIES:
        if (value == null) {
          unsetCheckBuddies();
        } else {
          setCheckBuddies((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA_KEY:
        return getMetadataKey();

      case METADATA_VALUE:
        return getMetadataValue();

      case CHECK_NEIGHBORS:
        return isCheckNeighbors();

      case CHECK_BUDDIES:
        return isCheckBuddies();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA_KEY:
        return isSetMetadataKey();
      case METADATA_VALUE:
        return isSetMetadataValue();
      case CHECK_NEIGHBORS:
        return isSetCheckNeighbors();
      case CHECK_BUDDIES:
        return isSetCheckBuddies();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUsingQuery_args)
        return this.equals((findUsingQuery_args)that);
      return false;
    }

    public boolean equals(findUsingQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadataKey = true && this.isSetMetadataKey();
      boolean that_present_metadataKey = true && that.isSetMetadataKey();
      if (this_present_metadataKey || that_present_metadataKey) {
        if (!(this_present_metadataKey && that_present_metadataKey))
          return false;
        if (!this.metadataKey.equals(that.metadataKey))
          return false;
      }

      boolean this_present_metadataValue = true && this.isSetMetadataValue();
      boolean that_present_metadataValue = true && that.isSetMetadataValue();
      if (this_present_metadataValue || that_present_metadataValue) {
        if (!(this_present_metadataValue && that_present_metadataValue))
          return false;
        if (!this.metadataValue.equals(that.metadataValue))
          return false;
      }

      boolean this_present_checkNeighbors = true;
      boolean that_present_checkNeighbors = true;
      if (this_present_checkNeighbors || that_present_checkNeighbors) {
        if (!(this_present_checkNeighbors && that_present_checkNeighbors))
          return false;
        if (this.checkNeighbors != that.checkNeighbors)
          return false;
      }

      boolean this_present_checkBuddies = true;
      boolean that_present_checkBuddies = true;
      if (this_present_checkBuddies || that_present_checkBuddies) {
        if (!(this_present_checkBuddies && that_present_checkBuddies))
          return false;
        if (this.checkBuddies != that.checkBuddies)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadataKey()) ? 131071 : 524287);
      if (isSetMetadataKey())
        hashCode = hashCode * 8191 + metadataKey.hashCode();

      hashCode = hashCode * 8191 + ((isSetMetadataValue()) ? 131071 : 524287);
      if (isSetMetadataValue())
        hashCode = hashCode * 8191 + metadataValue.hashCode();

      hashCode = hashCode * 8191 + ((checkNeighbors) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((checkBuddies) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(findUsingQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadataKey()).compareTo(other.isSetMetadataKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataKey, other.metadataKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMetadataValue()).compareTo(other.isSetMetadataValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadataValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataValue, other.metadataValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckNeighbors()).compareTo(other.isSetCheckNeighbors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckNeighbors()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkNeighbors, other.checkNeighbors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckBuddies()).compareTo(other.isSetCheckBuddies());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckBuddies()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkBuddies, other.checkBuddies);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUsingQuery_args(");
      boolean first = true;

      sb.append("metadataKey:");
      if (this.metadataKey == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("metadataValue:");
      if (this.metadataValue == null) {
        sb.append("null");
      } else {
        sb.append(this.metadataValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkNeighbors:");
      sb.append(this.checkNeighbors);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkBuddies:");
      sb.append(this.checkBuddies);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUsingQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUsingQuery_argsStandardScheme getScheme() {
        return new findUsingQuery_argsStandardScheme();
      }
    }

    private static class findUsingQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUsingQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUsingQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataKey = iprot.readString();
                struct.setMetadataKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METADATA_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadataValue = iprot.readString();
                struct.setMetadataValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHECK_NEIGHBORS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkNeighbors = iprot.readBool();
                struct.setCheckNeighborsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHECK_BUDDIES
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkBuddies = iprot.readBool();
                struct.setCheckBuddiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUsingQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadataKey != null) {
          oprot.writeFieldBegin(METADATA_KEY_FIELD_DESC);
          oprot.writeString(struct.metadataKey);
          oprot.writeFieldEnd();
        }
        if (struct.metadataValue != null) {
          oprot.writeFieldBegin(METADATA_VALUE_FIELD_DESC);
          oprot.writeString(struct.metadataValue);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHECK_NEIGHBORS_FIELD_DESC);
        oprot.writeBool(struct.checkNeighbors);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHECK_BUDDIES_FIELD_DESC);
        oprot.writeBool(struct.checkBuddies);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUsingQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUsingQuery_argsTupleScheme getScheme() {
        return new findUsingQuery_argsTupleScheme();
      }
    }

    private static class findUsingQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUsingQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUsingQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadataKey()) {
          optionals.set(0);
        }
        if (struct.isSetMetadataValue()) {
          optionals.set(1);
        }
        if (struct.isSetCheckNeighbors()) {
          optionals.set(2);
        }
        if (struct.isSetCheckBuddies()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMetadataKey()) {
          oprot.writeString(struct.metadataKey);
        }
        if (struct.isSetMetadataValue()) {
          oprot.writeString(struct.metadataValue);
        }
        if (struct.isSetCheckNeighbors()) {
          oprot.writeBool(struct.checkNeighbors);
        }
        if (struct.isSetCheckBuddies()) {
          oprot.writeBool(struct.checkBuddies);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUsingQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.metadataKey = iprot.readString();
          struct.setMetadataKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.metadataValue = iprot.readString();
          struct.setMetadataValueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.checkNeighbors = iprot.readBool();
          struct.setCheckNeighborsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.checkBuddies = iprot.readBool();
          struct.setCheckBuddiesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findUsingQuery_result implements org.apache.thrift.TBase<findUsingQuery_result, findUsingQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUsingQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUsingQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findUsingQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findUsingQuery_resultTupleSchemeFactory();

    public QueryReplica success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryReplica.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUsingQuery_result.class, metaDataMap);
    }

    public findUsingQuery_result() {
    }

    public findUsingQuery_result(
      QueryReplica success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUsingQuery_result(findUsingQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new QueryReplica(other.success);
      }
    }

    public findUsingQuery_result deepCopy() {
      return new findUsingQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public QueryReplica getSuccess() {
      return this.success;
    }

    public findUsingQuery_result setSuccess(QueryReplica success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((QueryReplica)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findUsingQuery_result)
        return this.equals((findUsingQuery_result)that);
      return false;
    }

    public boolean equals(findUsingQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findUsingQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findUsingQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUsingQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUsingQuery_resultStandardScheme getScheme() {
        return new findUsingQuery_resultStandardScheme();
      }
    }

    private static class findUsingQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findUsingQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUsingQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new QueryReplica();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUsingQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUsingQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findUsingQuery_resultTupleScheme getScheme() {
        return new findUsingQuery_resultTupleScheme();
      }
    }

    private static class findUsingQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findUsingQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUsingQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUsingQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new QueryReplica();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMeta_args implements org.apache.thrift.TBase<getMeta_args, getMeta_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMeta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeta_args");

    private static final org.apache.thrift.protocol.TField MICROBATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("microbatchId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHECK_NEIGHBORS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkNeighbors", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField CHECK_BUDDIES_FIELD_DESC = new org.apache.thrift.protocol.TField("checkBuddies", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMeta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMeta_argsTupleSchemeFactory();

    public long microbatchId; // required
    public boolean checkNeighbors; // required
    public boolean checkBuddies; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MICROBATCH_ID((short)1, "microbatchId"),
      CHECK_NEIGHBORS((short)2, "checkNeighbors"),
      CHECK_BUDDIES((short)3, "checkBuddies");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MICROBATCH_ID
            return MICROBATCH_ID;
          case 2: // CHECK_NEIGHBORS
            return CHECK_NEIGHBORS;
          case 3: // CHECK_BUDDIES
            return CHECK_BUDDIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MICROBATCHID_ISSET_ID = 0;
    private static final int __CHECKNEIGHBORS_ISSET_ID = 1;
    private static final int __CHECKBUDDIES_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MICROBATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("microbatchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHECK_NEIGHBORS, new org.apache.thrift.meta_data.FieldMetaData("checkNeighbors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CHECK_BUDDIES, new org.apache.thrift.meta_data.FieldMetaData("checkBuddies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeta_args.class, metaDataMap);
    }

    public getMeta_args() {
    }

    public getMeta_args(
      long microbatchId,
      boolean checkNeighbors,
      boolean checkBuddies)
    {
      this();
      this.microbatchId = microbatchId;
      setMicrobatchIdIsSet(true);
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeta_args(getMeta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.microbatchId = other.microbatchId;
      this.checkNeighbors = other.checkNeighbors;
      this.checkBuddies = other.checkBuddies;
    }

    public getMeta_args deepCopy() {
      return new getMeta_args(this);
    }

    @Override
    public void clear() {
      setMicrobatchIdIsSet(false);
      this.microbatchId = 0;
      setCheckNeighborsIsSet(false);
      this.checkNeighbors = false;
      setCheckBuddiesIsSet(false);
      this.checkBuddies = false;
    }

    public long getMicrobatchId() {
      return this.microbatchId;
    }

    public getMeta_args setMicrobatchId(long microbatchId) {
      this.microbatchId = microbatchId;
      setMicrobatchIdIsSet(true);
      return this;
    }

    public void unsetMicrobatchId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MICROBATCHID_ISSET_ID);
    }

    /** Returns true if field microbatchId is set (has been assigned a value) and false otherwise */
    public boolean isSetMicrobatchId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MICROBATCHID_ISSET_ID);
    }

    public void setMicrobatchIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MICROBATCHID_ISSET_ID, value);
    }

    public boolean isCheckNeighbors() {
      return this.checkNeighbors;
    }

    public getMeta_args setCheckNeighbors(boolean checkNeighbors) {
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      return this;
    }

    public void unsetCheckNeighbors() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    /** Returns true if field checkNeighbors is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckNeighbors() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    public void setCheckNeighborsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID, value);
    }

    public boolean isCheckBuddies() {
      return this.checkBuddies;
    }

    public getMeta_args setCheckBuddies(boolean checkBuddies) {
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
      return this;
    }

    public void unsetCheckBuddies() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    /** Returns true if field checkBuddies is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckBuddies() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    public void setCheckBuddiesIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MICROBATCH_ID:
        if (value == null) {
          unsetMicrobatchId();
        } else {
          setMicrobatchId((java.lang.Long)value);
        }
        break;

      case CHECK_NEIGHBORS:
        if (value == null) {
          unsetCheckNeighbors();
        } else {
          setCheckNeighbors((java.lang.Boolean)value);
        }
        break;

      case CHECK_BUDDIES:
        if (value == null) {
          unsetCheckBuddies();
        } else {
          setCheckBuddies((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MICROBATCH_ID:
        return getMicrobatchId();

      case CHECK_NEIGHBORS:
        return isCheckNeighbors();

      case CHECK_BUDDIES:
        return isCheckBuddies();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MICROBATCH_ID:
        return isSetMicrobatchId();
      case CHECK_NEIGHBORS:
        return isSetCheckNeighbors();
      case CHECK_BUDDIES:
        return isSetCheckBuddies();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMeta_args)
        return this.equals((getMeta_args)that);
      return false;
    }

    public boolean equals(getMeta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_microbatchId = true;
      boolean that_present_microbatchId = true;
      if (this_present_microbatchId || that_present_microbatchId) {
        if (!(this_present_microbatchId && that_present_microbatchId))
          return false;
        if (this.microbatchId != that.microbatchId)
          return false;
      }

      boolean this_present_checkNeighbors = true;
      boolean that_present_checkNeighbors = true;
      if (this_present_checkNeighbors || that_present_checkNeighbors) {
        if (!(this_present_checkNeighbors && that_present_checkNeighbors))
          return false;
        if (this.checkNeighbors != that.checkNeighbors)
          return false;
      }

      boolean this_present_checkBuddies = true;
      boolean that_present_checkBuddies = true;
      if (this_present_checkBuddies || that_present_checkBuddies) {
        if (!(this_present_checkBuddies && that_present_checkBuddies))
          return false;
        if (this.checkBuddies != that.checkBuddies)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(microbatchId);

      hashCode = hashCode * 8191 + ((checkNeighbors) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((checkBuddies) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getMeta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMicrobatchId()).compareTo(other.isSetMicrobatchId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMicrobatchId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.microbatchId, other.microbatchId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckNeighbors()).compareTo(other.isSetCheckNeighbors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckNeighbors()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkNeighbors, other.checkNeighbors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckBuddies()).compareTo(other.isSetCheckBuddies());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckBuddies()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkBuddies, other.checkBuddies);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMeta_args(");
      boolean first = true;

      sb.append("microbatchId:");
      sb.append(this.microbatchId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkNeighbors:");
      sb.append(this.checkNeighbors);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkBuddies:");
      sb.append(this.checkBuddies);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMeta_argsStandardScheme getScheme() {
        return new getMeta_argsStandardScheme();
      }
    }

    private static class getMeta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMeta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MICROBATCH_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.microbatchId = iprot.readI64();
                struct.setMicrobatchIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHECK_NEIGHBORS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkNeighbors = iprot.readBool();
                struct.setCheckNeighborsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHECK_BUDDIES
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkBuddies = iprot.readBool();
                struct.setCheckBuddiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MICROBATCH_ID_FIELD_DESC);
        oprot.writeI64(struct.microbatchId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHECK_NEIGHBORS_FIELD_DESC);
        oprot.writeBool(struct.checkNeighbors);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHECK_BUDDIES_FIELD_DESC);
        oprot.writeBool(struct.checkBuddies);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMeta_argsTupleScheme getScheme() {
        return new getMeta_argsTupleScheme();
      }
    }

    private static class getMeta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMeta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMicrobatchId()) {
          optionals.set(0);
        }
        if (struct.isSetCheckNeighbors()) {
          optionals.set(1);
        }
        if (struct.isSetCheckBuddies()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMicrobatchId()) {
          oprot.writeI64(struct.microbatchId);
        }
        if (struct.isSetCheckNeighbors()) {
          oprot.writeBool(struct.checkNeighbors);
        }
        if (struct.isSetCheckBuddies()) {
          oprot.writeBool(struct.checkBuddies);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.microbatchId = iprot.readI64();
          struct.setMicrobatchIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.checkNeighbors = iprot.readBool();
          struct.setCheckNeighborsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.checkBuddies = iprot.readBool();
          struct.setCheckBuddiesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMeta_result implements org.apache.thrift.TBase<getMeta_result, getMeta_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMeta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMeta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMeta_resultTupleSchemeFactory();

    public ReadReplica success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReadReplica.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeta_result.class, metaDataMap);
    }

    public getMeta_result() {
    }

    public getMeta_result(
      ReadReplica success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeta_result(getMeta_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReadReplica(other.success);
      }
    }

    public getMeta_result deepCopy() {
      return new getMeta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReadReplica getSuccess() {
      return this.success;
    }

    public getMeta_result setSuccess(ReadReplica success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReadReplica)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMeta_result)
        return this.equals((getMeta_result)that);
      return false;
    }

    public boolean equals(getMeta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMeta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMeta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMeta_resultStandardScheme getScheme() {
        return new getMeta_resultStandardScheme();
      }
    }

    private static class getMeta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMeta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReadReplica();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMeta_resultTupleScheme getScheme() {
        return new getMeta_resultTupleScheme();
      }
    }

    private static class getMeta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMeta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReadReplica();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class serializeState_args implements org.apache.thrift.TBase<serializeState_args, serializeState_args._Fields>, java.io.Serializable, Cloneable, Comparable<serializeState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serializeState_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new serializeState_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new serializeState_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serializeState_args.class, metaDataMap);
    }

    public serializeState_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serializeState_args(serializeState_args other) {
    }

    public serializeState_args deepCopy() {
      return new serializeState_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof serializeState_args)
        return this.equals((serializeState_args)that);
      return false;
    }

    public boolean equals(serializeState_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(serializeState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("serializeState_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serializeState_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serializeState_argsStandardScheme getScheme() {
        return new serializeState_argsStandardScheme();
      }
    }

    private static class serializeState_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<serializeState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serializeState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serializeState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serializeState_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serializeState_argsTupleScheme getScheme() {
        return new serializeState_argsTupleScheme();
      }
    }

    private static class serializeState_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<serializeState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serializeState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serializeState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class serializeState_result implements org.apache.thrift.TBase<serializeState_result, serializeState_result._Fields>, java.io.Serializable, Cloneable, Comparable<serializeState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serializeState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new serializeState_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new serializeState_resultTupleSchemeFactory();

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serializeState_result.class, metaDataMap);
    }

    public serializeState_result() {
    }

    public serializeState_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serializeState_result(serializeState_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public serializeState_result deepCopy() {
      return new serializeState_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public serializeState_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Byte)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof serializeState_result)
        return this.equals((serializeState_result)that);
      return false;
    }

    public boolean equals(serializeState_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + (int) (success);

      return hashCode;
    }

    @Override
    public int compareTo(serializeState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("serializeState_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serializeState_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serializeState_resultStandardScheme getScheme() {
        return new serializeState_resultStandardScheme();
      }
    }

    private static class serializeState_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<serializeState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serializeState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serializeState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeByte(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serializeState_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serializeState_resultTupleScheme getScheme() {
        return new serializeState_resultTupleScheme();
      }
    }

    private static class serializeState_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<serializeState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serializeState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serializeState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateStreamMetadata_args implements org.apache.thrift.TBase<updateStreamMetadata_args, updateStreamMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStreamMetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStreamMetadata_args");

    private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateStreamMetadata_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateStreamMetadata_argsTupleSchemeFactory();

    public StreamMetadata metadata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA((short)1, "metadata");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA
            return METADATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamMetadata.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStreamMetadata_args.class, metaDataMap);
    }

    public updateStreamMetadata_args() {
    }

    public updateStreamMetadata_args(
      StreamMetadata metadata)
    {
      this();
      this.metadata = metadata;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStreamMetadata_args(updateStreamMetadata_args other) {
      if (other.isSetMetadata()) {
        this.metadata = new StreamMetadata(other.metadata);
      }
    }

    public updateStreamMetadata_args deepCopy() {
      return new updateStreamMetadata_args(this);
    }

    @Override
    public void clear() {
      this.metadata = null;
    }

    public StreamMetadata getMetadata() {
      return this.metadata;
    }

    public updateStreamMetadata_args setMetadata(StreamMetadata metadata) {
      this.metadata = metadata;
      return this;
    }

    public void unsetMetadata() {
      this.metadata = null;
    }

    /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadata() {
      return this.metadata != null;
    }

    public void setMetadataIsSet(boolean value) {
      if (!value) {
        this.metadata = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          setMetadata((StreamMetadata)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA:
        return getMetadata();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case METADATA:
        return isSetMetadata();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStreamMetadata_args)
        return this.equals((updateStreamMetadata_args)that);
      return false;
    }

    public boolean equals(updateStreamMetadata_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metadata = true && this.isSetMetadata();
      boolean that_present_metadata = true && that.isSetMetadata();
      if (this_present_metadata || that_present_metadata) {
        if (!(this_present_metadata && that_present_metadata))
          return false;
        if (!this.metadata.equals(that.metadata))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetadata()) ? 131071 : 524287);
      if (isSetMetadata())
        hashCode = hashCode * 8191 + metadata.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateStreamMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateStreamMetadata_args(");
      boolean first = true;

      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (metadata != null) {
        metadata.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStreamMetadata_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateStreamMetadata_argsStandardScheme getScheme() {
        return new updateStreamMetadata_argsStandardScheme();
      }
    }

    private static class updateStreamMetadata_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateStreamMetadata_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStreamMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.metadata = new StreamMetadata();
                struct.metadata.read(iprot);
                struct.setMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStreamMetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadata != null) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          struct.metadata.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStreamMetadata_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateStreamMetadata_argsTupleScheme getScheme() {
        return new updateStreamMetadata_argsTupleScheme();
      }
    }

    private static class updateStreamMetadata_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateStreamMetadata_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStreamMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetadata()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMetadata()) {
          struct.metadata.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStreamMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.metadata = new StreamMetadata();
          struct.metadata.read(iprot);
          struct.setMetadataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateStreamMetadata_result implements org.apache.thrift.TBase<updateStreamMetadata_result, updateStreamMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStreamMetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStreamMetadata_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateStreamMetadata_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateStreamMetadata_resultTupleSchemeFactory();

    public StreamMetadataUpdateResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamMetadataUpdateResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStreamMetadata_result.class, metaDataMap);
    }

    public updateStreamMetadata_result() {
    }

    public updateStreamMetadata_result(
      StreamMetadataUpdateResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStreamMetadata_result(updateStreamMetadata_result other) {
      if (other.isSetSuccess()) {
        this.success = new StreamMetadataUpdateResponse(other.success);
      }
    }

    public updateStreamMetadata_result deepCopy() {
      return new updateStreamMetadata_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StreamMetadataUpdateResponse getSuccess() {
      return this.success;
    }

    public updateStreamMetadata_result setSuccess(StreamMetadataUpdateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StreamMetadataUpdateResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStreamMetadata_result)
        return this.equals((updateStreamMetadata_result)that);
      return false;
    }

    public boolean equals(updateStreamMetadata_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateStreamMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateStreamMetadata_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStreamMetadata_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateStreamMetadata_resultStandardScheme getScheme() {
        return new updateStreamMetadata_resultStandardScheme();
      }
    }

    private static class updateStreamMetadata_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateStreamMetadata_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStreamMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StreamMetadataUpdateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStreamMetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStreamMetadata_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateStreamMetadata_resultTupleScheme getScheme() {
        return new updateStreamMetadata_resultTupleScheme();
      }
    }

    private static class updateStreamMetadata_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateStreamMetadata_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStreamMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStreamMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StreamMetadataUpdateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class open_args implements org.apache.thrift.TBase<open_args, open_args._Fields>, java.io.Serializable, Cloneable, Comparable<open_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_args");

    private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EXPECTED_LEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedLease", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SET_LEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("setLease", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new open_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new open_argsTupleSchemeFactory();

    public java.lang.String streamId; // required
    public java.lang.String clientId; // required
    public int expectedLease; // required
    public boolean setLease; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_ID((short)1, "streamId"),
      CLIENT_ID((short)2, "clientId"),
      EXPECTED_LEASE((short)3, "expectedLease"),
      SET_LEASE((short)4, "setLease");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_ID
            return STREAM_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // EXPECTED_LEASE
            return EXPECTED_LEASE;
          case 4: // SET_LEASE
            return SET_LEASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPECTEDLEASE_ISSET_ID = 0;
    private static final int __SETLEASE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("streamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXPECTED_LEASE, new org.apache.thrift.meta_data.FieldMetaData("expectedLease", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SET_LEASE, new org.apache.thrift.meta_data.FieldMetaData("setLease", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_args.class, metaDataMap);
    }

    public open_args() {
    }

    public open_args(
      java.lang.String streamId,
      java.lang.String clientId,
      int expectedLease,
      boolean setLease)
    {
      this();
      this.streamId = streamId;
      this.clientId = clientId;
      this.expectedLease = expectedLease;
      setExpectedLeaseIsSet(true);
      this.setLease = setLease;
      setSetLeaseIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_args(open_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStreamId()) {
        this.streamId = other.streamId;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.expectedLease = other.expectedLease;
      this.setLease = other.setLease;
    }

    public open_args deepCopy() {
      return new open_args(this);
    }

    @Override
    public void clear() {
      this.streamId = null;
      this.clientId = null;
      setExpectedLeaseIsSet(false);
      this.expectedLease = 0;
      setSetLeaseIsSet(false);
      this.setLease = false;
    }

    public java.lang.String getStreamId() {
      return this.streamId;
    }

    public open_args setStreamId(java.lang.String streamId) {
      this.streamId = streamId;
      return this;
    }

    public void unsetStreamId() {
      this.streamId = null;
    }

    /** Returns true if field streamId is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamId() {
      return this.streamId != null;
    }

    public void setStreamIdIsSet(boolean value) {
      if (!value) {
        this.streamId = null;
      }
    }

    public java.lang.String getClientId() {
      return this.clientId;
    }

    public open_args setClientId(java.lang.String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public int getExpectedLease() {
      return this.expectedLease;
    }

    public open_args setExpectedLease(int expectedLease) {
      this.expectedLease = expectedLease;
      setExpectedLeaseIsSet(true);
      return this;
    }

    public void unsetExpectedLease() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPECTEDLEASE_ISSET_ID);
    }

    /** Returns true if field expectedLease is set (has been assigned a value) and false otherwise */
    public boolean isSetExpectedLease() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPECTEDLEASE_ISSET_ID);
    }

    public void setExpectedLeaseIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPECTEDLEASE_ISSET_ID, value);
    }

    public boolean isSetLease() {
      return this.setLease;
    }

    public open_args setSetLease(boolean setLease) {
      this.setLease = setLease;
      setSetLeaseIsSet(true);
      return this;
    }

    public void unsetSetLease() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SETLEASE_ISSET_ID);
    }

    /** Returns true if field setLease is set (has been assigned a value) and false otherwise */
    public boolean isSetSetLease() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SETLEASE_ISSET_ID);
    }

    public void setSetLeaseIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SETLEASE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STREAM_ID:
        if (value == null) {
          unsetStreamId();
        } else {
          setStreamId((java.lang.String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((java.lang.String)value);
        }
        break;

      case EXPECTED_LEASE:
        if (value == null) {
          unsetExpectedLease();
        } else {
          setExpectedLease((java.lang.Integer)value);
        }
        break;

      case SET_LEASE:
        if (value == null) {
          unsetSetLease();
        } else {
          setSetLease((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_ID:
        return getStreamId();

      case CLIENT_ID:
        return getClientId();

      case EXPECTED_LEASE:
        return getExpectedLease();

      case SET_LEASE:
        return isSetLease();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STREAM_ID:
        return isSetStreamId();
      case CLIENT_ID:
        return isSetClientId();
      case EXPECTED_LEASE:
        return isSetExpectedLease();
      case SET_LEASE:
        return isSetSetLease();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof open_args)
        return this.equals((open_args)that);
      return false;
    }

    public boolean equals(open_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_streamId = true && this.isSetStreamId();
      boolean that_present_streamId = true && that.isSetStreamId();
      if (this_present_streamId || that_present_streamId) {
        if (!(this_present_streamId && that_present_streamId))
          return false;
        if (!this.streamId.equals(that.streamId))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_expectedLease = true;
      boolean that_present_expectedLease = true;
      if (this_present_expectedLease || that_present_expectedLease) {
        if (!(this_present_expectedLease && that_present_expectedLease))
          return false;
        if (this.expectedLease != that.expectedLease)
          return false;
      }

      boolean this_present_setLease = true;
      boolean that_present_setLease = true;
      if (this_present_setLease || that_present_setLease) {
        if (!(this_present_setLease && that_present_setLease))
          return false;
        if (this.setLease != that.setLease)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStreamId()) ? 131071 : 524287);
      if (isSetStreamId())
        hashCode = hashCode * 8191 + streamId.hashCode();

      hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
      if (isSetClientId())
        hashCode = hashCode * 8191 + clientId.hashCode();

      hashCode = hashCode * 8191 + expectedLease;

      hashCode = hashCode * 8191 + ((setLease) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(open_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStreamId()).compareTo(other.isSetStreamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamId, other.streamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExpectedLease()).compareTo(other.isSetExpectedLease());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpectedLease()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedLease, other.expectedLease);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSetLease()).compareTo(other.isSetSetLease());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSetLease()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setLease, other.setLease);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("open_args(");
      boolean first = true;

      sb.append("streamId:");
      if (this.streamId == null) {
        sb.append("null");
      } else {
        sb.append(this.streamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("expectedLease:");
      sb.append(this.expectedLease);
      first = false;
      if (!first) sb.append(", ");
      sb.append("setLease:");
      sb.append(this.setLease);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class open_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public open_argsStandardScheme getScheme() {
        return new open_argsStandardScheme();
      }
    }

    private static class open_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<open_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, open_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamId = iprot.readString();
                struct.setStreamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXPECTED_LEASE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.expectedLease = iprot.readI32();
                struct.setExpectedLeaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SET_LEASE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.setLease = iprot.readBool();
                struct.setSetLeaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, open_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamId != null) {
          oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
          oprot.writeString(struct.streamId);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EXPECTED_LEASE_FIELD_DESC);
        oprot.writeI32(struct.expectedLease);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SET_LEASE_FIELD_DESC);
        oprot.writeBool(struct.setLease);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class open_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public open_argsTupleScheme getScheme() {
        return new open_argsTupleScheme();
      }
    }

    private static class open_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<open_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, open_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStreamId()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetExpectedLease()) {
          optionals.set(2);
        }
        if (struct.isSetSetLease()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetStreamId()) {
          oprot.writeString(struct.streamId);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetExpectedLease()) {
          oprot.writeI32(struct.expectedLease);
        }
        if (struct.isSetSetLease()) {
          oprot.writeBool(struct.setLease);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, open_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.streamId = iprot.readString();
          struct.setStreamIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.expectedLease = iprot.readI32();
          struct.setExpectedLeaseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.setLease = iprot.readBool();
          struct.setSetLeaseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class open_result implements org.apache.thrift.TBase<open_result, open_result._Fields>, java.io.Serializable, Cloneable, Comparable<open_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new open_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new open_resultTupleSchemeFactory();

    public OpenStreamResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OpenStreamResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_result.class, metaDataMap);
    }

    public open_result() {
    }

    public open_result(
      OpenStreamResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_result(open_result other) {
      if (other.isSetSuccess()) {
        this.success = new OpenStreamResponse(other.success);
      }
    }

    public open_result deepCopy() {
      return new open_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OpenStreamResponse getSuccess() {
      return this.success;
    }

    public open_result setSuccess(OpenStreamResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OpenStreamResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof open_result)
        return this.equals((open_result)that);
      return false;
    }

    public boolean equals(open_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(open_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("open_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class open_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public open_resultStandardScheme getScheme() {
        return new open_resultStandardScheme();
      }
    }

    private static class open_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<open_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, open_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OpenStreamResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, open_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class open_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public open_resultTupleScheme getScheme() {
        return new open_resultTupleScheme();
      }
    }

    private static class open_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<open_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, open_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, open_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OpenStreamResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putNext_args implements org.apache.thrift.TBase<putNext_args, putNext_args._Fields>, java.io.Serializable, Cloneable, Comparable<putNext_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putNext_args");

    private static final org.apache.thrift.protocol.TField MB_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mbMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("preference", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField META_KEY_VALUE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("metaKeyValueMap", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putNext_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putNext_argsTupleSchemeFactory();

    public Metadata mbMetadata; // required
    public java.nio.ByteBuffer data; // required
    /**
     * 
     * @see WritePreference
     */
    public WritePreference preference; // required
    public java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MB_METADATA((short)1, "mbMetadata"),
      DATA((short)2, "data"),
      /**
       * 
       * @see WritePreference
       */
      PREFERENCE((short)3, "preference"),
      META_KEY_VALUE_MAP((short)4, "metaKeyValueMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MB_METADATA
            return MB_METADATA;
          case 2: // DATA
            return DATA;
          case 3: // PREFERENCE
            return PREFERENCE;
          case 4: // META_KEY_VALUE_MAP
            return META_KEY_VALUE_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MB_METADATA, new org.apache.thrift.meta_data.FieldMetaData("mbMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metadata.class)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.PREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("preference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WritePreference.class)));
      tmpMap.put(_Fields.META_KEY_VALUE_MAP, new org.apache.thrift.meta_data.FieldMetaData("metaKeyValueMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putNext_args.class, metaDataMap);
    }

    public putNext_args() {
    }

    public putNext_args(
      Metadata mbMetadata,
      java.nio.ByteBuffer data,
      WritePreference preference,
      java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap)
    {
      this();
      this.mbMetadata = mbMetadata;
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
      this.preference = preference;
      this.metaKeyValueMap = metaKeyValueMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putNext_args(putNext_args other) {
      if (other.isSetMbMetadata()) {
        this.mbMetadata = new Metadata(other.mbMetadata);
      }
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
      }
      if (other.isSetPreference()) {
        this.preference = other.preference;
      }
      if (other.isSetMetaKeyValueMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.metaKeyValueMap);
        this.metaKeyValueMap = __this__metaKeyValueMap;
      }
    }

    public putNext_args deepCopy() {
      return new putNext_args(this);
    }

    @Override
    public void clear() {
      this.mbMetadata = null;
      this.data = null;
      this.preference = null;
      this.metaKeyValueMap = null;
    }

    public Metadata getMbMetadata() {
      return this.mbMetadata;
    }

    public putNext_args setMbMetadata(Metadata mbMetadata) {
      this.mbMetadata = mbMetadata;
      return this;
    }

    public void unsetMbMetadata() {
      this.mbMetadata = null;
    }

    /** Returns true if field mbMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMbMetadata() {
      return this.mbMetadata != null;
    }

    public void setMbMetadataIsSet(boolean value) {
      if (!value) {
        this.mbMetadata = null;
      }
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public java.nio.ByteBuffer bufferForData() {
      return org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    public putNext_args setData(byte[] data) {
      this.data = data == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(data.clone());
      return this;
    }

    public putNext_args setData(java.nio.ByteBuffer data) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    /**
     * 
     * @see WritePreference
     */
    public WritePreference getPreference() {
      return this.preference;
    }

    /**
     * 
     * @see WritePreference
     */
    public putNext_args setPreference(WritePreference preference) {
      this.preference = preference;
      return this;
    }

    public void unsetPreference() {
      this.preference = null;
    }

    /** Returns true if field preference is set (has been assigned a value) and false otherwise */
    public boolean isSetPreference() {
      return this.preference != null;
    }

    public void setPreferenceIsSet(boolean value) {
      if (!value) {
        this.preference = null;
      }
    }

    public int getMetaKeyValueMapSize() {
      return (this.metaKeyValueMap == null) ? 0 : this.metaKeyValueMap.size();
    }

    public void putToMetaKeyValueMap(java.lang.String key, java.lang.String val) {
      if (this.metaKeyValueMap == null) {
        this.metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.metaKeyValueMap.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getMetaKeyValueMap() {
      return this.metaKeyValueMap;
    }

    public putNext_args setMetaKeyValueMap(java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap) {
      this.metaKeyValueMap = metaKeyValueMap;
      return this;
    }

    public void unsetMetaKeyValueMap() {
      this.metaKeyValueMap = null;
    }

    /** Returns true if field metaKeyValueMap is set (has been assigned a value) and false otherwise */
    public boolean isSetMetaKeyValueMap() {
      return this.metaKeyValueMap != null;
    }

    public void setMetaKeyValueMapIsSet(boolean value) {
      if (!value) {
        this.metaKeyValueMap = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MB_METADATA:
        if (value == null) {
          unsetMbMetadata();
        } else {
          setMbMetadata((Metadata)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          if (value instanceof byte[]) {
            setData((byte[])value);
          } else {
            setData((java.nio.ByteBuffer)value);
          }
        }
        break;

      case PREFERENCE:
        if (value == null) {
          unsetPreference();
        } else {
          setPreference((WritePreference)value);
        }
        break;

      case META_KEY_VALUE_MAP:
        if (value == null) {
          unsetMetaKeyValueMap();
        } else {
          setMetaKeyValueMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MB_METADATA:
        return getMbMetadata();

      case DATA:
        return getData();

      case PREFERENCE:
        return getPreference();

      case META_KEY_VALUE_MAP:
        return getMetaKeyValueMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MB_METADATA:
        return isSetMbMetadata();
      case DATA:
        return isSetData();
      case PREFERENCE:
        return isSetPreference();
      case META_KEY_VALUE_MAP:
        return isSetMetaKeyValueMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putNext_args)
        return this.equals((putNext_args)that);
      return false;
    }

    public boolean equals(putNext_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mbMetadata = true && this.isSetMbMetadata();
      boolean that_present_mbMetadata = true && that.isSetMbMetadata();
      if (this_present_mbMetadata || that_present_mbMetadata) {
        if (!(this_present_mbMetadata && that_present_mbMetadata))
          return false;
        if (!this.mbMetadata.equals(that.mbMetadata))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_preference = true && this.isSetPreference();
      boolean that_present_preference = true && that.isSetPreference();
      if (this_present_preference || that_present_preference) {
        if (!(this_present_preference && that_present_preference))
          return false;
        if (!this.preference.equals(that.preference))
          return false;
      }

      boolean this_present_metaKeyValueMap = true && this.isSetMetaKeyValueMap();
      boolean that_present_metaKeyValueMap = true && that.isSetMetaKeyValueMap();
      if (this_present_metaKeyValueMap || that_present_metaKeyValueMap) {
        if (!(this_present_metaKeyValueMap && that_present_metaKeyValueMap))
          return false;
        if (!this.metaKeyValueMap.equals(that.metaKeyValueMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMbMetadata()) ? 131071 : 524287);
      if (isSetMbMetadata())
        hashCode = hashCode * 8191 + mbMetadata.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      hashCode = hashCode * 8191 + ((isSetPreference()) ? 131071 : 524287);
      if (isSetPreference())
        hashCode = hashCode * 8191 + preference.getValue();

      hashCode = hashCode * 8191 + ((isSetMetaKeyValueMap()) ? 131071 : 524287);
      if (isSetMetaKeyValueMap())
        hashCode = hashCode * 8191 + metaKeyValueMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(putNext_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMbMetadata()).compareTo(other.isSetMbMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbMetadata, other.mbMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPreference()).compareTo(other.isSetPreference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreference()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preference, other.preference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMetaKeyValueMap()).compareTo(other.isSetMetaKeyValueMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetaKeyValueMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaKeyValueMap, other.metaKeyValueMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putNext_args(");
      boolean first = true;

      sb.append("mbMetadata:");
      if (this.mbMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.mbMetadata);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("preference:");
      if (this.preference == null) {
        sb.append("null");
      } else {
        sb.append(this.preference);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("metaKeyValueMap:");
      if (this.metaKeyValueMap == null) {
        sb.append("null");
      } else {
        sb.append(this.metaKeyValueMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbMetadata != null) {
        mbMetadata.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putNext_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putNext_argsStandardScheme getScheme() {
        return new putNext_argsStandardScheme();
      }
    }

    private static class putNext_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<putNext_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putNext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MB_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbMetadata = new Metadata();
                struct.mbMetadata.read(iprot);
                struct.setMbMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PREFERENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.preference = com.dreamlab.edgefs.thrift.WritePreference.findByValue(iprot.readI32());
                struct.setPreferenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // META_KEY_VALUE_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map176 = iprot.readMapBegin();
                  struct.metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map176.size);
                  java.lang.String _key177;
                  java.lang.String _val178;
                  for (int _i179 = 0; _i179 < _map176.size; ++_i179)
                  {
                    _key177 = iprot.readString();
                    _val178 = iprot.readString();
                    struct.metaKeyValueMap.put(_key177, _val178);
                  }
                  iprot.readMapEnd();
                }
                struct.setMetaKeyValueMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putNext_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mbMetadata != null) {
          oprot.writeFieldBegin(MB_METADATA_FIELD_DESC);
          struct.mbMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        if (struct.preference != null) {
          oprot.writeFieldBegin(PREFERENCE_FIELD_DESC);
          oprot.writeI32(struct.preference.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.metaKeyValueMap != null) {
          oprot.writeFieldBegin(META_KEY_VALUE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.metaKeyValueMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter180 : struct.metaKeyValueMap.entrySet())
            {
              oprot.writeString(_iter180.getKey());
              oprot.writeString(_iter180.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putNext_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putNext_argsTupleScheme getScheme() {
        return new putNext_argsTupleScheme();
      }
    }

    private static class putNext_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<putNext_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putNext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMbMetadata()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        if (struct.isSetPreference()) {
          optionals.set(2);
        }
        if (struct.isSetMetaKeyValueMap()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMbMetadata()) {
          struct.mbMetadata.write(oprot);
        }
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
        if (struct.isSetPreference()) {
          oprot.writeI32(struct.preference.getValue());
        }
        if (struct.isSetMetaKeyValueMap()) {
          {
            oprot.writeI32(struct.metaKeyValueMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter181 : struct.metaKeyValueMap.entrySet())
            {
              oprot.writeString(_iter181.getKey());
              oprot.writeString(_iter181.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putNext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.mbMetadata = new Metadata();
          struct.mbMetadata.read(iprot);
          struct.setMbMetadataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.preference = com.dreamlab.edgefs.thrift.WritePreference.findByValue(iprot.readI32());
          struct.setPreferenceIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map182 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map182.size);
            java.lang.String _key183;
            java.lang.String _val184;
            for (int _i185 = 0; _i185 < _map182.size; ++_i185)
            {
              _key183 = iprot.readString();
              _val184 = iprot.readString();
              struct.metaKeyValueMap.put(_key183, _val184);
            }
          }
          struct.setMetaKeyValueMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putNext_result implements org.apache.thrift.TBase<putNext_result, putNext_result._Fields>, java.io.Serializable, Cloneable, Comparable<putNext_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putNext_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putNext_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putNext_resultTupleSchemeFactory();

    public WriteResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WriteResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putNext_result.class, metaDataMap);
    }

    public putNext_result() {
    }

    public putNext_result(
      WriteResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putNext_result(putNext_result other) {
      if (other.isSetSuccess()) {
        this.success = new WriteResponse(other.success);
      }
    }

    public putNext_result deepCopy() {
      return new putNext_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WriteResponse getSuccess() {
      return this.success;
    }

    public putNext_result setSuccess(WriteResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WriteResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putNext_result)
        return this.equals((putNext_result)that);
      return false;
    }

    public boolean equals(putNext_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(putNext_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putNext_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putNext_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putNext_resultStandardScheme getScheme() {
        return new putNext_resultStandardScheme();
      }
    }

    private static class putNext_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<putNext_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putNext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WriteResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putNext_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putNext_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putNext_resultTupleScheme getScheme() {
        return new putNext_resultTupleScheme();
      }
    }

    private static class putNext_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<putNext_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putNext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putNext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WriteResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class incrementBlockCount_args implements org.apache.thrift.TBase<incrementBlockCount_args, incrementBlockCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<incrementBlockCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrementBlockCount_args");

    private static final org.apache.thrift.protocol.TField MB_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mbMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SET_LEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("setLease", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new incrementBlockCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new incrementBlockCount_argsTupleSchemeFactory();

    public Metadata mbMetadata; // required
    public boolean setLease; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MB_METADATA((short)1, "mbMetadata"),
      SET_LEASE((short)2, "setLease");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MB_METADATA
            return MB_METADATA;
          case 2: // SET_LEASE
            return SET_LEASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SETLEASE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MB_METADATA, new org.apache.thrift.meta_data.FieldMetaData("mbMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metadata.class)));
      tmpMap.put(_Fields.SET_LEASE, new org.apache.thrift.meta_data.FieldMetaData("setLease", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrementBlockCount_args.class, metaDataMap);
    }

    public incrementBlockCount_args() {
    }

    public incrementBlockCount_args(
      Metadata mbMetadata,
      boolean setLease)
    {
      this();
      this.mbMetadata = mbMetadata;
      this.setLease = setLease;
      setSetLeaseIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrementBlockCount_args(incrementBlockCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMbMetadata()) {
        this.mbMetadata = new Metadata(other.mbMetadata);
      }
      this.setLease = other.setLease;
    }

    public incrementBlockCount_args deepCopy() {
      return new incrementBlockCount_args(this);
    }

    @Override
    public void clear() {
      this.mbMetadata = null;
      setSetLeaseIsSet(false);
      this.setLease = false;
    }

    public Metadata getMbMetadata() {
      return this.mbMetadata;
    }

    public incrementBlockCount_args setMbMetadata(Metadata mbMetadata) {
      this.mbMetadata = mbMetadata;
      return this;
    }

    public void unsetMbMetadata() {
      this.mbMetadata = null;
    }

    /** Returns true if field mbMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMbMetadata() {
      return this.mbMetadata != null;
    }

    public void setMbMetadataIsSet(boolean value) {
      if (!value) {
        this.mbMetadata = null;
      }
    }

    public boolean isSetLease() {
      return this.setLease;
    }

    public incrementBlockCount_args setSetLease(boolean setLease) {
      this.setLease = setLease;
      setSetLeaseIsSet(true);
      return this;
    }

    public void unsetSetLease() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SETLEASE_ISSET_ID);
    }

    /** Returns true if field setLease is set (has been assigned a value) and false otherwise */
    public boolean isSetSetLease() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SETLEASE_ISSET_ID);
    }

    public void setSetLeaseIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SETLEASE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MB_METADATA:
        if (value == null) {
          unsetMbMetadata();
        } else {
          setMbMetadata((Metadata)value);
        }
        break;

      case SET_LEASE:
        if (value == null) {
          unsetSetLease();
        } else {
          setSetLease((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MB_METADATA:
        return getMbMetadata();

      case SET_LEASE:
        return isSetLease();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MB_METADATA:
        return isSetMbMetadata();
      case SET_LEASE:
        return isSetSetLease();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof incrementBlockCount_args)
        return this.equals((incrementBlockCount_args)that);
      return false;
    }

    public boolean equals(incrementBlockCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mbMetadata = true && this.isSetMbMetadata();
      boolean that_present_mbMetadata = true && that.isSetMbMetadata();
      if (this_present_mbMetadata || that_present_mbMetadata) {
        if (!(this_present_mbMetadata && that_present_mbMetadata))
          return false;
        if (!this.mbMetadata.equals(that.mbMetadata))
          return false;
      }

      boolean this_present_setLease = true;
      boolean that_present_setLease = true;
      if (this_present_setLease || that_present_setLease) {
        if (!(this_present_setLease && that_present_setLease))
          return false;
        if (this.setLease != that.setLease)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMbMetadata()) ? 131071 : 524287);
      if (isSetMbMetadata())
        hashCode = hashCode * 8191 + mbMetadata.hashCode();

      hashCode = hashCode * 8191 + ((setLease) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(incrementBlockCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMbMetadata()).compareTo(other.isSetMbMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbMetadata, other.mbMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSetLease()).compareTo(other.isSetSetLease());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSetLease()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setLease, other.setLease);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("incrementBlockCount_args(");
      boolean first = true;

      sb.append("mbMetadata:");
      if (this.mbMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.mbMetadata);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("setLease:");
      sb.append(this.setLease);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbMetadata != null) {
        mbMetadata.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrementBlockCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public incrementBlockCount_argsStandardScheme getScheme() {
        return new incrementBlockCount_argsStandardScheme();
      }
    }

    private static class incrementBlockCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<incrementBlockCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrementBlockCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MB_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbMetadata = new Metadata();
                struct.mbMetadata.read(iprot);
                struct.setMbMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SET_LEASE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.setLease = iprot.readBool();
                struct.setSetLeaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrementBlockCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mbMetadata != null) {
          oprot.writeFieldBegin(MB_METADATA_FIELD_DESC);
          struct.mbMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SET_LEASE_FIELD_DESC);
        oprot.writeBool(struct.setLease);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrementBlockCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public incrementBlockCount_argsTupleScheme getScheme() {
        return new incrementBlockCount_argsTupleScheme();
      }
    }

    private static class incrementBlockCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<incrementBlockCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrementBlockCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMbMetadata()) {
          optionals.set(0);
        }
        if (struct.isSetSetLease()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMbMetadata()) {
          struct.mbMetadata.write(oprot);
        }
        if (struct.isSetSetLease()) {
          oprot.writeBool(struct.setLease);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrementBlockCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mbMetadata = new Metadata();
          struct.mbMetadata.read(iprot);
          struct.setMbMetadataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.setLease = iprot.readBool();
          struct.setSetLeaseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class incrementBlockCount_result implements org.apache.thrift.TBase<incrementBlockCount_result, incrementBlockCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<incrementBlockCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrementBlockCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new incrementBlockCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new incrementBlockCount_resultTupleSchemeFactory();

    public BlockMetadataUpdateResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlockMetadataUpdateResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrementBlockCount_result.class, metaDataMap);
    }

    public incrementBlockCount_result() {
    }

    public incrementBlockCount_result(
      BlockMetadataUpdateResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrementBlockCount_result(incrementBlockCount_result other) {
      if (other.isSetSuccess()) {
        this.success = new BlockMetadataUpdateResponse(other.success);
      }
    }

    public incrementBlockCount_result deepCopy() {
      return new incrementBlockCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BlockMetadataUpdateResponse getSuccess() {
      return this.success;
    }

    public incrementBlockCount_result setSuccess(BlockMetadataUpdateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BlockMetadataUpdateResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof incrementBlockCount_result)
        return this.equals((incrementBlockCount_result)that);
      return false;
    }

    public boolean equals(incrementBlockCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(incrementBlockCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("incrementBlockCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrementBlockCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public incrementBlockCount_resultStandardScheme getScheme() {
        return new incrementBlockCount_resultStandardScheme();
      }
    }

    private static class incrementBlockCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<incrementBlockCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrementBlockCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BlockMetadataUpdateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrementBlockCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrementBlockCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public incrementBlockCount_resultTupleScheme getScheme() {
        return new incrementBlockCount_resultTupleScheme();
      }
    }

    private static class incrementBlockCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<incrementBlockCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrementBlockCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrementBlockCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BlockMetadataUpdateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class renewLease_args implements org.apache.thrift.TBase<renewLease_args, renewLease_args._Fields>, java.io.Serializable, Cloneable, Comparable<renewLease_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renewLease_args");

    private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streamId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SESSION_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionSecret", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXPECTED_LEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedLease", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SET_LEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("setLease", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renewLease_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renewLease_argsTupleSchemeFactory();

    public java.lang.String streamId; // required
    public java.lang.String clientId; // required
    public java.lang.String sessionSecret; // required
    public int expectedLease; // required
    public boolean setLease; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_ID((short)1, "streamId"),
      CLIENT_ID((short)2, "clientId"),
      SESSION_SECRET((short)3, "sessionSecret"),
      EXPECTED_LEASE((short)4, "expectedLease"),
      SET_LEASE((short)5, "setLease");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_ID
            return STREAM_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // SESSION_SECRET
            return SESSION_SECRET;
          case 4: // EXPECTED_LEASE
            return EXPECTED_LEASE;
          case 5: // SET_LEASE
            return SET_LEASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPECTEDLEASE_ISSET_ID = 0;
    private static final int __SETLEASE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("streamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_SECRET, new org.apache.thrift.meta_data.FieldMetaData("sessionSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXPECTED_LEASE, new org.apache.thrift.meta_data.FieldMetaData("expectedLease", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SET_LEASE, new org.apache.thrift.meta_data.FieldMetaData("setLease", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renewLease_args.class, metaDataMap);
    }

    public renewLease_args() {
    }

    public renewLease_args(
      java.lang.String streamId,
      java.lang.String clientId,
      java.lang.String sessionSecret,
      int expectedLease,
      boolean setLease)
    {
      this();
      this.streamId = streamId;
      this.clientId = clientId;
      this.sessionSecret = sessionSecret;
      this.expectedLease = expectedLease;
      setExpectedLeaseIsSet(true);
      this.setLease = setLease;
      setSetLeaseIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renewLease_args(renewLease_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStreamId()) {
        this.streamId = other.streamId;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetSessionSecret()) {
        this.sessionSecret = other.sessionSecret;
      }
      this.expectedLease = other.expectedLease;
      this.setLease = other.setLease;
    }

    public renewLease_args deepCopy() {
      return new renewLease_args(this);
    }

    @Override
    public void clear() {
      this.streamId = null;
      this.clientId = null;
      this.sessionSecret = null;
      setExpectedLeaseIsSet(false);
      this.expectedLease = 0;
      setSetLeaseIsSet(false);
      this.setLease = false;
    }

    public java.lang.String getStreamId() {
      return this.streamId;
    }

    public renewLease_args setStreamId(java.lang.String streamId) {
      this.streamId = streamId;
      return this;
    }

    public void unsetStreamId() {
      this.streamId = null;
    }

    /** Returns true if field streamId is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamId() {
      return this.streamId != null;
    }

    public void setStreamIdIsSet(boolean value) {
      if (!value) {
        this.streamId = null;
      }
    }

    public java.lang.String getClientId() {
      return this.clientId;
    }

    public renewLease_args setClientId(java.lang.String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public java.lang.String getSessionSecret() {
      return this.sessionSecret;
    }

    public renewLease_args setSessionSecret(java.lang.String sessionSecret) {
      this.sessionSecret = sessionSecret;
      return this;
    }

    public void unsetSessionSecret() {
      this.sessionSecret = null;
    }

    /** Returns true if field sessionSecret is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionSecret() {
      return this.sessionSecret != null;
    }

    public void setSessionSecretIsSet(boolean value) {
      if (!value) {
        this.sessionSecret = null;
      }
    }

    public int getExpectedLease() {
      return this.expectedLease;
    }

    public renewLease_args setExpectedLease(int expectedLease) {
      this.expectedLease = expectedLease;
      setExpectedLeaseIsSet(true);
      return this;
    }

    public void unsetExpectedLease() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPECTEDLEASE_ISSET_ID);
    }

    /** Returns true if field expectedLease is set (has been assigned a value) and false otherwise */
    public boolean isSetExpectedLease() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPECTEDLEASE_ISSET_ID);
    }

    public void setExpectedLeaseIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPECTEDLEASE_ISSET_ID, value);
    }

    public boolean isSetLease() {
      return this.setLease;
    }

    public renewLease_args setSetLease(boolean setLease) {
      this.setLease = setLease;
      setSetLeaseIsSet(true);
      return this;
    }

    public void unsetSetLease() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SETLEASE_ISSET_ID);
    }

    /** Returns true if field setLease is set (has been assigned a value) and false otherwise */
    public boolean isSetSetLease() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SETLEASE_ISSET_ID);
    }

    public void setSetLeaseIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SETLEASE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STREAM_ID:
        if (value == null) {
          unsetStreamId();
        } else {
          setStreamId((java.lang.String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((java.lang.String)value);
        }
        break;

      case SESSION_SECRET:
        if (value == null) {
          unsetSessionSecret();
        } else {
          setSessionSecret((java.lang.String)value);
        }
        break;

      case EXPECTED_LEASE:
        if (value == null) {
          unsetExpectedLease();
        } else {
          setExpectedLease((java.lang.Integer)value);
        }
        break;

      case SET_LEASE:
        if (value == null) {
          unsetSetLease();
        } else {
          setSetLease((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_ID:
        return getStreamId();

      case CLIENT_ID:
        return getClientId();

      case SESSION_SECRET:
        return getSessionSecret();

      case EXPECTED_LEASE:
        return getExpectedLease();

      case SET_LEASE:
        return isSetLease();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STREAM_ID:
        return isSetStreamId();
      case CLIENT_ID:
        return isSetClientId();
      case SESSION_SECRET:
        return isSetSessionSecret();
      case EXPECTED_LEASE:
        return isSetExpectedLease();
      case SET_LEASE:
        return isSetSetLease();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof renewLease_args)
        return this.equals((renewLease_args)that);
      return false;
    }

    public boolean equals(renewLease_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_streamId = true && this.isSetStreamId();
      boolean that_present_streamId = true && that.isSetStreamId();
      if (this_present_streamId || that_present_streamId) {
        if (!(this_present_streamId && that_present_streamId))
          return false;
        if (!this.streamId.equals(that.streamId))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_sessionSecret = true && this.isSetSessionSecret();
      boolean that_present_sessionSecret = true && that.isSetSessionSecret();
      if (this_present_sessionSecret || that_present_sessionSecret) {
        if (!(this_present_sessionSecret && that_present_sessionSecret))
          return false;
        if (!this.sessionSecret.equals(that.sessionSecret))
          return false;
      }

      boolean this_present_expectedLease = true;
      boolean that_present_expectedLease = true;
      if (this_present_expectedLease || that_present_expectedLease) {
        if (!(this_present_expectedLease && that_present_expectedLease))
          return false;
        if (this.expectedLease != that.expectedLease)
          return false;
      }

      boolean this_present_setLease = true;
      boolean that_present_setLease = true;
      if (this_present_setLease || that_present_setLease) {
        if (!(this_present_setLease && that_present_setLease))
          return false;
        if (this.setLease != that.setLease)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStreamId()) ? 131071 : 524287);
      if (isSetStreamId())
        hashCode = hashCode * 8191 + streamId.hashCode();

      hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
      if (isSetClientId())
        hashCode = hashCode * 8191 + clientId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionSecret()) ? 131071 : 524287);
      if (isSetSessionSecret())
        hashCode = hashCode * 8191 + sessionSecret.hashCode();

      hashCode = hashCode * 8191 + expectedLease;

      hashCode = hashCode * 8191 + ((setLease) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(renewLease_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStreamId()).compareTo(other.isSetStreamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamId, other.streamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionSecret()).compareTo(other.isSetSessionSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionSecret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionSecret, other.sessionSecret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExpectedLease()).compareTo(other.isSetExpectedLease());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpectedLease()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedLease, other.expectedLease);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSetLease()).compareTo(other.isSetSetLease());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSetLease()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setLease, other.setLease);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renewLease_args(");
      boolean first = true;

      sb.append("streamId:");
      if (this.streamId == null) {
        sb.append("null");
      } else {
        sb.append(this.streamId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionSecret:");
      if (this.sessionSecret == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionSecret);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("expectedLease:");
      sb.append(this.expectedLease);
      first = false;
      if (!first) sb.append(", ");
      sb.append("setLease:");
      sb.append(this.setLease);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renewLease_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renewLease_argsStandardScheme getScheme() {
        return new renewLease_argsStandardScheme();
      }
    }

    private static class renewLease_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<renewLease_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renewLease_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamId = iprot.readString();
                struct.setStreamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION_SECRET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionSecret = iprot.readString();
                struct.setSessionSecretIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXPECTED_LEASE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.expectedLease = iprot.readI32();
                struct.setExpectedLeaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SET_LEASE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.setLease = iprot.readBool();
                struct.setSetLeaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renewLease_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamId != null) {
          oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
          oprot.writeString(struct.streamId);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.sessionSecret != null) {
          oprot.writeFieldBegin(SESSION_SECRET_FIELD_DESC);
          oprot.writeString(struct.sessionSecret);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EXPECTED_LEASE_FIELD_DESC);
        oprot.writeI32(struct.expectedLease);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SET_LEASE_FIELD_DESC);
        oprot.writeBool(struct.setLease);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renewLease_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renewLease_argsTupleScheme getScheme() {
        return new renewLease_argsTupleScheme();
      }
    }

    private static class renewLease_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<renewLease_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renewLease_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStreamId()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetSessionSecret()) {
          optionals.set(2);
        }
        if (struct.isSetExpectedLease()) {
          optionals.set(3);
        }
        if (struct.isSetSetLease()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetStreamId()) {
          oprot.writeString(struct.streamId);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetSessionSecret()) {
          oprot.writeString(struct.sessionSecret);
        }
        if (struct.isSetExpectedLease()) {
          oprot.writeI32(struct.expectedLease);
        }
        if (struct.isSetSetLease()) {
          oprot.writeBool(struct.setLease);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renewLease_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.streamId = iprot.readString();
          struct.setStreamIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sessionSecret = iprot.readString();
          struct.setSessionSecretIsSet(true);
        }
        if (incoming.get(3)) {
          struct.expectedLease = iprot.readI32();
          struct.setExpectedLeaseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.setLease = iprot.readBool();
          struct.setSetLeaseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class renewLease_result implements org.apache.thrift.TBase<renewLease_result, renewLease_result._Fields>, java.io.Serializable, Cloneable, Comparable<renewLease_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renewLease_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renewLease_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renewLease_resultTupleSchemeFactory();

    public StreamLeaseRenewalResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamLeaseRenewalResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renewLease_result.class, metaDataMap);
    }

    public renewLease_result() {
    }

    public renewLease_result(
      StreamLeaseRenewalResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renewLease_result(renewLease_result other) {
      if (other.isSetSuccess()) {
        this.success = new StreamLeaseRenewalResponse(other.success);
      }
    }

    public renewLease_result deepCopy() {
      return new renewLease_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StreamLeaseRenewalResponse getSuccess() {
      return this.success;
    }

    public renewLease_result setSuccess(StreamLeaseRenewalResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StreamLeaseRenewalResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof renewLease_result)
        return this.equals((renewLease_result)that);
      return false;
    }

    public boolean equals(renewLease_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(renewLease_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renewLease_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renewLease_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renewLease_resultStandardScheme getScheme() {
        return new renewLease_resultStandardScheme();
      }
    }

    private static class renewLease_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<renewLease_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renewLease_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StreamLeaseRenewalResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renewLease_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renewLease_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renewLease_resultTupleScheme getScheme() {
        return new renewLease_resultTupleScheme();
      }
    }

    private static class renewLease_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<renewLease_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renewLease_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renewLease_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StreamLeaseRenewalResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLargestBlockId_args implements org.apache.thrift.TBase<getLargestBlockId_args, getLargestBlockId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLargestBlockId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLargestBlockId_args");

    private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streamId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLargestBlockId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLargestBlockId_argsTupleSchemeFactory();

    public java.lang.String streamId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_ID((short)1, "streamId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_ID
            return STREAM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("streamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLargestBlockId_args.class, metaDataMap);
    }

    public getLargestBlockId_args() {
    }

    public getLargestBlockId_args(
      java.lang.String streamId)
    {
      this();
      this.streamId = streamId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLargestBlockId_args(getLargestBlockId_args other) {
      if (other.isSetStreamId()) {
        this.streamId = other.streamId;
      }
    }

    public getLargestBlockId_args deepCopy() {
      return new getLargestBlockId_args(this);
    }

    @Override
    public void clear() {
      this.streamId = null;
    }

    public java.lang.String getStreamId() {
      return this.streamId;
    }

    public getLargestBlockId_args setStreamId(java.lang.String streamId) {
      this.streamId = streamId;
      return this;
    }

    public void unsetStreamId() {
      this.streamId = null;
    }

    /** Returns true if field streamId is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamId() {
      return this.streamId != null;
    }

    public void setStreamIdIsSet(boolean value) {
      if (!value) {
        this.streamId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STREAM_ID:
        if (value == null) {
          unsetStreamId();
        } else {
          setStreamId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_ID:
        return getStreamId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STREAM_ID:
        return isSetStreamId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLargestBlockId_args)
        return this.equals((getLargestBlockId_args)that);
      return false;
    }

    public boolean equals(getLargestBlockId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_streamId = true && this.isSetStreamId();
      boolean that_present_streamId = true && that.isSetStreamId();
      if (this_present_streamId || that_present_streamId) {
        if (!(this_present_streamId && that_present_streamId))
          return false;
        if (!this.streamId.equals(that.streamId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStreamId()) ? 131071 : 524287);
      if (isSetStreamId())
        hashCode = hashCode * 8191 + streamId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLargestBlockId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStreamId()).compareTo(other.isSetStreamId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamId, other.streamId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLargestBlockId_args(");
      boolean first = true;

      sb.append("streamId:");
      if (this.streamId == null) {
        sb.append("null");
      } else {
        sb.append(this.streamId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLargestBlockId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLargestBlockId_argsStandardScheme getScheme() {
        return new getLargestBlockId_argsStandardScheme();
      }
    }

    private static class getLargestBlockId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLargestBlockId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLargestBlockId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamId = iprot.readString();
                struct.setStreamIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLargestBlockId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamId != null) {
          oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
          oprot.writeString(struct.streamId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLargestBlockId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLargestBlockId_argsTupleScheme getScheme() {
        return new getLargestBlockId_argsTupleScheme();
      }
    }

    private static class getLargestBlockId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLargestBlockId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLargestBlockId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStreamId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamId()) {
          oprot.writeString(struct.streamId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLargestBlockId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamId = iprot.readString();
          struct.setStreamIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLargestBlockId_result implements org.apache.thrift.TBase<getLargestBlockId_result, getLargestBlockId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLargestBlockId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLargestBlockId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLargestBlockId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLargestBlockId_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLargestBlockId_result.class, metaDataMap);
    }

    public getLargestBlockId_result() {
    }

    public getLargestBlockId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLargestBlockId_result(getLargestBlockId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getLargestBlockId_result deepCopy() {
      return new getLargestBlockId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getLargestBlockId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLargestBlockId_result)
        return this.equals((getLargestBlockId_result)that);
      return false;
    }

    public boolean equals(getLargestBlockId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(getLargestBlockId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLargestBlockId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLargestBlockId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLargestBlockId_resultStandardScheme getScheme() {
        return new getLargestBlockId_resultStandardScheme();
      }
    }

    private static class getLargestBlockId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLargestBlockId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLargestBlockId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLargestBlockId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLargestBlockId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLargestBlockId_resultTupleScheme getScheme() {
        return new getLargestBlockId_resultTupleScheme();
      }
    }

    private static class getLargestBlockId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLargestBlockId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLargestBlockId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLargestBlockId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStream_args implements org.apache.thrift.TBase<findStream_args, findStream_args._Fields>, java.io.Serializable, Cloneable, Comparable<findStream_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStream_args");

    private static final org.apache.thrift.protocol.TField SQUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("squery", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStream_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStream_argsTupleSchemeFactory();

    public SQueryRequest squery; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQUERY((short)1, "squery");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQUERY
            return SQUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQUERY, new org.apache.thrift.meta_data.FieldMetaData("squery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQueryRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStream_args.class, metaDataMap);
    }

    public findStream_args() {
    }

    public findStream_args(
      SQueryRequest squery)
    {
      this();
      this.squery = squery;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStream_args(findStream_args other) {
      if (other.isSetSquery()) {
        this.squery = new SQueryRequest(other.squery);
      }
    }

    public findStream_args deepCopy() {
      return new findStream_args(this);
    }

    @Override
    public void clear() {
      this.squery = null;
    }

    public SQueryRequest getSquery() {
      return this.squery;
    }

    public findStream_args setSquery(SQueryRequest squery) {
      this.squery = squery;
      return this;
    }

    public void unsetSquery() {
      this.squery = null;
    }

    /** Returns true if field squery is set (has been assigned a value) and false otherwise */
    public boolean isSetSquery() {
      return this.squery != null;
    }

    public void setSqueryIsSet(boolean value) {
      if (!value) {
        this.squery = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SQUERY:
        if (value == null) {
          unsetSquery();
        } else {
          setSquery((SQueryRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SQUERY:
        return getSquery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SQUERY:
        return isSetSquery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStream_args)
        return this.equals((findStream_args)that);
      return false;
    }

    public boolean equals(findStream_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_squery = true && this.isSetSquery();
      boolean that_present_squery = true && that.isSetSquery();
      if (this_present_squery || that_present_squery) {
        if (!(this_present_squery && that_present_squery))
          return false;
        if (!this.squery.equals(that.squery))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSquery()) ? 131071 : 524287);
      if (isSetSquery())
        hashCode = hashCode * 8191 + squery.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSquery()).compareTo(other.isSetSquery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSquery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squery, other.squery);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStream_args(");
      boolean first = true;

      sb.append("squery:");
      if (this.squery == null) {
        sb.append("null");
      } else {
        sb.append(this.squery);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (squery != null) {
        squery.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStream_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStream_argsStandardScheme getScheme() {
        return new findStream_argsStandardScheme();
      }
    }

    private static class findStream_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.squery = new SQueryRequest();
                struct.squery.read(iprot);
                struct.setSqueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.squery != null) {
          oprot.writeFieldBegin(SQUERY_FIELD_DESC);
          struct.squery.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStream_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStream_argsTupleScheme getScheme() {
        return new findStream_argsTupleScheme();
      }
    }

    private static class findStream_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSquery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSquery()) {
          struct.squery.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.squery = new SQueryRequest();
          struct.squery.read(iprot);
          struct.setSqueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findStream_result implements org.apache.thrift.TBase<findStream_result, findStream_result._Fields>, java.io.Serializable, Cloneable, Comparable<findStream_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findStream_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findStream_resultTupleSchemeFactory();

    public SQueryResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SQueryResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStream_result.class, metaDataMap);
    }

    public findStream_result() {
    }

    public findStream_result(
      SQueryResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStream_result(findStream_result other) {
      if (other.isSetSuccess()) {
        this.success = new SQueryResponse(other.success);
      }
    }

    public findStream_result deepCopy() {
      return new findStream_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SQueryResponse getSuccess() {
      return this.success;
    }

    public findStream_result setSuccess(SQueryResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SQueryResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findStream_result)
        return this.equals((findStream_result)that);
      return false;
    }

    public boolean equals(findStream_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findStream_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStream_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStream_resultStandardScheme getScheme() {
        return new findStream_resultStandardScheme();
      }
    }

    private static class findStream_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findStream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SQueryResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStream_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findStream_resultTupleScheme getScheme() {
        return new findStream_resultTupleScheme();
      }
    }

    private static class findStream_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findStream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SQueryResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateBlock_args implements org.apache.thrift.TBase<updateBlock_args, updateBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBlock_args");

    private static final org.apache.thrift.protocol.TField MB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mbId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField MB_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mbMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField MB_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mbData", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateBlock_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateBlock_argsTupleSchemeFactory();

    public long mbId; // required
    public Metadata mbMetadata; // required
    public java.nio.ByteBuffer mbData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MB_ID((short)1, "mbId"),
      MB_METADATA((short)2, "mbMetadata"),
      MB_DATA((short)3, "mbData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MB_ID
            return MB_ID;
          case 2: // MB_METADATA
            return MB_METADATA;
          case 3: // MB_DATA
            return MB_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MBID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MB_ID, new org.apache.thrift.meta_data.FieldMetaData("mbId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MB_METADATA, new org.apache.thrift.meta_data.FieldMetaData("mbMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metadata.class)));
      tmpMap.put(_Fields.MB_DATA, new org.apache.thrift.meta_data.FieldMetaData("mbData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBlock_args.class, metaDataMap);
    }

    public updateBlock_args() {
    }

    public updateBlock_args(
      long mbId,
      Metadata mbMetadata,
      java.nio.ByteBuffer mbData)
    {
      this();
      this.mbId = mbId;
      setMbIdIsSet(true);
      this.mbMetadata = mbMetadata;
      this.mbData = org.apache.thrift.TBaseHelper.copyBinary(mbData);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBlock_args(updateBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.mbId = other.mbId;
      if (other.isSetMbMetadata()) {
        this.mbMetadata = new Metadata(other.mbMetadata);
      }
      if (other.isSetMbData()) {
        this.mbData = org.apache.thrift.TBaseHelper.copyBinary(other.mbData);
      }
    }

    public updateBlock_args deepCopy() {
      return new updateBlock_args(this);
    }

    @Override
    public void clear() {
      setMbIdIsSet(false);
      this.mbId = 0;
      this.mbMetadata = null;
      this.mbData = null;
    }

    public long getMbId() {
      return this.mbId;
    }

    public updateBlock_args setMbId(long mbId) {
      this.mbId = mbId;
      setMbIdIsSet(true);
      return this;
    }

    public void unsetMbId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MBID_ISSET_ID);
    }

    /** Returns true if field mbId is set (has been assigned a value) and false otherwise */
    public boolean isSetMbId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MBID_ISSET_ID);
    }

    public void setMbIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MBID_ISSET_ID, value);
    }

    public Metadata getMbMetadata() {
      return this.mbMetadata;
    }

    public updateBlock_args setMbMetadata(Metadata mbMetadata) {
      this.mbMetadata = mbMetadata;
      return this;
    }

    public void unsetMbMetadata() {
      this.mbMetadata = null;
    }

    /** Returns true if field mbMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMbMetadata() {
      return this.mbMetadata != null;
    }

    public void setMbMetadataIsSet(boolean value) {
      if (!value) {
        this.mbMetadata = null;
      }
    }

    public byte[] getMbData() {
      setMbData(org.apache.thrift.TBaseHelper.rightSize(mbData));
      return mbData == null ? null : mbData.array();
    }

    public java.nio.ByteBuffer bufferForMbData() {
      return org.apache.thrift.TBaseHelper.copyBinary(mbData);
    }

    public updateBlock_args setMbData(byte[] mbData) {
      this.mbData = mbData == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(mbData.clone());
      return this;
    }

    public updateBlock_args setMbData(java.nio.ByteBuffer mbData) {
      this.mbData = org.apache.thrift.TBaseHelper.copyBinary(mbData);
      return this;
    }

    public void unsetMbData() {
      this.mbData = null;
    }

    /** Returns true if field mbData is set (has been assigned a value) and false otherwise */
    public boolean isSetMbData() {
      return this.mbData != null;
    }

    public void setMbDataIsSet(boolean value) {
      if (!value) {
        this.mbData = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MB_ID:
        if (value == null) {
          unsetMbId();
        } else {
          setMbId((java.lang.Long)value);
        }
        break;

      case MB_METADATA:
        if (value == null) {
          unsetMbMetadata();
        } else {
          setMbMetadata((Metadata)value);
        }
        break;

      case MB_DATA:
        if (value == null) {
          unsetMbData();
        } else {
          if (value instanceof byte[]) {
            setMbData((byte[])value);
          } else {
            setMbData((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MB_ID:
        return getMbId();

      case MB_METADATA:
        return getMbMetadata();

      case MB_DATA:
        return getMbData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MB_ID:
        return isSetMbId();
      case MB_METADATA:
        return isSetMbMetadata();
      case MB_DATA:
        return isSetMbData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBlock_args)
        return this.equals((updateBlock_args)that);
      return false;
    }

    public boolean equals(updateBlock_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mbId = true;
      boolean that_present_mbId = true;
      if (this_present_mbId || that_present_mbId) {
        if (!(this_present_mbId && that_present_mbId))
          return false;
        if (this.mbId != that.mbId)
          return false;
      }

      boolean this_present_mbMetadata = true && this.isSetMbMetadata();
      boolean that_present_mbMetadata = true && that.isSetMbMetadata();
      if (this_present_mbMetadata || that_present_mbMetadata) {
        if (!(this_present_mbMetadata && that_present_mbMetadata))
          return false;
        if (!this.mbMetadata.equals(that.mbMetadata))
          return false;
      }

      boolean this_present_mbData = true && this.isSetMbData();
      boolean that_present_mbData = true && that.isSetMbData();
      if (this_present_mbData || that_present_mbData) {
        if (!(this_present_mbData && that_present_mbData))
          return false;
        if (!this.mbData.equals(that.mbData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mbId);

      hashCode = hashCode * 8191 + ((isSetMbMetadata()) ? 131071 : 524287);
      if (isSetMbMetadata())
        hashCode = hashCode * 8191 + mbMetadata.hashCode();

      hashCode = hashCode * 8191 + ((isSetMbData()) ? 131071 : 524287);
      if (isSetMbData())
        hashCode = hashCode * 8191 + mbData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMbId()).compareTo(other.isSetMbId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbId, other.mbId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMbMetadata()).compareTo(other.isSetMbMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbMetadata, other.mbMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMbData()).compareTo(other.isSetMbData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbData, other.mbData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateBlock_args(");
      boolean first = true;

      sb.append("mbId:");
      sb.append(this.mbId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbMetadata:");
      if (this.mbMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.mbMetadata);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbData:");
      if (this.mbData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.mbData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mbMetadata != null) {
        mbMetadata.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBlock_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateBlock_argsStandardScheme getScheme() {
        return new updateBlock_argsStandardScheme();
      }
    }

    private static class updateBlock_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.mbId = iprot.readI64();
                struct.setMbIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MB_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mbMetadata = new Metadata();
                struct.mbMetadata.read(iprot);
                struct.setMbMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MB_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mbData = iprot.readBinary();
                struct.setMbDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MB_ID_FIELD_DESC);
        oprot.writeI64(struct.mbId);
        oprot.writeFieldEnd();
        if (struct.mbMetadata != null) {
          oprot.writeFieldBegin(MB_METADATA_FIELD_DESC);
          struct.mbMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mbData != null) {
          oprot.writeFieldBegin(MB_DATA_FIELD_DESC);
          oprot.writeBinary(struct.mbData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBlock_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateBlock_argsTupleScheme getScheme() {
        return new updateBlock_argsTupleScheme();
      }
    }

    private static class updateBlock_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMbId()) {
          optionals.set(0);
        }
        if (struct.isSetMbMetadata()) {
          optionals.set(1);
        }
        if (struct.isSetMbData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMbId()) {
          oprot.writeI64(struct.mbId);
        }
        if (struct.isSetMbMetadata()) {
          struct.mbMetadata.write(oprot);
        }
        if (struct.isSetMbData()) {
          oprot.writeBinary(struct.mbData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.mbId = iprot.readI64();
          struct.setMbIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mbMetadata = new Metadata();
          struct.mbMetadata.read(iprot);
          struct.setMbMetadataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mbData = iprot.readBinary();
          struct.setMbDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateBlock_result implements org.apache.thrift.TBase<updateBlock_result, updateBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateBlock_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateBlock_resultTupleSchemeFactory();

    public WriteResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WriteResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBlock_result.class, metaDataMap);
    }

    public updateBlock_result() {
    }

    public updateBlock_result(
      WriteResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBlock_result(updateBlock_result other) {
      if (other.isSetSuccess()) {
        this.success = new WriteResponse(other.success);
      }
    }

    public updateBlock_result deepCopy() {
      return new updateBlock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WriteResponse getSuccess() {
      return this.success;
    }

    public updateBlock_result setSuccess(WriteResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WriteResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBlock_result)
        return this.equals((updateBlock_result)that);
      return false;
    }

    public boolean equals(updateBlock_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateBlock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBlock_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateBlock_resultStandardScheme getScheme() {
        return new updateBlock_resultStandardScheme();
      }
    }

    private static class updateBlock_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WriteResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBlock_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateBlock_resultTupleScheme getScheme() {
        return new updateBlock_resultTupleScheme();
      }
    }

    private static class updateBlock_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WriteResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listLocalPartitionMbId_args implements org.apache.thrift.TBase<listLocalPartitionMbId_args, listLocalPartitionMbId_args._Fields>, java.io.Serializable, Cloneable, Comparable<listLocalPartitionMbId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listLocalPartitionMbId_args");

    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BOOL, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listLocalPartitionMbId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listLocalPartitionMbId_argsTupleSchemeFactory();

    public boolean flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FLAG((short)1, "flag");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listLocalPartitionMbId_args.class, metaDataMap);
    }

    public listLocalPartitionMbId_args() {
    }

    public listLocalPartitionMbId_args(
      boolean flag)
    {
      this();
      this.flag = flag;
      setFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLocalPartitionMbId_args(listLocalPartitionMbId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.flag = other.flag;
    }

    public listLocalPartitionMbId_args deepCopy() {
      return new listLocalPartitionMbId_args(this);
    }

    @Override
    public void clear() {
      setFlagIsSet(false);
      this.flag = false;
    }

    public boolean isFlag() {
      return this.flag;
    }

    public listLocalPartitionMbId_args setFlag(boolean flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FLAG:
        return isFlag();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FLAG:
        return isSetFlag();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listLocalPartitionMbId_args)
        return this.equals((listLocalPartitionMbId_args)that);
      return false;
    }

    public boolean equals(listLocalPartitionMbId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((flag) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(listLocalPartitionMbId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listLocalPartitionMbId_args(");
      boolean first = true;

      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listLocalPartitionMbId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listLocalPartitionMbId_argsStandardScheme getScheme() {
        return new listLocalPartitionMbId_argsStandardScheme();
      }
    }

    private static class listLocalPartitionMbId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listLocalPartitionMbId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listLocalPartitionMbId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.flag = iprot.readBool();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listLocalPartitionMbId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeBool(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listLocalPartitionMbId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listLocalPartitionMbId_argsTupleScheme getScheme() {
        return new listLocalPartitionMbId_argsTupleScheme();
      }
    }

    private static class listLocalPartitionMbId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listLocalPartitionMbId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listLocalPartitionMbId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFlag()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFlag()) {
          oprot.writeBool(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listLocalPartitionMbId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.flag = iprot.readBool();
          struct.setFlagIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listLocalPartitionMbId_result implements org.apache.thrift.TBase<listLocalPartitionMbId_result, listLocalPartitionMbId_result._Fields>, java.io.Serializable, Cloneable, Comparable<listLocalPartitionMbId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listLocalPartitionMbId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listLocalPartitionMbId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listLocalPartitionMbId_resultTupleSchemeFactory();

    public java.util.Set<java.lang.Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listLocalPartitionMbId_result.class, metaDataMap);
    }

    public listLocalPartitionMbId_result() {
    }

    public listLocalPartitionMbId_result(
      java.util.Set<java.lang.Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLocalPartitionMbId_result(listLocalPartitionMbId_result other) {
      if (other.isSetSuccess()) {
        java.util.Set<java.lang.Long> __this__success = new java.util.HashSet<java.lang.Long>(other.success);
        this.success = __this__success;
      }
    }

    public listLocalPartitionMbId_result deepCopy() {
      return new listLocalPartitionMbId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new java.util.HashSet<java.lang.Long>();
      }
      this.success.add(elem);
    }

    public java.util.Set<java.lang.Long> getSuccess() {
      return this.success;
    }

    public listLocalPartitionMbId_result setSuccess(java.util.Set<java.lang.Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Set<java.lang.Long>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listLocalPartitionMbId_result)
        return this.equals((listLocalPartitionMbId_result)that);
      return false;
    }

    public boolean equals(listLocalPartitionMbId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listLocalPartitionMbId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listLocalPartitionMbId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listLocalPartitionMbId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listLocalPartitionMbId_resultStandardScheme getScheme() {
        return new listLocalPartitionMbId_resultStandardScheme();
      }
    }

    private static class listLocalPartitionMbId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listLocalPartitionMbId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listLocalPartitionMbId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set186 = iprot.readSetBegin();
                  struct.success = new java.util.HashSet<java.lang.Long>(2*_set186.size);
                  long _elem187;
                  for (int _i188 = 0; _i188 < _set186.size; ++_i188)
                  {
                    _elem187 = iprot.readI64();
                    struct.success.add(_elem187);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listLocalPartitionMbId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter189 : struct.success)
            {
              oprot.writeI64(_iter189);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listLocalPartitionMbId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listLocalPartitionMbId_resultTupleScheme getScheme() {
        return new listLocalPartitionMbId_resultTupleScheme();
      }
    }

    private static class listLocalPartitionMbId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listLocalPartitionMbId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listLocalPartitionMbId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter190 : struct.success)
            {
              oprot.writeI64(_iter190);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listLocalPartitionMbId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set191 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new java.util.HashSet<java.lang.Long>(2*_set191.size);
            long _elem192;
            for (int _i193 = 0; _i193 < _set191.size; ++_i193)
            {
              _elem192 = iprot.readI64();
              struct.success.add(_elem192);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestAllNeighbors_args implements org.apache.thrift.TBase<requestAllNeighbors_args, requestAllNeighbors_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestAllNeighbors_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestAllNeighbors_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestAllNeighbors_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestAllNeighbors_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestAllNeighbors_args.class, metaDataMap);
    }

    public requestAllNeighbors_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestAllNeighbors_args(requestAllNeighbors_args other) {
    }

    public requestAllNeighbors_args deepCopy() {
      return new requestAllNeighbors_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestAllNeighbors_args)
        return this.equals((requestAllNeighbors_args)that);
      return false;
    }

    public boolean equals(requestAllNeighbors_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(requestAllNeighbors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestAllNeighbors_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestAllNeighbors_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestAllNeighbors_argsStandardScheme getScheme() {
        return new requestAllNeighbors_argsStandardScheme();
      }
    }

    private static class requestAllNeighbors_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestAllNeighbors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestAllNeighbors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestAllNeighbors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestAllNeighbors_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestAllNeighbors_argsTupleScheme getScheme() {
        return new requestAllNeighbors_argsTupleScheme();
      }
    }

    private static class requestAllNeighbors_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestAllNeighbors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestAllNeighbors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestAllNeighbors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestAllNeighbors_result implements org.apache.thrift.TBase<requestAllNeighbors_result, requestAllNeighbors_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestAllNeighbors_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestAllNeighbors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestAllNeighbors_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestAllNeighbors_resultTupleSchemeFactory();

    public java.util.List<NeighborInfoData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeighborInfoData.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestAllNeighbors_result.class, metaDataMap);
    }

    public requestAllNeighbors_result() {
    }

    public requestAllNeighbors_result(
      java.util.List<NeighborInfoData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestAllNeighbors_result(requestAllNeighbors_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NeighborInfoData> __this__success = new java.util.ArrayList<NeighborInfoData>(other.success.size());
        for (NeighborInfoData other_element : other.success) {
          __this__success.add(new NeighborInfoData(other_element));
        }
        this.success = __this__success;
      }
    }

    public requestAllNeighbors_result deepCopy() {
      return new requestAllNeighbors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NeighborInfoData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NeighborInfoData elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NeighborInfoData>();
      }
      this.success.add(elem);
    }

    public java.util.List<NeighborInfoData> getSuccess() {
      return this.success;
    }

    public requestAllNeighbors_result setSuccess(java.util.List<NeighborInfoData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NeighborInfoData>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestAllNeighbors_result)
        return this.equals((requestAllNeighbors_result)that);
      return false;
    }

    public boolean equals(requestAllNeighbors_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestAllNeighbors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestAllNeighbors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestAllNeighbors_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestAllNeighbors_resultStandardScheme getScheme() {
        return new requestAllNeighbors_resultStandardScheme();
      }
    }

    private static class requestAllNeighbors_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestAllNeighbors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestAllNeighbors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NeighborInfoData>(_list194.size);
                  NeighborInfoData _elem195;
                  for (int _i196 = 0; _i196 < _list194.size; ++_i196)
                  {
                    _elem195 = new NeighborInfoData();
                    _elem195.read(iprot);
                    struct.success.add(_elem195);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestAllNeighbors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NeighborInfoData _iter197 : struct.success)
            {
              _iter197.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestAllNeighbors_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestAllNeighbors_resultTupleScheme getScheme() {
        return new requestAllNeighbors_resultTupleScheme();
      }
    }

    private static class requestAllNeighbors_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestAllNeighbors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestAllNeighbors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NeighborInfoData _iter198 : struct.success)
            {
              _iter198.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestAllNeighbors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<NeighborInfoData>(_list199.size);
            NeighborInfoData _elem200;
            for (int _i201 = 0; _i201 < _list199.size; ++_i201)
            {
              _elem200 = new NeighborInfoData();
              _elem200.read(iprot);
              struct.success.add(_elem200);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestEdgeMicrobatchMap_args implements org.apache.thrift.TBase<requestEdgeMicrobatchMap_args, requestEdgeMicrobatchMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestEdgeMicrobatchMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestEdgeMicrobatchMap_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestEdgeMicrobatchMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestEdgeMicrobatchMap_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestEdgeMicrobatchMap_args.class, metaDataMap);
    }

    public requestEdgeMicrobatchMap_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestEdgeMicrobatchMap_args(requestEdgeMicrobatchMap_args other) {
    }

    public requestEdgeMicrobatchMap_args deepCopy() {
      return new requestEdgeMicrobatchMap_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestEdgeMicrobatchMap_args)
        return this.equals((requestEdgeMicrobatchMap_args)that);
      return false;
    }

    public boolean equals(requestEdgeMicrobatchMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(requestEdgeMicrobatchMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestEdgeMicrobatchMap_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestEdgeMicrobatchMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestEdgeMicrobatchMap_argsStandardScheme getScheme() {
        return new requestEdgeMicrobatchMap_argsStandardScheme();
      }
    }

    private static class requestEdgeMicrobatchMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestEdgeMicrobatchMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestEdgeMicrobatchMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestEdgeMicrobatchMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestEdgeMicrobatchMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestEdgeMicrobatchMap_argsTupleScheme getScheme() {
        return new requestEdgeMicrobatchMap_argsTupleScheme();
      }
    }

    private static class requestEdgeMicrobatchMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestEdgeMicrobatchMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestEdgeMicrobatchMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestEdgeMicrobatchMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestEdgeMicrobatchMap_result implements org.apache.thrift.TBase<requestEdgeMicrobatchMap_result, requestEdgeMicrobatchMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestEdgeMicrobatchMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestEdgeMicrobatchMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestEdgeMicrobatchMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestEdgeMicrobatchMap_resultTupleSchemeFactory();

    public java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
              new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestEdgeMicrobatchMap_result.class, metaDataMap);
    }

    public requestEdgeMicrobatchMap_result() {
    }

    public requestEdgeMicrobatchMap_result(
      java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestEdgeMicrobatchMap_result(requestEdgeMicrobatchMap_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> __this__success = new java.util.HashMap<java.lang.Short,java.util.Set<java.lang.Long>>(other.success.size());
        for (java.util.Map.Entry<java.lang.Short, java.util.Set<java.lang.Long>> other_element : other.success.entrySet()) {

          java.lang.Short other_element_key = other_element.getKey();
          java.util.Set<java.lang.Long> other_element_value = other_element.getValue();

          java.lang.Short __this__success_copy_key = other_element_key;

          java.util.Set<java.lang.Long> __this__success_copy_value = new java.util.HashSet<java.lang.Long>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public requestEdgeMicrobatchMap_result deepCopy() {
      return new requestEdgeMicrobatchMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(short key, java.util.Set<java.lang.Long> val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.Short,java.util.Set<java.lang.Long>>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> getSuccess() {
      return this.success;
    }

    public requestEdgeMicrobatchMap_result setSuccess(java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.Short,java.util.Set<java.lang.Long>>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestEdgeMicrobatchMap_result)
        return this.equals((requestEdgeMicrobatchMap_result)that);
      return false;
    }

    public boolean equals(requestEdgeMicrobatchMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestEdgeMicrobatchMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestEdgeMicrobatchMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestEdgeMicrobatchMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestEdgeMicrobatchMap_resultStandardScheme getScheme() {
        return new requestEdgeMicrobatchMap_resultStandardScheme();
      }
    }

    private static class requestEdgeMicrobatchMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestEdgeMicrobatchMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestEdgeMicrobatchMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map202 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.Short,java.util.Set<java.lang.Long>>(2*_map202.size);
                  short _key203;
                  java.util.Set<java.lang.Long> _val204;
                  for (int _i205 = 0; _i205 < _map202.size; ++_i205)
                  {
                    _key203 = iprot.readI16();
                    {
                      org.apache.thrift.protocol.TSet _set206 = iprot.readSetBegin();
                      _val204 = new java.util.HashSet<java.lang.Long>(2*_set206.size);
                      long _elem207;
                      for (int _i208 = 0; _i208 < _set206.size; ++_i208)
                      {
                        _elem207 = iprot.readI64();
                        _val204.add(_elem207);
                      }
                      iprot.readSetEnd();
                    }
                    struct.success.put(_key203, _val204);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestEdgeMicrobatchMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.SET, struct.success.size()));
            for (java.util.Map.Entry<java.lang.Short, java.util.Set<java.lang.Long>> _iter209 : struct.success.entrySet())
            {
              oprot.writeI16(_iter209.getKey());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, _iter209.getValue().size()));
                for (long _iter210 : _iter209.getValue())
                {
                  oprot.writeI64(_iter210);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestEdgeMicrobatchMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestEdgeMicrobatchMap_resultTupleScheme getScheme() {
        return new requestEdgeMicrobatchMap_resultTupleScheme();
      }
    }

    private static class requestEdgeMicrobatchMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestEdgeMicrobatchMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestEdgeMicrobatchMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.Short, java.util.Set<java.lang.Long>> _iter211 : struct.success.entrySet())
            {
              oprot.writeI16(_iter211.getKey());
              {
                oprot.writeI32(_iter211.getValue().size());
                for (long _iter212 : _iter211.getValue())
                {
                  oprot.writeI64(_iter212);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestEdgeMicrobatchMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map213 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.SET, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.Short,java.util.Set<java.lang.Long>>(2*_map213.size);
            short _key214;
            java.util.Set<java.lang.Long> _val215;
            for (int _i216 = 0; _i216 < _map213.size; ++_i216)
            {
              _key214 = iprot.readI16();
              {
                org.apache.thrift.protocol.TSet _set217 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _val215 = new java.util.HashSet<java.lang.Long>(2*_set217.size);
                long _elem218;
                for (int _i219 = 0; _i219 < _set217.size; ++_i219)
                {
                  _elem218 = iprot.readI64();
                  _val215.add(_elem218);
                }
              }
              struct.success.put(_key214, _val215);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findBlockUsingQuery_args implements org.apache.thrift.TBase<findBlockUsingQuery_args, findBlockUsingQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<findBlockUsingQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findBlockUsingQuery_args");

    private static final org.apache.thrift.protocol.TField META_KEY_VALUE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("metaKeyValueMap", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField CHECK_NEIGHBORS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkNeighbors", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField CHECK_BUDDIES_FIELD_DESC = new org.apache.thrift.protocol.TField("checkBuddies", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findBlockUsingQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findBlockUsingQuery_argsTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap; // required
    public boolean checkNeighbors; // required
    public boolean checkBuddies; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      META_KEY_VALUE_MAP((short)1, "metaKeyValueMap"),
      CHECK_NEIGHBORS((short)2, "checkNeighbors"),
      CHECK_BUDDIES((short)3, "checkBuddies");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // META_KEY_VALUE_MAP
            return META_KEY_VALUE_MAP;
          case 2: // CHECK_NEIGHBORS
            return CHECK_NEIGHBORS;
          case 3: // CHECK_BUDDIES
            return CHECK_BUDDIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHECKNEIGHBORS_ISSET_ID = 0;
    private static final int __CHECKBUDDIES_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.META_KEY_VALUE_MAP, new org.apache.thrift.meta_data.FieldMetaData("metaKeyValueMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CHECK_NEIGHBORS, new org.apache.thrift.meta_data.FieldMetaData("checkNeighbors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CHECK_BUDDIES, new org.apache.thrift.meta_data.FieldMetaData("checkBuddies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findBlockUsingQuery_args.class, metaDataMap);
    }

    public findBlockUsingQuery_args() {
    }

    public findBlockUsingQuery_args(
      java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap,
      boolean checkNeighbors,
      boolean checkBuddies)
    {
      this();
      this.metaKeyValueMap = metaKeyValueMap;
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findBlockUsingQuery_args(findBlockUsingQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMetaKeyValueMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.metaKeyValueMap);
        this.metaKeyValueMap = __this__metaKeyValueMap;
      }
      this.checkNeighbors = other.checkNeighbors;
      this.checkBuddies = other.checkBuddies;
    }

    public findBlockUsingQuery_args deepCopy() {
      return new findBlockUsingQuery_args(this);
    }

    @Override
    public void clear() {
      this.metaKeyValueMap = null;
      setCheckNeighborsIsSet(false);
      this.checkNeighbors = false;
      setCheckBuddiesIsSet(false);
      this.checkBuddies = false;
    }

    public int getMetaKeyValueMapSize() {
      return (this.metaKeyValueMap == null) ? 0 : this.metaKeyValueMap.size();
    }

    public void putToMetaKeyValueMap(java.lang.String key, java.lang.String val) {
      if (this.metaKeyValueMap == null) {
        this.metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.metaKeyValueMap.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getMetaKeyValueMap() {
      return this.metaKeyValueMap;
    }

    public findBlockUsingQuery_args setMetaKeyValueMap(java.util.Map<java.lang.String,java.lang.String> metaKeyValueMap) {
      this.metaKeyValueMap = metaKeyValueMap;
      return this;
    }

    public void unsetMetaKeyValueMap() {
      this.metaKeyValueMap = null;
    }

    /** Returns true if field metaKeyValueMap is set (has been assigned a value) and false otherwise */
    public boolean isSetMetaKeyValueMap() {
      return this.metaKeyValueMap != null;
    }

    public void setMetaKeyValueMapIsSet(boolean value) {
      if (!value) {
        this.metaKeyValueMap = null;
      }
    }

    public boolean isCheckNeighbors() {
      return this.checkNeighbors;
    }

    public findBlockUsingQuery_args setCheckNeighbors(boolean checkNeighbors) {
      this.checkNeighbors = checkNeighbors;
      setCheckNeighborsIsSet(true);
      return this;
    }

    public void unsetCheckNeighbors() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    /** Returns true if field checkNeighbors is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckNeighbors() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID);
    }

    public void setCheckNeighborsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKNEIGHBORS_ISSET_ID, value);
    }

    public boolean isCheckBuddies() {
      return this.checkBuddies;
    }

    public findBlockUsingQuery_args setCheckBuddies(boolean checkBuddies) {
      this.checkBuddies = checkBuddies;
      setCheckBuddiesIsSet(true);
      return this;
    }

    public void unsetCheckBuddies() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    /** Returns true if field checkBuddies is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckBuddies() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID);
    }

    public void setCheckBuddiesIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKBUDDIES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case META_KEY_VALUE_MAP:
        if (value == null) {
          unsetMetaKeyValueMap();
        } else {
          setMetaKeyValueMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case CHECK_NEIGHBORS:
        if (value == null) {
          unsetCheckNeighbors();
        } else {
          setCheckNeighbors((java.lang.Boolean)value);
        }
        break;

      case CHECK_BUDDIES:
        if (value == null) {
          unsetCheckBuddies();
        } else {
          setCheckBuddies((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case META_KEY_VALUE_MAP:
        return getMetaKeyValueMap();

      case CHECK_NEIGHBORS:
        return isCheckNeighbors();

      case CHECK_BUDDIES:
        return isCheckBuddies();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case META_KEY_VALUE_MAP:
        return isSetMetaKeyValueMap();
      case CHECK_NEIGHBORS:
        return isSetCheckNeighbors();
      case CHECK_BUDDIES:
        return isSetCheckBuddies();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findBlockUsingQuery_args)
        return this.equals((findBlockUsingQuery_args)that);
      return false;
    }

    public boolean equals(findBlockUsingQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_metaKeyValueMap = true && this.isSetMetaKeyValueMap();
      boolean that_present_metaKeyValueMap = true && that.isSetMetaKeyValueMap();
      if (this_present_metaKeyValueMap || that_present_metaKeyValueMap) {
        if (!(this_present_metaKeyValueMap && that_present_metaKeyValueMap))
          return false;
        if (!this.metaKeyValueMap.equals(that.metaKeyValueMap))
          return false;
      }

      boolean this_present_checkNeighbors = true;
      boolean that_present_checkNeighbors = true;
      if (this_present_checkNeighbors || that_present_checkNeighbors) {
        if (!(this_present_checkNeighbors && that_present_checkNeighbors))
          return false;
        if (this.checkNeighbors != that.checkNeighbors)
          return false;
      }

      boolean this_present_checkBuddies = true;
      boolean that_present_checkBuddies = true;
      if (this_present_checkBuddies || that_present_checkBuddies) {
        if (!(this_present_checkBuddies && that_present_checkBuddies))
          return false;
        if (this.checkBuddies != that.checkBuddies)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMetaKeyValueMap()) ? 131071 : 524287);
      if (isSetMetaKeyValueMap())
        hashCode = hashCode * 8191 + metaKeyValueMap.hashCode();

      hashCode = hashCode * 8191 + ((checkNeighbors) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((checkBuddies) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(findBlockUsingQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMetaKeyValueMap()).compareTo(other.isSetMetaKeyValueMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetaKeyValueMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaKeyValueMap, other.metaKeyValueMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckNeighbors()).compareTo(other.isSetCheckNeighbors());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckNeighbors()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkNeighbors, other.checkNeighbors);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckBuddies()).compareTo(other.isSetCheckBuddies());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckBuddies()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkBuddies, other.checkBuddies);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findBlockUsingQuery_args(");
      boolean first = true;

      sb.append("metaKeyValueMap:");
      if (this.metaKeyValueMap == null) {
        sb.append("null");
      } else {
        sb.append(this.metaKeyValueMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkNeighbors:");
      sb.append(this.checkNeighbors);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkBuddies:");
      sb.append(this.checkBuddies);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findBlockUsingQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBlockUsingQuery_argsStandardScheme getScheme() {
        return new findBlockUsingQuery_argsStandardScheme();
      }
    }

    private static class findBlockUsingQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findBlockUsingQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findBlockUsingQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // META_KEY_VALUE_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map220 = iprot.readMapBegin();
                  struct.metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map220.size);
                  java.lang.String _key221;
                  java.lang.String _val222;
                  for (int _i223 = 0; _i223 < _map220.size; ++_i223)
                  {
                    _key221 = iprot.readString();
                    _val222 = iprot.readString();
                    struct.metaKeyValueMap.put(_key221, _val222);
                  }
                  iprot.readMapEnd();
                }
                struct.setMetaKeyValueMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHECK_NEIGHBORS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkNeighbors = iprot.readBool();
                struct.setCheckNeighborsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHECK_BUDDIES
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.checkBuddies = iprot.readBool();
                struct.setCheckBuddiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findBlockUsingQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metaKeyValueMap != null) {
          oprot.writeFieldBegin(META_KEY_VALUE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.metaKeyValueMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter224 : struct.metaKeyValueMap.entrySet())
            {
              oprot.writeString(_iter224.getKey());
              oprot.writeString(_iter224.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHECK_NEIGHBORS_FIELD_DESC);
        oprot.writeBool(struct.checkNeighbors);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHECK_BUDDIES_FIELD_DESC);
        oprot.writeBool(struct.checkBuddies);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findBlockUsingQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBlockUsingQuery_argsTupleScheme getScheme() {
        return new findBlockUsingQuery_argsTupleScheme();
      }
    }

    private static class findBlockUsingQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findBlockUsingQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findBlockUsingQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMetaKeyValueMap()) {
          optionals.set(0);
        }
        if (struct.isSetCheckNeighbors()) {
          optionals.set(1);
        }
        if (struct.isSetCheckBuddies()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMetaKeyValueMap()) {
          {
            oprot.writeI32(struct.metaKeyValueMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter225 : struct.metaKeyValueMap.entrySet())
            {
              oprot.writeString(_iter225.getKey());
              oprot.writeString(_iter225.getValue());
            }
          }
        }
        if (struct.isSetCheckNeighbors()) {
          oprot.writeBool(struct.checkNeighbors);
        }
        if (struct.isSetCheckBuddies()) {
          oprot.writeBool(struct.checkBuddies);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findBlockUsingQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map226 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.metaKeyValueMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map226.size);
            java.lang.String _key227;
            java.lang.String _val228;
            for (int _i229 = 0; _i229 < _map226.size; ++_i229)
            {
              _key227 = iprot.readString();
              _val228 = iprot.readString();
              struct.metaKeyValueMap.put(_key227, _val228);
            }
          }
          struct.setMetaKeyValueMapIsSet(true);
        }
        if (incoming.get(1)) {
          struct.checkNeighbors = iprot.readBool();
          struct.setCheckNeighborsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.checkBuddies = iprot.readBool();
          struct.setCheckBuddiesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findBlockUsingQuery_result implements org.apache.thrift.TBase<findBlockUsingQuery_result, findBlockUsingQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<findBlockUsingQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findBlockUsingQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findBlockUsingQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findBlockUsingQuery_resultTupleSchemeFactory();

    public java.util.Map<java.lang.Long,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findBlockUsingQuery_result.class, metaDataMap);
    }

    public findBlockUsingQuery_result() {
    }

    public findBlockUsingQuery_result(
      java.util.Map<java.lang.Long,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findBlockUsingQuery_result(findBlockUsingQuery_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.Long,java.lang.String> __this__success = new java.util.HashMap<java.lang.Long,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public findBlockUsingQuery_result deepCopy() {
      return new findBlockUsingQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.Long,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.Long,java.lang.String> getSuccess() {
      return this.success;
    }

    public findBlockUsingQuery_result setSuccess(java.util.Map<java.lang.Long,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.Long,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findBlockUsingQuery_result)
        return this.equals((findBlockUsingQuery_result)that);
      return false;
    }

    public boolean equals(findBlockUsingQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findBlockUsingQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findBlockUsingQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findBlockUsingQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBlockUsingQuery_resultStandardScheme getScheme() {
        return new findBlockUsingQuery_resultStandardScheme();
      }
    }

    private static class findBlockUsingQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findBlockUsingQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findBlockUsingQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map230 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.Long,java.lang.String>(2*_map230.size);
                  long _key231;
                  java.lang.String _val232;
                  for (int _i233 = 0; _i233 < _map230.size; ++_i233)
                  {
                    _key231 = iprot.readI64();
                    _val232 = iprot.readString();
                    struct.success.put(_key231, _val232);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findBlockUsingQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.Long, java.lang.String> _iter234 : struct.success.entrySet())
            {
              oprot.writeI64(_iter234.getKey());
              oprot.writeString(_iter234.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findBlockUsingQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findBlockUsingQuery_resultTupleScheme getScheme() {
        return new findBlockUsingQuery_resultTupleScheme();
      }
    }

    private static class findBlockUsingQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findBlockUsingQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findBlockUsingQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.Long, java.lang.String> _iter235 : struct.success.entrySet())
            {
              oprot.writeI64(_iter235.getKey());
              oprot.writeString(_iter235.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findBlockUsingQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map236 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.Long,java.lang.String>(2*_map236.size);
            long _key237;
            java.lang.String _val238;
            for (int _i239 = 0; _i239 < _map236.size; ++_i239)
            {
              _key237 = iprot.readI64();
              _val238 = iprot.readString();
              struct.success.put(_key237, _val238);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
