/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dreamlab.edgefs.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-12-15")
public class StreamMetadata implements org.apache.thrift.TBase<StreamMetadata, StreamMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<StreamMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StreamMetadata");

  private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streamId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RELIABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("reliability", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_REPLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("minReplica", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_REPLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("maxReplica", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField OTHER_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("otherProperties", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StreamMetadataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StreamMetadataTupleSchemeFactory();

  public java.lang.String streamId; // required
  public I64TypeStreamMetadata startTime; // required
  public I64TypeStreamMetadata endTime; // optional
  public DoubleTypeStreamMetadata reliability; // required
  public ByteTypeStreamMetadata minReplica; // required
  public ByteTypeStreamMetadata maxReplica; // required
  public I32TypeStreamMetadata version; // required
  public NodeInfoPrimaryTypeStreamMetadata owner; // optional
  public java.util.Map<java.lang.String,DynamicTypeStreamMetadata> otherProperties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STREAM_ID((short)1, "streamId"),
    START_TIME((short)2, "startTime"),
    END_TIME((short)3, "endTime"),
    RELIABILITY((short)4, "reliability"),
    MIN_REPLICA((short)5, "minReplica"),
    MAX_REPLICA((short)6, "maxReplica"),
    VERSION((short)7, "version"),
    OWNER((short)8, "owner"),
    OTHER_PROPERTIES((short)9, "otherProperties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STREAM_ID
          return STREAM_ID;
        case 2: // START_TIME
          return START_TIME;
        case 3: // END_TIME
          return END_TIME;
        case 4: // RELIABILITY
          return RELIABILITY;
        case 5: // MIN_REPLICA
          return MIN_REPLICA;
        case 6: // MAX_REPLICA
          return MAX_REPLICA;
        case 7: // VERSION
          return VERSION;
        case 8: // OWNER
          return OWNER;
        case 9: // OTHER_PROPERTIES
          return OTHER_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.END_TIME,_Fields.OWNER,_Fields.OTHER_PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("streamId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, I64TypeStreamMetadata.class)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, I64TypeStreamMetadata.class)));
    tmpMap.put(_Fields.RELIABILITY, new org.apache.thrift.meta_data.FieldMetaData("reliability", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DoubleTypeStreamMetadata.class)));
    tmpMap.put(_Fields.MIN_REPLICA, new org.apache.thrift.meta_data.FieldMetaData("minReplica", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ByteTypeStreamMetadata.class)));
    tmpMap.put(_Fields.MAX_REPLICA, new org.apache.thrift.meta_data.FieldMetaData("maxReplica", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ByteTypeStreamMetadata.class)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, I32TypeStreamMetadata.class)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfoPrimaryTypeStreamMetadata.class)));
    tmpMap.put(_Fields.OTHER_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("otherProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DynamicTypeStreamMetadata.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StreamMetadata.class, metaDataMap);
  }

  public StreamMetadata() {
  }

  public StreamMetadata(
    java.lang.String streamId,
    I64TypeStreamMetadata startTime,
    DoubleTypeStreamMetadata reliability,
    ByteTypeStreamMetadata minReplica,
    ByteTypeStreamMetadata maxReplica,
    I32TypeStreamMetadata version)
  {
    this();
    this.streamId = streamId;
    this.startTime = startTime;
    this.reliability = reliability;
    this.minReplica = minReplica;
    this.maxReplica = maxReplica;
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StreamMetadata(StreamMetadata other) {
    if (other.isSetStreamId()) {
      this.streamId = other.streamId;
    }
    if (other.isSetStartTime()) {
      this.startTime = new I64TypeStreamMetadata(other.startTime);
    }
    if (other.isSetEndTime()) {
      this.endTime = new I64TypeStreamMetadata(other.endTime);
    }
    if (other.isSetReliability()) {
      this.reliability = new DoubleTypeStreamMetadata(other.reliability);
    }
    if (other.isSetMinReplica()) {
      this.minReplica = new ByteTypeStreamMetadata(other.minReplica);
    }
    if (other.isSetMaxReplica()) {
      this.maxReplica = new ByteTypeStreamMetadata(other.maxReplica);
    }
    if (other.isSetVersion()) {
      this.version = new I32TypeStreamMetadata(other.version);
    }
    if (other.isSetOwner()) {
      this.owner = new NodeInfoPrimaryTypeStreamMetadata(other.owner);
    }
    if (other.isSetOtherProperties()) {
      java.util.Map<java.lang.String,DynamicTypeStreamMetadata> __this__otherProperties = new java.util.HashMap<java.lang.String,DynamicTypeStreamMetadata>(other.otherProperties.size());
      for (java.util.Map.Entry<java.lang.String, DynamicTypeStreamMetadata> other_element : other.otherProperties.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        DynamicTypeStreamMetadata other_element_value = other_element.getValue();

        java.lang.String __this__otherProperties_copy_key = other_element_key;

        DynamicTypeStreamMetadata __this__otherProperties_copy_value = new DynamicTypeStreamMetadata(other_element_value);

        __this__otherProperties.put(__this__otherProperties_copy_key, __this__otherProperties_copy_value);
      }
      this.otherProperties = __this__otherProperties;
    }
  }

  public StreamMetadata deepCopy() {
    return new StreamMetadata(this);
  }

  @Override
  public void clear() {
    this.streamId = null;
    this.startTime = null;
    this.endTime = null;
    this.reliability = null;
    this.minReplica = null;
    this.maxReplica = null;
    this.version = null;
    this.owner = null;
    this.otherProperties = null;
  }

  public java.lang.String getStreamId() {
    return this.streamId;
  }

  public StreamMetadata setStreamId(java.lang.String streamId) {
    this.streamId = streamId;
    return this;
  }

  public void unsetStreamId() {
    this.streamId = null;
  }

  /** Returns true if field streamId is set (has been assigned a value) and false otherwise */
  public boolean isSetStreamId() {
    return this.streamId != null;
  }

  public void setStreamIdIsSet(boolean value) {
    if (!value) {
      this.streamId = null;
    }
  }

  public I64TypeStreamMetadata getStartTime() {
    return this.startTime;
  }

  public StreamMetadata setStartTime(I64TypeStreamMetadata startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public I64TypeStreamMetadata getEndTime() {
    return this.endTime;
  }

  public StreamMetadata setEndTime(I64TypeStreamMetadata endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public DoubleTypeStreamMetadata getReliability() {
    return this.reliability;
  }

  public StreamMetadata setReliability(DoubleTypeStreamMetadata reliability) {
    this.reliability = reliability;
    return this;
  }

  public void unsetReliability() {
    this.reliability = null;
  }

  /** Returns true if field reliability is set (has been assigned a value) and false otherwise */
  public boolean isSetReliability() {
    return this.reliability != null;
  }

  public void setReliabilityIsSet(boolean value) {
    if (!value) {
      this.reliability = null;
    }
  }

  public ByteTypeStreamMetadata getMinReplica() {
    return this.minReplica;
  }

  public StreamMetadata setMinReplica(ByteTypeStreamMetadata minReplica) {
    this.minReplica = minReplica;
    return this;
  }

  public void unsetMinReplica() {
    this.minReplica = null;
  }

  /** Returns true if field minReplica is set (has been assigned a value) and false otherwise */
  public boolean isSetMinReplica() {
    return this.minReplica != null;
  }

  public void setMinReplicaIsSet(boolean value) {
    if (!value) {
      this.minReplica = null;
    }
  }

  public ByteTypeStreamMetadata getMaxReplica() {
    return this.maxReplica;
  }

  public StreamMetadata setMaxReplica(ByteTypeStreamMetadata maxReplica) {
    this.maxReplica = maxReplica;
    return this;
  }

  public void unsetMaxReplica() {
    this.maxReplica = null;
  }

  /** Returns true if field maxReplica is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxReplica() {
    return this.maxReplica != null;
  }

  public void setMaxReplicaIsSet(boolean value) {
    if (!value) {
      this.maxReplica = null;
    }
  }

  public I32TypeStreamMetadata getVersion() {
    return this.version;
  }

  public StreamMetadata setVersion(I32TypeStreamMetadata version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public NodeInfoPrimaryTypeStreamMetadata getOwner() {
    return this.owner;
  }

  public StreamMetadata setOwner(NodeInfoPrimaryTypeStreamMetadata owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public int getOtherPropertiesSize() {
    return (this.otherProperties == null) ? 0 : this.otherProperties.size();
  }

  public void putToOtherProperties(java.lang.String key, DynamicTypeStreamMetadata val) {
    if (this.otherProperties == null) {
      this.otherProperties = new java.util.HashMap<java.lang.String,DynamicTypeStreamMetadata>();
    }
    this.otherProperties.put(key, val);
  }

  public java.util.Map<java.lang.String,DynamicTypeStreamMetadata> getOtherProperties() {
    return this.otherProperties;
  }

  public StreamMetadata setOtherProperties(java.util.Map<java.lang.String,DynamicTypeStreamMetadata> otherProperties) {
    this.otherProperties = otherProperties;
    return this;
  }

  public void unsetOtherProperties() {
    this.otherProperties = null;
  }

  /** Returns true if field otherProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherProperties() {
    return this.otherProperties != null;
  }

  public void setOtherPropertiesIsSet(boolean value) {
    if (!value) {
      this.otherProperties = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STREAM_ID:
      if (value == null) {
        unsetStreamId();
      } else {
        setStreamId((java.lang.String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((I64TypeStreamMetadata)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((I64TypeStreamMetadata)value);
      }
      break;

    case RELIABILITY:
      if (value == null) {
        unsetReliability();
      } else {
        setReliability((DoubleTypeStreamMetadata)value);
      }
      break;

    case MIN_REPLICA:
      if (value == null) {
        unsetMinReplica();
      } else {
        setMinReplica((ByteTypeStreamMetadata)value);
      }
      break;

    case MAX_REPLICA:
      if (value == null) {
        unsetMaxReplica();
      } else {
        setMaxReplica((ByteTypeStreamMetadata)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((I32TypeStreamMetadata)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((NodeInfoPrimaryTypeStreamMetadata)value);
      }
      break;

    case OTHER_PROPERTIES:
      if (value == null) {
        unsetOtherProperties();
      } else {
        setOtherProperties((java.util.Map<java.lang.String,DynamicTypeStreamMetadata>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STREAM_ID:
      return getStreamId();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case RELIABILITY:
      return getReliability();

    case MIN_REPLICA:
      return getMinReplica();

    case MAX_REPLICA:
      return getMaxReplica();

    case VERSION:
      return getVersion();

    case OWNER:
      return getOwner();

    case OTHER_PROPERTIES:
      return getOtherProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STREAM_ID:
      return isSetStreamId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case RELIABILITY:
      return isSetReliability();
    case MIN_REPLICA:
      return isSetMinReplica();
    case MAX_REPLICA:
      return isSetMaxReplica();
    case VERSION:
      return isSetVersion();
    case OWNER:
      return isSetOwner();
    case OTHER_PROPERTIES:
      return isSetOtherProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StreamMetadata)
      return this.equals((StreamMetadata)that);
    return false;
  }

  public boolean equals(StreamMetadata that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_streamId = true && this.isSetStreamId();
    boolean that_present_streamId = true && that.isSetStreamId();
    if (this_present_streamId || that_present_streamId) {
      if (!(this_present_streamId && that_present_streamId))
        return false;
      if (!this.streamId.equals(that.streamId))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_reliability = true && this.isSetReliability();
    boolean that_present_reliability = true && that.isSetReliability();
    if (this_present_reliability || that_present_reliability) {
      if (!(this_present_reliability && that_present_reliability))
        return false;
      if (!this.reliability.equals(that.reliability))
        return false;
    }

    boolean this_present_minReplica = true && this.isSetMinReplica();
    boolean that_present_minReplica = true && that.isSetMinReplica();
    if (this_present_minReplica || that_present_minReplica) {
      if (!(this_present_minReplica && that_present_minReplica))
        return false;
      if (!this.minReplica.equals(that.minReplica))
        return false;
    }

    boolean this_present_maxReplica = true && this.isSetMaxReplica();
    boolean that_present_maxReplica = true && that.isSetMaxReplica();
    if (this_present_maxReplica || that_present_maxReplica) {
      if (!(this_present_maxReplica && that_present_maxReplica))
        return false;
      if (!this.maxReplica.equals(that.maxReplica))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_otherProperties = true && this.isSetOtherProperties();
    boolean that_present_otherProperties = true && that.isSetOtherProperties();
    if (this_present_otherProperties || that_present_otherProperties) {
      if (!(this_present_otherProperties && that_present_otherProperties))
        return false;
      if (!this.otherProperties.equals(that.otherProperties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStreamId()) ? 131071 : 524287);
    if (isSetStreamId())
      hashCode = hashCode * 8191 + streamId.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetReliability()) ? 131071 : 524287);
    if (isSetReliability())
      hashCode = hashCode * 8191 + reliability.hashCode();

    hashCode = hashCode * 8191 + ((isSetMinReplica()) ? 131071 : 524287);
    if (isSetMinReplica())
      hashCode = hashCode * 8191 + minReplica.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxReplica()) ? 131071 : 524287);
    if (isSetMaxReplica())
      hashCode = hashCode * 8191 + maxReplica.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetOwner()) ? 131071 : 524287);
    if (isSetOwner())
      hashCode = hashCode * 8191 + owner.hashCode();

    hashCode = hashCode * 8191 + ((isSetOtherProperties()) ? 131071 : 524287);
    if (isSetOtherProperties())
      hashCode = hashCode * 8191 + otherProperties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StreamMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStreamId()).compareTo(other.isSetStreamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamId, other.streamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReliability()).compareTo(other.isSetReliability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReliability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reliability, other.reliability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinReplica()).compareTo(other.isSetMinReplica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinReplica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minReplica, other.minReplica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxReplica()).compareTo(other.isSetMaxReplica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxReplica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxReplica, other.maxReplica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOtherProperties()).compareTo(other.isSetOtherProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherProperties, other.otherProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StreamMetadata(");
    boolean first = true;

    sb.append("streamId:");
    if (this.streamId == null) {
      sb.append("null");
    } else {
      sb.append(this.streamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("reliability:");
    if (this.reliability == null) {
      sb.append("null");
    } else {
      sb.append(this.reliability);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minReplica:");
    if (this.minReplica == null) {
      sb.append("null");
    } else {
      sb.append(this.minReplica);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxReplica:");
    if (this.maxReplica == null) {
      sb.append("null");
    } else {
      sb.append(this.maxReplica);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (isSetOwner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    if (isSetOtherProperties()) {
      if (!first) sb.append(", ");
      sb.append("otherProperties:");
      if (this.otherProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.otherProperties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (streamId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'streamId' was not present! Struct: " + toString());
    }
    if (startTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not present! Struct: " + toString());
    }
    if (reliability == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reliability' was not present! Struct: " + toString());
    }
    if (minReplica == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'minReplica' was not present! Struct: " + toString());
    }
    if (maxReplica == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxReplica' was not present! Struct: " + toString());
    }
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (startTime != null) {
      startTime.validate();
    }
    if (endTime != null) {
      endTime.validate();
    }
    if (reliability != null) {
      reliability.validate();
    }
    if (minReplica != null) {
      minReplica.validate();
    }
    if (maxReplica != null) {
      maxReplica.validate();
    }
    if (version != null) {
      version.validate();
    }
    if (owner != null) {
      owner.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StreamMetadataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StreamMetadataStandardScheme getScheme() {
      return new StreamMetadataStandardScheme();
    }
  }

  private static class StreamMetadataStandardScheme extends org.apache.thrift.scheme.StandardScheme<StreamMetadata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StreamMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STREAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.streamId = iprot.readString();
              struct.setStreamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startTime = new I64TypeStreamMetadata();
              struct.startTime.read(iprot);
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.endTime = new I64TypeStreamMetadata();
              struct.endTime.read(iprot);
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RELIABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reliability = new DoubleTypeStreamMetadata();
              struct.reliability.read(iprot);
              struct.setReliabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN_REPLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.minReplica = new ByteTypeStreamMetadata();
              struct.minReplica.read(iprot);
              struct.setMinReplicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_REPLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.maxReplica = new ByteTypeStreamMetadata();
              struct.maxReplica.read(iprot);
              struct.setMaxReplicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.version = new I32TypeStreamMetadata();
              struct.version.read(iprot);
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.owner = new NodeInfoPrimaryTypeStreamMetadata();
              struct.owner.read(iprot);
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OTHER_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                struct.otherProperties = new java.util.HashMap<java.lang.String,DynamicTypeStreamMetadata>(2*_map48.size);
                java.lang.String _key49;
                DynamicTypeStreamMetadata _val50;
                for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                {
                  _key49 = iprot.readString();
                  _val50 = new DynamicTypeStreamMetadata();
                  _val50.read(iprot);
                  struct.otherProperties.put(_key49, _val50);
                }
                iprot.readMapEnd();
              }
              struct.setOtherPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StreamMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.streamId != null) {
        oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
        oprot.writeString(struct.streamId);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        struct.startTime.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          struct.endTime.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reliability != null) {
        oprot.writeFieldBegin(RELIABILITY_FIELD_DESC);
        struct.reliability.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.minReplica != null) {
        oprot.writeFieldBegin(MIN_REPLICA_FIELD_DESC);
        struct.minReplica.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.maxReplica != null) {
        oprot.writeFieldBegin(MAX_REPLICA_FIELD_DESC);
        struct.maxReplica.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        struct.version.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        if (struct.isSetOwner()) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          struct.owner.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.otherProperties != null) {
        if (struct.isSetOtherProperties()) {
          oprot.writeFieldBegin(OTHER_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.otherProperties.size()));
            for (java.util.Map.Entry<java.lang.String, DynamicTypeStreamMetadata> _iter52 : struct.otherProperties.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              _iter52.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StreamMetadataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StreamMetadataTupleScheme getScheme() {
      return new StreamMetadataTupleScheme();
    }
  }

  private static class StreamMetadataTupleScheme extends org.apache.thrift.scheme.TupleScheme<StreamMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StreamMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.streamId);
      struct.startTime.write(oprot);
      struct.reliability.write(oprot);
      struct.minReplica.write(oprot);
      struct.maxReplica.write(oprot);
      struct.version.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEndTime()) {
        optionals.set(0);
      }
      if (struct.isSetOwner()) {
        optionals.set(1);
      }
      if (struct.isSetOtherProperties()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetEndTime()) {
        struct.endTime.write(oprot);
      }
      if (struct.isSetOwner()) {
        struct.owner.write(oprot);
      }
      if (struct.isSetOtherProperties()) {
        {
          oprot.writeI32(struct.otherProperties.size());
          for (java.util.Map.Entry<java.lang.String, DynamicTypeStreamMetadata> _iter53 : struct.otherProperties.entrySet())
          {
            oprot.writeString(_iter53.getKey());
            _iter53.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StreamMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.streamId = iprot.readString();
      struct.setStreamIdIsSet(true);
      struct.startTime = new I64TypeStreamMetadata();
      struct.startTime.read(iprot);
      struct.setStartTimeIsSet(true);
      struct.reliability = new DoubleTypeStreamMetadata();
      struct.reliability.read(iprot);
      struct.setReliabilityIsSet(true);
      struct.minReplica = new ByteTypeStreamMetadata();
      struct.minReplica.read(iprot);
      struct.setMinReplicaIsSet(true);
      struct.maxReplica = new ByteTypeStreamMetadata();
      struct.maxReplica.read(iprot);
      struct.setMaxReplicaIsSet(true);
      struct.version = new I32TypeStreamMetadata();
      struct.version.read(iprot);
      struct.setVersionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.endTime = new I64TypeStreamMetadata();
        struct.endTime.read(iprot);
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.owner = new NodeInfoPrimaryTypeStreamMetadata();
        struct.owner.read(iprot);
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.otherProperties = new java.util.HashMap<java.lang.String,DynamicTypeStreamMetadata>(2*_map54.size);
          java.lang.String _key55;
          DynamicTypeStreamMetadata _val56;
          for (int _i57 = 0; _i57 < _map54.size; ++_i57)
          {
            _key55 = iprot.readString();
            _val56 = new DynamicTypeStreamMetadata();
            _val56.read(iprot);
            struct.otherProperties.put(_key55, _val56);
          }
        }
        struct.setOtherPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

