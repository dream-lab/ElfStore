/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dreamlab.edgefs.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-02-21")
public class StreamMetadata implements org.apache.thrift.TBase<StreamMetadata, StreamMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<StreamMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StreamMetadata");

  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RELIABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("reliability", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_REPLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("minReplica", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_REPLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("maxReplica", org.apache.thrift.protocol.TType.BYTE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StreamMetadataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StreamMetadataTupleSchemeFactory();

  public long startTime; // required
  public long endTime; // optional
  public double reliability; // required
  public byte minReplica; // required
  public byte maxReplica; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_TIME((short)1, "startTime"),
    END_TIME((short)2, "endTime"),
    RELIABILITY((short)3, "reliability"),
    MIN_REPLICA((short)4, "minReplica"),
    MAX_REPLICA((short)5, "maxReplica");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_TIME
          return START_TIME;
        case 2: // END_TIME
          return END_TIME;
        case 3: // RELIABILITY
          return RELIABILITY;
        case 4: // MIN_REPLICA
          return MIN_REPLICA;
        case 5: // MAX_REPLICA
          return MAX_REPLICA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private static final int __RELIABILITY_ISSET_ID = 2;
  private static final int __MINREPLICA_ISSET_ID = 3;
  private static final int __MAXREPLICA_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.END_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RELIABILITY, new org.apache.thrift.meta_data.FieldMetaData("reliability", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_REPLICA, new org.apache.thrift.meta_data.FieldMetaData("minReplica", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MAX_REPLICA, new org.apache.thrift.meta_data.FieldMetaData("maxReplica", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StreamMetadata.class, metaDataMap);
  }

  public StreamMetadata() {
  }

  public StreamMetadata(
    long startTime,
    double reliability,
    byte minReplica,
    byte maxReplica)
  {
    this();
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.reliability = reliability;
    setReliabilityIsSet(true);
    this.minReplica = minReplica;
    setMinReplicaIsSet(true);
    this.maxReplica = maxReplica;
    setMaxReplicaIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StreamMetadata(StreamMetadata other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.reliability = other.reliability;
    this.minReplica = other.minReplica;
    this.maxReplica = other.maxReplica;
  }

  public StreamMetadata deepCopy() {
    return new StreamMetadata(this);
  }

  @Override
  public void clear() {
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setReliabilityIsSet(false);
    this.reliability = 0.0;
    setMinReplicaIsSet(false);
    this.minReplica = 0;
    setMaxReplicaIsSet(false);
    this.maxReplica = 0;
  }

  public long getStartTime() {
    return this.startTime;
  }

  public StreamMetadata setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public StreamMetadata setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public double getReliability() {
    return this.reliability;
  }

  public StreamMetadata setReliability(double reliability) {
    this.reliability = reliability;
    setReliabilityIsSet(true);
    return this;
  }

  public void unsetReliability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELIABILITY_ISSET_ID);
  }

  /** Returns true if field reliability is set (has been assigned a value) and false otherwise */
  public boolean isSetReliability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELIABILITY_ISSET_ID);
  }

  public void setReliabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELIABILITY_ISSET_ID, value);
  }

  public byte getMinReplica() {
    return this.minReplica;
  }

  public StreamMetadata setMinReplica(byte minReplica) {
    this.minReplica = minReplica;
    setMinReplicaIsSet(true);
    return this;
  }

  public void unsetMinReplica() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINREPLICA_ISSET_ID);
  }

  /** Returns true if field minReplica is set (has been assigned a value) and false otherwise */
  public boolean isSetMinReplica() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINREPLICA_ISSET_ID);
  }

  public void setMinReplicaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINREPLICA_ISSET_ID, value);
  }

  public byte getMaxReplica() {
    return this.maxReplica;
  }

  public StreamMetadata setMaxReplica(byte maxReplica) {
    this.maxReplica = maxReplica;
    setMaxReplicaIsSet(true);
    return this;
  }

  public void unsetMaxReplica() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXREPLICA_ISSET_ID);
  }

  /** Returns true if field maxReplica is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxReplica() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXREPLICA_ISSET_ID);
  }

  public void setMaxReplicaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXREPLICA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((java.lang.Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((java.lang.Long)value);
      }
      break;

    case RELIABILITY:
      if (value == null) {
        unsetReliability();
      } else {
        setReliability((java.lang.Double)value);
      }
      break;

    case MIN_REPLICA:
      if (value == null) {
        unsetMinReplica();
      } else {
        setMinReplica((java.lang.Byte)value);
      }
      break;

    case MAX_REPLICA:
      if (value == null) {
        unsetMaxReplica();
      } else {
        setMaxReplica((java.lang.Byte)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case RELIABILITY:
      return getReliability();

    case MIN_REPLICA:
      return getMinReplica();

    case MAX_REPLICA:
      return getMaxReplica();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case RELIABILITY:
      return isSetReliability();
    case MIN_REPLICA:
      return isSetMinReplica();
    case MAX_REPLICA:
      return isSetMaxReplica();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StreamMetadata)
      return this.equals((StreamMetadata)that);
    return false;
  }

  public boolean equals(StreamMetadata that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_reliability = true;
    boolean that_present_reliability = true;
    if (this_present_reliability || that_present_reliability) {
      if (!(this_present_reliability && that_present_reliability))
        return false;
      if (this.reliability != that.reliability)
        return false;
    }

    boolean this_present_minReplica = true;
    boolean that_present_minReplica = true;
    if (this_present_minReplica || that_present_minReplica) {
      if (!(this_present_minReplica && that_present_minReplica))
        return false;
      if (this.minReplica != that.minReplica)
        return false;
    }

    boolean this_present_maxReplica = true;
    boolean that_present_maxReplica = true;
    if (this_present_maxReplica || that_present_maxReplica) {
      if (!(this_present_maxReplica && that_present_maxReplica))
        return false;
      if (this.maxReplica != that.maxReplica)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTime);

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reliability);

    hashCode = hashCode * 8191 + (int) (minReplica);

    hashCode = hashCode * 8191 + (int) (maxReplica);

    return hashCode;
  }

  @Override
  public int compareTo(StreamMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReliability()).compareTo(other.isSetReliability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReliability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reliability, other.reliability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinReplica()).compareTo(other.isSetMinReplica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinReplica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minReplica, other.minReplica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxReplica()).compareTo(other.isSetMaxReplica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxReplica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxReplica, other.maxReplica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StreamMetadata(");
    boolean first = true;

    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("reliability:");
    sb.append(this.reliability);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minReplica:");
    sb.append(this.minReplica);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxReplica:");
    sb.append(this.maxReplica);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'startTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'reliability' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'minReplica' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'maxReplica' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StreamMetadataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StreamMetadataStandardScheme getScheme() {
      return new StreamMetadataStandardScheme();
    }
  }

  private static class StreamMetadataStandardScheme extends org.apache.thrift.scheme.StandardScheme<StreamMetadata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StreamMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RELIABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reliability = iprot.readDouble();
              struct.setReliabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_REPLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.minReplica = iprot.readByte();
              struct.setMinReplicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_REPLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.maxReplica = iprot.readByte();
              struct.setMaxReplicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStartTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReliability()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reliability' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMinReplica()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'minReplica' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMaxReplica()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxReplica' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StreamMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      if (struct.isSetEndTime()) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RELIABILITY_FIELD_DESC);
      oprot.writeDouble(struct.reliability);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_REPLICA_FIELD_DESC);
      oprot.writeByte(struct.minReplica);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_REPLICA_FIELD_DESC);
      oprot.writeByte(struct.maxReplica);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StreamMetadataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StreamMetadataTupleScheme getScheme() {
      return new StreamMetadataTupleScheme();
    }
  }

  private static class StreamMetadataTupleScheme extends org.apache.thrift.scheme.TupleScheme<StreamMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StreamMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.startTime);
      oprot.writeDouble(struct.reliability);
      oprot.writeByte(struct.minReplica);
      oprot.writeByte(struct.maxReplica);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEndTime()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StreamMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.startTime = iprot.readI64();
      struct.setStartTimeIsSet(true);
      struct.reliability = iprot.readDouble();
      struct.setReliabilityIsSet(true);
      struct.minReplica = iprot.readByte();
      struct.setMinReplicaIsSet(true);
      struct.maxReplica = iprot.readByte();
      struct.setMaxReplicaIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

