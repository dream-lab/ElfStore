/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dreamlab.edgefs.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-07-22")
public class MessagePayload implements org.apache.thrift.TBase<MessagePayload, MessagePayload._Fields>, java.io.Serializable, Cloneable, Comparable<MessagePayload> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessagePayload");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField POOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("poolId", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField RELIABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("reliability", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField BLOOM_FILTER_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("bloomFilterUpdates", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COARSE_GRAINED_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("coarseGrainedStats", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("poolSize", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField POOL_SIZE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("poolSizeMap", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessagePayloadStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessagePayloadTupleSchemeFactory();

  public short nodeId; // required
  public java.lang.String ip; // optional
  public int port; // optional
  public short poolId; // optional
  public double reliability; // optional
  public java.nio.ByteBuffer bloomFilterUpdates; // optional
  public java.util.List<java.nio.ByteBuffer> coarseGrainedStats; // optional
  public short poolSize; // optional
  public java.util.Map<java.lang.Short,java.lang.Short> poolSizeMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    IP((short)2, "ip"),
    PORT((short)3, "port"),
    POOL_ID((short)4, "poolId"),
    RELIABILITY((short)5, "reliability"),
    BLOOM_FILTER_UPDATES((short)6, "bloomFilterUpdates"),
    COARSE_GRAINED_STATS((short)7, "coarseGrainedStats"),
    POOL_SIZE((short)8, "poolSize"),
    POOL_SIZE_MAP((short)9, "poolSizeMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // IP
          return IP;
        case 3: // PORT
          return PORT;
        case 4: // POOL_ID
          return POOL_ID;
        case 5: // RELIABILITY
          return RELIABILITY;
        case 6: // BLOOM_FILTER_UPDATES
          return BLOOM_FILTER_UPDATES;
        case 7: // COARSE_GRAINED_STATS
          return COARSE_GRAINED_STATS;
        case 8: // POOL_SIZE
          return POOL_SIZE;
        case 9: // POOL_SIZE_MAP
          return POOL_SIZE_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODEID_ISSET_ID = 0;
  private static final int __PORT_ISSET_ID = 1;
  private static final int __POOLID_ISSET_ID = 2;
  private static final int __RELIABILITY_ISSET_ID = 3;
  private static final int __POOLSIZE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IP,_Fields.PORT,_Fields.POOL_ID,_Fields.RELIABILITY,_Fields.BLOOM_FILTER_UPDATES,_Fields.COARSE_GRAINED_STATS,_Fields.POOL_SIZE,_Fields.POOL_SIZE_MAP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POOL_ID, new org.apache.thrift.meta_data.FieldMetaData("poolId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RELIABILITY, new org.apache.thrift.meta_data.FieldMetaData("reliability", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BLOOM_FILTER_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("bloomFilterUpdates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.COARSE_GRAINED_STATS, new org.apache.thrift.meta_data.FieldMetaData("coarseGrainedStats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("poolSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.POOL_SIZE_MAP, new org.apache.thrift.meta_data.FieldMetaData("poolSizeMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessagePayload.class, metaDataMap);
  }

  public MessagePayload() {
  }

  public MessagePayload(
    short nodeId)
  {
    this();
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessagePayload(MessagePayload other) {
    __isset_bitfield = other.__isset_bitfield;
    this.nodeId = other.nodeId;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.port = other.port;
    this.poolId = other.poolId;
    this.reliability = other.reliability;
    if (other.isSetBloomFilterUpdates()) {
      this.bloomFilterUpdates = org.apache.thrift.TBaseHelper.copyBinary(other.bloomFilterUpdates);
    }
    if (other.isSetCoarseGrainedStats()) {
      java.util.List<java.nio.ByteBuffer> __this__coarseGrainedStats = new java.util.ArrayList<java.nio.ByteBuffer>(other.coarseGrainedStats);
      this.coarseGrainedStats = __this__coarseGrainedStats;
    }
    this.poolSize = other.poolSize;
    if (other.isSetPoolSizeMap()) {
      java.util.Map<java.lang.Short,java.lang.Short> __this__poolSizeMap = new java.util.HashMap<java.lang.Short,java.lang.Short>(other.poolSizeMap);
      this.poolSizeMap = __this__poolSizeMap;
    }
  }

  public MessagePayload deepCopy() {
    return new MessagePayload(this);
  }

  @Override
  public void clear() {
    setNodeIdIsSet(false);
    this.nodeId = 0;
    this.ip = null;
    setPortIsSet(false);
    this.port = 0;
    setPoolIdIsSet(false);
    this.poolId = 0;
    setReliabilityIsSet(false);
    this.reliability = 0.0;
    this.bloomFilterUpdates = null;
    this.coarseGrainedStats = null;
    setPoolSizeIsSet(false);
    this.poolSize = 0;
    this.poolSizeMap = null;
  }

  public short getNodeId() {
    return this.nodeId;
  }

  public MessagePayload setNodeId(short nodeId) {
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    return this;
  }

  public void unsetNodeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  public void setNodeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
  }

  public java.lang.String getIp() {
    return this.ip;
  }

  public MessagePayload setIp(java.lang.String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public MessagePayload setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public short getPoolId() {
    return this.poolId;
  }

  public MessagePayload setPoolId(short poolId) {
    this.poolId = poolId;
    setPoolIdIsSet(true);
    return this;
  }

  public void unsetPoolId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POOLID_ISSET_ID);
  }

  /** Returns true if field poolId is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POOLID_ISSET_ID);
  }

  public void setPoolIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POOLID_ISSET_ID, value);
  }

  public double getReliability() {
    return this.reliability;
  }

  public MessagePayload setReliability(double reliability) {
    this.reliability = reliability;
    setReliabilityIsSet(true);
    return this;
  }

  public void unsetReliability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELIABILITY_ISSET_ID);
  }

  /** Returns true if field reliability is set (has been assigned a value) and false otherwise */
  public boolean isSetReliability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELIABILITY_ISSET_ID);
  }

  public void setReliabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELIABILITY_ISSET_ID, value);
  }

  public byte[] getBloomFilterUpdates() {
    setBloomFilterUpdates(org.apache.thrift.TBaseHelper.rightSize(bloomFilterUpdates));
    return bloomFilterUpdates == null ? null : bloomFilterUpdates.array();
  }

  public java.nio.ByteBuffer bufferForBloomFilterUpdates() {
    return org.apache.thrift.TBaseHelper.copyBinary(bloomFilterUpdates);
  }

  public MessagePayload setBloomFilterUpdates(byte[] bloomFilterUpdates) {
    this.bloomFilterUpdates = bloomFilterUpdates == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(bloomFilterUpdates.clone());
    return this;
  }

  public MessagePayload setBloomFilterUpdates(java.nio.ByteBuffer bloomFilterUpdates) {
    this.bloomFilterUpdates = org.apache.thrift.TBaseHelper.copyBinary(bloomFilterUpdates);
    return this;
  }

  public void unsetBloomFilterUpdates() {
    this.bloomFilterUpdates = null;
  }

  /** Returns true if field bloomFilterUpdates is set (has been assigned a value) and false otherwise */
  public boolean isSetBloomFilterUpdates() {
    return this.bloomFilterUpdates != null;
  }

  public void setBloomFilterUpdatesIsSet(boolean value) {
    if (!value) {
      this.bloomFilterUpdates = null;
    }
  }

  public int getCoarseGrainedStatsSize() {
    return (this.coarseGrainedStats == null) ? 0 : this.coarseGrainedStats.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getCoarseGrainedStatsIterator() {
    return (this.coarseGrainedStats == null) ? null : this.coarseGrainedStats.iterator();
  }

  public void addToCoarseGrainedStats(java.nio.ByteBuffer elem) {
    if (this.coarseGrainedStats == null) {
      this.coarseGrainedStats = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.coarseGrainedStats.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getCoarseGrainedStats() {
    return this.coarseGrainedStats;
  }

  public MessagePayload setCoarseGrainedStats(java.util.List<java.nio.ByteBuffer> coarseGrainedStats) {
    this.coarseGrainedStats = coarseGrainedStats;
    return this;
  }

  public void unsetCoarseGrainedStats() {
    this.coarseGrainedStats = null;
  }

  /** Returns true if field coarseGrainedStats is set (has been assigned a value) and false otherwise */
  public boolean isSetCoarseGrainedStats() {
    return this.coarseGrainedStats != null;
  }

  public void setCoarseGrainedStatsIsSet(boolean value) {
    if (!value) {
      this.coarseGrainedStats = null;
    }
  }

  public short getPoolSize() {
    return this.poolSize;
  }

  public MessagePayload setPoolSize(short poolSize) {
    this.poolSize = poolSize;
    setPoolSizeIsSet(true);
    return this;
  }

  public void unsetPoolSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POOLSIZE_ISSET_ID);
  }

  /** Returns true if field poolSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POOLSIZE_ISSET_ID);
  }

  public void setPoolSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POOLSIZE_ISSET_ID, value);
  }

  public int getPoolSizeMapSize() {
    return (this.poolSizeMap == null) ? 0 : this.poolSizeMap.size();
  }

  public void putToPoolSizeMap(short key, short val) {
    if (this.poolSizeMap == null) {
      this.poolSizeMap = new java.util.HashMap<java.lang.Short,java.lang.Short>();
    }
    this.poolSizeMap.put(key, val);
  }

  public java.util.Map<java.lang.Short,java.lang.Short> getPoolSizeMap() {
    return this.poolSizeMap;
  }

  public MessagePayload setPoolSizeMap(java.util.Map<java.lang.Short,java.lang.Short> poolSizeMap) {
    this.poolSizeMap = poolSizeMap;
    return this;
  }

  public void unsetPoolSizeMap() {
    this.poolSizeMap = null;
  }

  /** Returns true if field poolSizeMap is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolSizeMap() {
    return this.poolSizeMap != null;
  }

  public void setPoolSizeMapIsSet(boolean value) {
    if (!value) {
      this.poolSizeMap = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((java.lang.Short)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.Integer)value);
      }
      break;

    case POOL_ID:
      if (value == null) {
        unsetPoolId();
      } else {
        setPoolId((java.lang.Short)value);
      }
      break;

    case RELIABILITY:
      if (value == null) {
        unsetReliability();
      } else {
        setReliability((java.lang.Double)value);
      }
      break;

    case BLOOM_FILTER_UPDATES:
      if (value == null) {
        unsetBloomFilterUpdates();
      } else {
        if (value instanceof byte[]) {
          setBloomFilterUpdates((byte[])value);
        } else {
          setBloomFilterUpdates((java.nio.ByteBuffer)value);
        }
      }
      break;

    case COARSE_GRAINED_STATS:
      if (value == null) {
        unsetCoarseGrainedStats();
      } else {
        setCoarseGrainedStats((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case POOL_SIZE:
      if (value == null) {
        unsetPoolSize();
      } else {
        setPoolSize((java.lang.Short)value);
      }
      break;

    case POOL_SIZE_MAP:
      if (value == null) {
        unsetPoolSizeMap();
      } else {
        setPoolSizeMap((java.util.Map<java.lang.Short,java.lang.Short>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case IP:
      return getIp();

    case PORT:
      return getPort();

    case POOL_ID:
      return getPoolId();

    case RELIABILITY:
      return getReliability();

    case BLOOM_FILTER_UPDATES:
      return getBloomFilterUpdates();

    case COARSE_GRAINED_STATS:
      return getCoarseGrainedStats();

    case POOL_SIZE:
      return getPoolSize();

    case POOL_SIZE_MAP:
      return getPoolSizeMap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case IP:
      return isSetIp();
    case PORT:
      return isSetPort();
    case POOL_ID:
      return isSetPoolId();
    case RELIABILITY:
      return isSetReliability();
    case BLOOM_FILTER_UPDATES:
      return isSetBloomFilterUpdates();
    case COARSE_GRAINED_STATS:
      return isSetCoarseGrainedStats();
    case POOL_SIZE:
      return isSetPoolSize();
    case POOL_SIZE_MAP:
      return isSetPoolSizeMap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MessagePayload)
      return this.equals((MessagePayload)that);
    return false;
  }

  public boolean equals(MessagePayload that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeId = true;
    boolean that_present_nodeId = true;
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (this.nodeId != that.nodeId)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_poolId = true && this.isSetPoolId();
    boolean that_present_poolId = true && that.isSetPoolId();
    if (this_present_poolId || that_present_poolId) {
      if (!(this_present_poolId && that_present_poolId))
        return false;
      if (this.poolId != that.poolId)
        return false;
    }

    boolean this_present_reliability = true && this.isSetReliability();
    boolean that_present_reliability = true && that.isSetReliability();
    if (this_present_reliability || that_present_reliability) {
      if (!(this_present_reliability && that_present_reliability))
        return false;
      if (this.reliability != that.reliability)
        return false;
    }

    boolean this_present_bloomFilterUpdates = true && this.isSetBloomFilterUpdates();
    boolean that_present_bloomFilterUpdates = true && that.isSetBloomFilterUpdates();
    if (this_present_bloomFilterUpdates || that_present_bloomFilterUpdates) {
      if (!(this_present_bloomFilterUpdates && that_present_bloomFilterUpdates))
        return false;
      if (!this.bloomFilterUpdates.equals(that.bloomFilterUpdates))
        return false;
    }

    boolean this_present_coarseGrainedStats = true && this.isSetCoarseGrainedStats();
    boolean that_present_coarseGrainedStats = true && that.isSetCoarseGrainedStats();
    if (this_present_coarseGrainedStats || that_present_coarseGrainedStats) {
      if (!(this_present_coarseGrainedStats && that_present_coarseGrainedStats))
        return false;
      if (!this.coarseGrainedStats.equals(that.coarseGrainedStats))
        return false;
    }

    boolean this_present_poolSize = true && this.isSetPoolSize();
    boolean that_present_poolSize = true && that.isSetPoolSize();
    if (this_present_poolSize || that_present_poolSize) {
      if (!(this_present_poolSize && that_present_poolSize))
        return false;
      if (this.poolSize != that.poolSize)
        return false;
    }

    boolean this_present_poolSizeMap = true && this.isSetPoolSizeMap();
    boolean that_present_poolSizeMap = true && that.isSetPoolSizeMap();
    if (this_present_poolSizeMap || that_present_poolSizeMap) {
      if (!(this_present_poolSizeMap && that_present_poolSizeMap))
        return false;
      if (!this.poolSizeMap.equals(that.poolSizeMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + nodeId;

    hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
    if (isSetIp())
      hashCode = hashCode * 8191 + ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
    if (isSetPort())
      hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + ((isSetPoolId()) ? 131071 : 524287);
    if (isSetPoolId())
      hashCode = hashCode * 8191 + poolId;

    hashCode = hashCode * 8191 + ((isSetReliability()) ? 131071 : 524287);
    if (isSetReliability())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reliability);

    hashCode = hashCode * 8191 + ((isSetBloomFilterUpdates()) ? 131071 : 524287);
    if (isSetBloomFilterUpdates())
      hashCode = hashCode * 8191 + bloomFilterUpdates.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoarseGrainedStats()) ? 131071 : 524287);
    if (isSetCoarseGrainedStats())
      hashCode = hashCode * 8191 + coarseGrainedStats.hashCode();

    hashCode = hashCode * 8191 + ((isSetPoolSize()) ? 131071 : 524287);
    if (isSetPoolSize())
      hashCode = hashCode * 8191 + poolSize;

    hashCode = hashCode * 8191 + ((isSetPoolSizeMap()) ? 131071 : 524287);
    if (isSetPoolSizeMap())
      hashCode = hashCode * 8191 + poolSizeMap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MessagePayload other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPoolId()).compareTo(other.isSetPoolId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolId, other.poolId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReliability()).compareTo(other.isSetReliability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReliability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reliability, other.reliability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBloomFilterUpdates()).compareTo(other.isSetBloomFilterUpdates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloomFilterUpdates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterUpdates, other.bloomFilterUpdates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCoarseGrainedStats()).compareTo(other.isSetCoarseGrainedStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoarseGrainedStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coarseGrainedStats, other.coarseGrainedStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPoolSize()).compareTo(other.isSetPoolSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolSize, other.poolSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPoolSizeMap()).compareTo(other.isSetPoolSizeMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolSizeMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolSizeMap, other.poolSizeMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MessagePayload(");
    boolean first = true;

    sb.append("nodeId:");
    sb.append(this.nodeId);
    first = false;
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    if (isSetPoolId()) {
      if (!first) sb.append(", ");
      sb.append("poolId:");
      sb.append(this.poolId);
      first = false;
    }
    if (isSetReliability()) {
      if (!first) sb.append(", ");
      sb.append("reliability:");
      sb.append(this.reliability);
      first = false;
    }
    if (isSetBloomFilterUpdates()) {
      if (!first) sb.append(", ");
      sb.append("bloomFilterUpdates:");
      if (this.bloomFilterUpdates == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bloomFilterUpdates, sb);
      }
      first = false;
    }
    if (isSetCoarseGrainedStats()) {
      if (!first) sb.append(", ");
      sb.append("coarseGrainedStats:");
      if (this.coarseGrainedStats == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.coarseGrainedStats, sb);
      }
      first = false;
    }
    if (isSetPoolSize()) {
      if (!first) sb.append(", ");
      sb.append("poolSize:");
      sb.append(this.poolSize);
      first = false;
    }
    if (isSetPoolSizeMap()) {
      if (!first) sb.append(", ");
      sb.append("poolSizeMap:");
      if (this.poolSizeMap == null) {
        sb.append("null");
      } else {
        sb.append(this.poolSizeMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'nodeId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessagePayloadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessagePayloadStandardScheme getScheme() {
      return new MessagePayloadStandardScheme();
    }
  }

  private static class MessagePayloadStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessagePayload> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessagePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.nodeId = iprot.readI16();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POOL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.poolId = iprot.readI16();
              struct.setPoolIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RELIABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reliability = iprot.readDouble();
              struct.setReliabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BLOOM_FILTER_UPDATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bloomFilterUpdates = iprot.readBinary();
              struct.setBloomFilterUpdatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COARSE_GRAINED_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.coarseGrainedStats = new java.util.ArrayList<java.nio.ByteBuffer>(_list0.size);
                java.nio.ByteBuffer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBinary();
                  struct.coarseGrainedStats.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCoarseGrainedStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POOL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.poolSize = iprot.readI16();
              struct.setPoolSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POOL_SIZE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.poolSizeMap = new java.util.HashMap<java.lang.Short,java.lang.Short>(2*_map3.size);
                short _key4;
                short _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readI16();
                  _val5 = iprot.readI16();
                  struct.poolSizeMap.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setPoolSizeMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNodeId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessagePayload struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI16(struct.nodeId);
      oprot.writeFieldEnd();
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoolId()) {
        oprot.writeFieldBegin(POOL_ID_FIELD_DESC);
        oprot.writeI16(struct.poolId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReliability()) {
        oprot.writeFieldBegin(RELIABILITY_FIELD_DESC);
        oprot.writeDouble(struct.reliability);
        oprot.writeFieldEnd();
      }
      if (struct.bloomFilterUpdates != null) {
        if (struct.isSetBloomFilterUpdates()) {
          oprot.writeFieldBegin(BLOOM_FILTER_UPDATES_FIELD_DESC);
          oprot.writeBinary(struct.bloomFilterUpdates);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coarseGrainedStats != null) {
        if (struct.isSetCoarseGrainedStats()) {
          oprot.writeFieldBegin(COARSE_GRAINED_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.coarseGrainedStats.size()));
            for (java.nio.ByteBuffer _iter7 : struct.coarseGrainedStats)
            {
              oprot.writeBinary(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPoolSize()) {
        oprot.writeFieldBegin(POOL_SIZE_FIELD_DESC);
        oprot.writeI16(struct.poolSize);
        oprot.writeFieldEnd();
      }
      if (struct.poolSizeMap != null) {
        if (struct.isSetPoolSizeMap()) {
          oprot.writeFieldBegin(POOL_SIZE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, struct.poolSizeMap.size()));
            for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter8 : struct.poolSizeMap.entrySet())
            {
              oprot.writeI16(_iter8.getKey());
              oprot.writeI16(_iter8.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessagePayloadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessagePayloadTupleScheme getScheme() {
      return new MessagePayloadTupleScheme();
    }
  }

  private static class MessagePayloadTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessagePayload> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessagePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI16(struct.nodeId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIp()) {
        optionals.set(0);
      }
      if (struct.isSetPort()) {
        optionals.set(1);
      }
      if (struct.isSetPoolId()) {
        optionals.set(2);
      }
      if (struct.isSetReliability()) {
        optionals.set(3);
      }
      if (struct.isSetBloomFilterUpdates()) {
        optionals.set(4);
      }
      if (struct.isSetCoarseGrainedStats()) {
        optionals.set(5);
      }
      if (struct.isSetPoolSize()) {
        optionals.set(6);
      }
      if (struct.isSetPoolSizeMap()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetPoolId()) {
        oprot.writeI16(struct.poolId);
      }
      if (struct.isSetReliability()) {
        oprot.writeDouble(struct.reliability);
      }
      if (struct.isSetBloomFilterUpdates()) {
        oprot.writeBinary(struct.bloomFilterUpdates);
      }
      if (struct.isSetCoarseGrainedStats()) {
        {
          oprot.writeI32(struct.coarseGrainedStats.size());
          for (java.nio.ByteBuffer _iter9 : struct.coarseGrainedStats)
          {
            oprot.writeBinary(_iter9);
          }
        }
      }
      if (struct.isSetPoolSize()) {
        oprot.writeI16(struct.poolSize);
      }
      if (struct.isSetPoolSizeMap()) {
        {
          oprot.writeI32(struct.poolSizeMap.size());
          for (java.util.Map.Entry<java.lang.Short, java.lang.Short> _iter10 : struct.poolSizeMap.entrySet())
          {
            oprot.writeI16(_iter10.getKey());
            oprot.writeI16(_iter10.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessagePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeId = iprot.readI16();
      struct.setNodeIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(2)) {
        struct.poolId = iprot.readI16();
        struct.setPoolIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reliability = iprot.readDouble();
        struct.setReliabilityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bloomFilterUpdates = iprot.readBinary();
        struct.setBloomFilterUpdatesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.coarseGrainedStats = new java.util.ArrayList<java.nio.ByteBuffer>(_list11.size);
          java.nio.ByteBuffer _elem12;
          for (int _i13 = 0; _i13 < _list11.size; ++_i13)
          {
            _elem12 = iprot.readBinary();
            struct.coarseGrainedStats.add(_elem12);
          }
        }
        struct.setCoarseGrainedStatsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.poolSize = iprot.readI16();
        struct.setPoolSizeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.poolSizeMap = new java.util.HashMap<java.lang.Short,java.lang.Short>(2*_map14.size);
          short _key15;
          short _val16;
          for (int _i17 = 0; _i17 < _map14.size; ++_i17)
          {
            _key15 = iprot.readI16();
            _val16 = iprot.readI16();
            struct.poolSizeMap.put(_key15, _val16);
          }
        }
        struct.setPoolSizeMapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

