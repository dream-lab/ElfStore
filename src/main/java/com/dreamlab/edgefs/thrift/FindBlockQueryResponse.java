/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dreamlab.edgefs.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-29")
public class FindBlockQueryResponse implements org.apache.thrift.TBase<FindBlockQueryResponse, FindBlockQueryResponse._Fields>, java.io.Serializable, Cloneable, Comparable<FindBlockQueryResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FindBlockQueryResponse");

  private static final org.apache.thrift.protocol.TField FIND_BLOCK_QUERY_RESULT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("findBlockQueryResultMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorResponse", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FindBlockQueryResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FindBlockQueryResponseTupleSchemeFactory();

  public java.util.Map<java.lang.Long,FindBlockQueryValue> findBlockQueryResultMap; // required
  public byte status; // required
  public java.lang.String errorResponse; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIND_BLOCK_QUERY_RESULT_MAP((short)1, "findBlockQueryResultMap"),
    STATUS((short)2, "status"),
    ERROR_RESPONSE((short)3, "errorResponse");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIND_BLOCK_QUERY_RESULT_MAP
          return FIND_BLOCK_QUERY_RESULT_MAP;
        case 2: // STATUS
          return STATUS;
        case 3: // ERROR_RESPONSE
          return ERROR_RESPONSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ERROR_RESPONSE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIND_BLOCK_QUERY_RESULT_MAP, new org.apache.thrift.meta_data.FieldMetaData("findBlockQueryResultMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FindBlockQueryValue.class))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ERROR_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("errorResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FindBlockQueryResponse.class, metaDataMap);
  }

  public FindBlockQueryResponse() {
  }

  public FindBlockQueryResponse(
    java.util.Map<java.lang.Long,FindBlockQueryValue> findBlockQueryResultMap,
    byte status)
  {
    this();
    this.findBlockQueryResultMap = findBlockQueryResultMap;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FindBlockQueryResponse(FindBlockQueryResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFindBlockQueryResultMap()) {
      java.util.Map<java.lang.Long,FindBlockQueryValue> __this__findBlockQueryResultMap = new java.util.HashMap<java.lang.Long,FindBlockQueryValue>(other.findBlockQueryResultMap.size());
      for (java.util.Map.Entry<java.lang.Long, FindBlockQueryValue> other_element : other.findBlockQueryResultMap.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        FindBlockQueryValue other_element_value = other_element.getValue();

        java.lang.Long __this__findBlockQueryResultMap_copy_key = other_element_key;

        FindBlockQueryValue __this__findBlockQueryResultMap_copy_value = new FindBlockQueryValue(other_element_value);

        __this__findBlockQueryResultMap.put(__this__findBlockQueryResultMap_copy_key, __this__findBlockQueryResultMap_copy_value);
      }
      this.findBlockQueryResultMap = __this__findBlockQueryResultMap;
    }
    this.status = other.status;
    if (other.isSetErrorResponse()) {
      this.errorResponse = other.errorResponse;
    }
  }

  public FindBlockQueryResponse deepCopy() {
    return new FindBlockQueryResponse(this);
  }

  @Override
  public void clear() {
    this.findBlockQueryResultMap = null;
    setStatusIsSet(false);
    this.status = 0;
    this.errorResponse = null;
  }

  public int getFindBlockQueryResultMapSize() {
    return (this.findBlockQueryResultMap == null) ? 0 : this.findBlockQueryResultMap.size();
  }

  public void putToFindBlockQueryResultMap(long key, FindBlockQueryValue val) {
    if (this.findBlockQueryResultMap == null) {
      this.findBlockQueryResultMap = new java.util.HashMap<java.lang.Long,FindBlockQueryValue>();
    }
    this.findBlockQueryResultMap.put(key, val);
  }

  public java.util.Map<java.lang.Long,FindBlockQueryValue> getFindBlockQueryResultMap() {
    return this.findBlockQueryResultMap;
  }

  public FindBlockQueryResponse setFindBlockQueryResultMap(java.util.Map<java.lang.Long,FindBlockQueryValue> findBlockQueryResultMap) {
    this.findBlockQueryResultMap = findBlockQueryResultMap;
    return this;
  }

  public void unsetFindBlockQueryResultMap() {
    this.findBlockQueryResultMap = null;
  }

  /** Returns true if field findBlockQueryResultMap is set (has been assigned a value) and false otherwise */
  public boolean isSetFindBlockQueryResultMap() {
    return this.findBlockQueryResultMap != null;
  }

  public void setFindBlockQueryResultMapIsSet(boolean value) {
    if (!value) {
      this.findBlockQueryResultMap = null;
    }
  }

  public byte getStatus() {
    return this.status;
  }

  public FindBlockQueryResponse setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public java.lang.String getErrorResponse() {
    return this.errorResponse;
  }

  public FindBlockQueryResponse setErrorResponse(java.lang.String errorResponse) {
    this.errorResponse = errorResponse;
    return this;
  }

  public void unsetErrorResponse() {
    this.errorResponse = null;
  }

  /** Returns true if field errorResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorResponse() {
    return this.errorResponse != null;
  }

  public void setErrorResponseIsSet(boolean value) {
    if (!value) {
      this.errorResponse = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FIND_BLOCK_QUERY_RESULT_MAP:
      if (value == null) {
        unsetFindBlockQueryResultMap();
      } else {
        setFindBlockQueryResultMap((java.util.Map<java.lang.Long,FindBlockQueryValue>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Byte)value);
      }
      break;

    case ERROR_RESPONSE:
      if (value == null) {
        unsetErrorResponse();
      } else {
        setErrorResponse((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIND_BLOCK_QUERY_RESULT_MAP:
      return getFindBlockQueryResultMap();

    case STATUS:
      return getStatus();

    case ERROR_RESPONSE:
      return getErrorResponse();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIND_BLOCK_QUERY_RESULT_MAP:
      return isSetFindBlockQueryResultMap();
    case STATUS:
      return isSetStatus();
    case ERROR_RESPONSE:
      return isSetErrorResponse();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FindBlockQueryResponse)
      return this.equals((FindBlockQueryResponse)that);
    return false;
  }

  public boolean equals(FindBlockQueryResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_findBlockQueryResultMap = true && this.isSetFindBlockQueryResultMap();
    boolean that_present_findBlockQueryResultMap = true && that.isSetFindBlockQueryResultMap();
    if (this_present_findBlockQueryResultMap || that_present_findBlockQueryResultMap) {
      if (!(this_present_findBlockQueryResultMap && that_present_findBlockQueryResultMap))
        return false;
      if (!this.findBlockQueryResultMap.equals(that.findBlockQueryResultMap))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_errorResponse = true && this.isSetErrorResponse();
    boolean that_present_errorResponse = true && that.isSetErrorResponse();
    if (this_present_errorResponse || that_present_errorResponse) {
      if (!(this_present_errorResponse && that_present_errorResponse))
        return false;
      if (!this.errorResponse.equals(that.errorResponse))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFindBlockQueryResultMap()) ? 131071 : 524287);
    if (isSetFindBlockQueryResultMap())
      hashCode = hashCode * 8191 + findBlockQueryResultMap.hashCode();

    hashCode = hashCode * 8191 + (int) (status);

    hashCode = hashCode * 8191 + ((isSetErrorResponse()) ? 131071 : 524287);
    if (isSetErrorResponse())
      hashCode = hashCode * 8191 + errorResponse.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FindBlockQueryResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFindBlockQueryResultMap()).compareTo(other.isSetFindBlockQueryResultMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFindBlockQueryResultMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findBlockQueryResultMap, other.findBlockQueryResultMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorResponse()).compareTo(other.isSetErrorResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorResponse, other.errorResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FindBlockQueryResponse(");
    boolean first = true;

    sb.append("findBlockQueryResultMap:");
    if (this.findBlockQueryResultMap == null) {
      sb.append("null");
    } else {
      sb.append(this.findBlockQueryResultMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetErrorResponse()) {
      if (!first) sb.append(", ");
      sb.append("errorResponse:");
      if (this.errorResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.errorResponse);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (findBlockQueryResultMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'findBlockQueryResultMap' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FindBlockQueryResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FindBlockQueryResponseStandardScheme getScheme() {
      return new FindBlockQueryResponseStandardScheme();
    }
  }

  private static class FindBlockQueryResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<FindBlockQueryResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FindBlockQueryResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIND_BLOCK_QUERY_RESULT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map136 = iprot.readMapBegin();
                struct.findBlockQueryResultMap = new java.util.HashMap<java.lang.Long,FindBlockQueryValue>(2*_map136.size);
                long _key137;
                FindBlockQueryValue _val138;
                for (int _i139 = 0; _i139 < _map136.size; ++_i139)
                {
                  _key137 = iprot.readI64();
                  _val138 = new FindBlockQueryValue();
                  _val138.read(iprot);
                  struct.findBlockQueryResultMap.put(_key137, _val138);
                }
                iprot.readMapEnd();
              }
              struct.setFindBlockQueryResultMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorResponse = iprot.readString();
              struct.setErrorResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FindBlockQueryResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.findBlockQueryResultMap != null) {
        oprot.writeFieldBegin(FIND_BLOCK_QUERY_RESULT_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.findBlockQueryResultMap.size()));
          for (java.util.Map.Entry<java.lang.Long, FindBlockQueryValue> _iter140 : struct.findBlockQueryResultMap.entrySet())
          {
            oprot.writeI64(_iter140.getKey());
            _iter140.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeByte(struct.status);
      oprot.writeFieldEnd();
      if (struct.errorResponse != null) {
        if (struct.isSetErrorResponse()) {
          oprot.writeFieldBegin(ERROR_RESPONSE_FIELD_DESC);
          oprot.writeString(struct.errorResponse);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FindBlockQueryResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FindBlockQueryResponseTupleScheme getScheme() {
      return new FindBlockQueryResponseTupleScheme();
    }
  }

  private static class FindBlockQueryResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<FindBlockQueryResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FindBlockQueryResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.findBlockQueryResultMap.size());
        for (java.util.Map.Entry<java.lang.Long, FindBlockQueryValue> _iter141 : struct.findBlockQueryResultMap.entrySet())
        {
          oprot.writeI64(_iter141.getKey());
          _iter141.getValue().write(oprot);
        }
      }
      oprot.writeByte(struct.status);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetErrorResponse()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetErrorResponse()) {
        oprot.writeString(struct.errorResponse);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FindBlockQueryResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map142 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.findBlockQueryResultMap = new java.util.HashMap<java.lang.Long,FindBlockQueryValue>(2*_map142.size);
        long _key143;
        FindBlockQueryValue _val144;
        for (int _i145 = 0; _i145 < _map142.size; ++_i145)
        {
          _key143 = iprot.readI64();
          _val144 = new FindBlockQueryValue();
          _val144.read(iprot);
          struct.findBlockQueryResultMap.put(_key143, _val144);
        }
      }
      struct.setFindBlockQueryResultMapIsSet(true);
      struct.status = iprot.readByte();
      struct.setStatusIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.errorResponse = iprot.readString();
        struct.setErrorResponseIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

