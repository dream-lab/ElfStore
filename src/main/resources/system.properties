#Edge related properties
#heartbeat interval in seconds
edge.heartbeat.interval=30
#heartbeats between disk util updates
edge.disk.send.heartbeats=2
#heartbeats between local stats calculation
local.stats.calc.heartbeats=3
#max number of missing heartbeats
edge.miss.heartbeats.max=4
#absolute disk space(MB) below which edge device is not picked
edge.disk.watermark=200
#Buddy related properties
#heartbeat interval in seconds
buddy.heartbeat.interval=10
#send intervals when there is a change
buddy.stats.send.heartbeats=5
buddy.bloom.send.heartbeats=5
#forced send intervals even when there is no change
buddy.stats.force.send.heartbeats=18
buddy.bloom.force.send.heartbeats=15
#Subscriber related properties
subs.heartbeat.interval=10
#send intervals when there is a change
subs.stats.send.heartbeats=5
subs.bloom.send.heartbeats=5
#forced send intervals even when there is no change
subs.stats.force.send.heartbeats=12
subs.bloom.force.send.heartbeats=9
#global calculation interval
#global heartbeats are in terms of buddy or subscriber heartbeats
global.calc.heartbeats=10
global.bootstrap.heartbeats=15
#stream metadata maybe cached on a Fog node which is not the owner
#of a stream thus it might happen that during stream metadata updates
#we need to invalidate the cache and fetch the original data, for this
#we have a system-wide timeout for cache invalidation in seconds
stream.metadata.cache.invalidation.timeout=300
#lease time for a stream
stream.soft.lease.time=100
stream.hard.lease.time=200
#putNext facilities provide the ability to maintain a session
#between a client and a Fog and this ability can be used to 
#do replica caching at the client side, so that for a sequence
#of writes, we can do replica caching. But we have to be conservative
#in writing to the same set of Fog devices as our whole algorithm
#is designed to pick the Fog devices based on storage and reliability
#and picking the same device again and again is in direct conflict
#of the design of the algorithm
#a 0 here means no caching
replica.caching.enable=0
#in case replica caching is enabled, we pick a conservative estimate
#equal to about one half of the time between bloom filter updates between
#buddies which is about 40 seconds
replica.caching.time=40