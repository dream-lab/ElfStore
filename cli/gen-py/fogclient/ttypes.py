#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class MessageType(object):
    BUDDY_JOIN = 0
    BUDDY_HEARTBEAT = 1
    NEIGHBOUR_HEARTBEAT = 2

    _VALUES_TO_NAMES = {
        0: "BUDDY_JOIN",
        1: "BUDDY_HEARTBEAT",
        2: "NEIGHBOUR_HEARTBEAT",
    }

    _NAMES_TO_VALUES = {
        "BUDDY_JOIN": 0,
        "BUDDY_HEARTBEAT": 1,
        "NEIGHBOUR_HEARTBEAT": 2,
    }


class WritePreference(object):
    """
    The metadata of a micro-batch which is sent before a write to Fog *
    """
    HHL = 0
    HLH = 1
    HHH = 2
    HLL = 3
    LHL = 4
    LLH = 5
    LHH = 6
    LLL = 7

    _VALUES_TO_NAMES = {
        0: "HHL",
        1: "HLH",
        2: "HHH",
        3: "HLL",
        4: "LHL",
        5: "LLH",
        6: "LHH",
        7: "LLL",
    }

    _NAMES_TO_VALUES = {
        "HHL": 0,
        "HLH": 1,
        "HHH": 2,
        "HLL": 3,
        "LHL": 4,
        "LLH": 5,
        "LHH": 6,
        "LLL": 7,
    }


class NodeInfoPrimary(object):
    """
    Attributes:
     - NodeIP
     - port
    """


    def __init__(self, NodeIP=None, port=None,):
        self.NodeIP = NodeIP
        self.port = port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.NodeIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NodeInfoPrimary')
        if self.NodeIP is not None:
            oprot.writeFieldBegin('NodeIP', TType.STRING, 1)
            oprot.writeString(self.NodeIP.encode('utf-8') if sys.version_info[0] == 2 else self.NodeIP)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.NodeIP is None:
            raise TProtocolException(message='Required field NodeIP is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NodeInfoData(object):
    """
    Attributes:
     - nodeId
     - NodeIP
     - port
    """


    def __init__(self, nodeId=None, NodeIP=None, port=None,):
        self.nodeId = nodeId
        self.NodeIP = NodeIP
        self.port = port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.nodeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.NodeIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NodeInfoData')
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.I16, 1)
            oprot.writeI16(self.nodeId)
            oprot.writeFieldEnd()
        if self.NodeIP is not None:
            oprot.writeFieldBegin('NodeIP', TType.STRING, 2)
            oprot.writeString(self.NodeIP.encode('utf-8') if sys.version_info[0] == 2 else self.NodeIP)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeId is None:
            raise TProtocolException(message='Required field nodeId is unset!')
        if self.NodeIP is None:
            raise TProtocolException(message='Required field NodeIP is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FogInfoData(object):
    """
    Attributes:
     - nodeInstance
     - reliability
    """


    def __init__(self, nodeInstance=None, reliability=None,):
        self.nodeInstance = nodeInstance
        self.reliability = reliability

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.nodeInstance = NodeInfoData()
                    self.nodeInstance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.reliability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FogInfoData')
        if self.nodeInstance is not None:
            oprot.writeFieldBegin('nodeInstance', TType.STRUCT, 1)
            self.nodeInstance.write(oprot)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.DOUBLE, 2)
            oprot.writeDouble(self.reliability)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeInstance is None:
            raise TProtocolException(message='Required field nodeInstance is unset!')
        if self.reliability is None:
            raise TProtocolException(message='Required field reliability is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EdgeInfoData(object):
    """
    Attributes:
     - nodeId
     - nodeIp
     - port
     - reliability
     - storage
    """


    def __init__(self, nodeId=None, nodeIp=None, port=None, reliability=None, storage=None,):
        self.nodeId = nodeId
        self.nodeIp = nodeIp
        self.port = port
        self.reliability = reliability
        self.storage = storage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.nodeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.reliability = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.storage = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EdgeInfoData')
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.I16, 1)
            oprot.writeI16(self.nodeId)
            oprot.writeFieldEnd()
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 2)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.BYTE, 4)
            oprot.writeByte(self.reliability)
            oprot.writeFieldEnd()
        if self.storage is not None:
            oprot.writeFieldBegin('storage', TType.BYTE, 5)
            oprot.writeByte(self.storage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeId is None:
            raise TProtocolException(message='Required field nodeId is unset!')
        if self.nodeIp is None:
            raise TProtocolException(message='Required field nodeIp is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        if self.reliability is None:
            raise TProtocolException(message='Required field reliability is unset!')
        if self.storage is None:
            raise TProtocolException(message='Required field storage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeighborInfoData(object):
    """
    Attributes:
     - nodeInstance
     - buddyPoolId
     - pool_reliability
     - pool_size
    """


    def __init__(self, nodeInstance=None, buddyPoolId=None, pool_reliability=None, pool_size=None,):
        self.nodeInstance = nodeInstance
        self.buddyPoolId = buddyPoolId
        self.pool_reliability = pool_reliability
        self.pool_size = pool_size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.nodeInstance = NodeInfoData()
                    self.nodeInstance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.buddyPoolId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.pool_reliability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.pool_size = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeighborInfoData')
        if self.nodeInstance is not None:
            oprot.writeFieldBegin('nodeInstance', TType.STRUCT, 1)
            self.nodeInstance.write(oprot)
            oprot.writeFieldEnd()
        if self.buddyPoolId is not None:
            oprot.writeFieldBegin('buddyPoolId', TType.I16, 2)
            oprot.writeI16(self.buddyPoolId)
            oprot.writeFieldEnd()
        if self.pool_reliability is not None:
            oprot.writeFieldBegin('pool_reliability', TType.DOUBLE, 3)
            oprot.writeDouble(self.pool_reliability)
            oprot.writeFieldEnd()
        if self.pool_size is not None:
            oprot.writeFieldBegin('pool_size', TType.I16, 4)
            oprot.writeI16(self.pool_size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeInstance is None:
            raise TProtocolException(message='Required field nodeInstance is unset!')
        if self.buddyPoolId is None:
            raise TProtocolException(message='Required field buddyPoolId is unset!')
        if self.pool_reliability is None:
            raise TProtocolException(message='Required field pool_reliability is unset!')
        if self.pool_size is None:
            raise TProtocolException(message='Required field pool_size is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoPhasePreCommitRequest(object):
    """
    Attributes:
     - requestType
     - joiningNode
     - coordinatorId
    """


    def __init__(self, requestType=None, joiningNode=None, coordinatorId=None,):
        self.requestType = requestType
        self.joiningNode = joiningNode
        self.coordinatorId = coordinatorId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.joiningNode = NodeInfoData()
                    self.joiningNode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.coordinatorId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoPhasePreCommitRequest')
        if self.requestType is not None:
            oprot.writeFieldBegin('requestType', TType.STRING, 1)
            oprot.writeString(self.requestType.encode('utf-8') if sys.version_info[0] == 2 else self.requestType)
            oprot.writeFieldEnd()
        if self.joiningNode is not None:
            oprot.writeFieldBegin('joiningNode', TType.STRUCT, 2)
            self.joiningNode.write(oprot)
            oprot.writeFieldEnd()
        if self.coordinatorId is not None:
            oprot.writeFieldBegin('coordinatorId', TType.I16, 3)
            oprot.writeI16(self.coordinatorId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.requestType is None:
            raise TProtocolException(message='Required field requestType is unset!')
        if self.joiningNode is None:
            raise TProtocolException(message='Required field joiningNode is unset!')
        if self.coordinatorId is None:
            raise TProtocolException(message='Required field coordinatorId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoPhasePreCommitResponse(object):
    """
    Attributes:
     - responseType
    """


    def __init__(self, responseType=None,):
        self.responseType = responseType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.responseType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoPhasePreCommitResponse')
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.STRING, 1)
            oprot.writeString(self.responseType.encode('utf-8') if sys.version_info[0] == 2 else self.responseType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.responseType is None:
            raise TProtocolException(message='Required field responseType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoPhaseCommitRequest(object):
    """
    Attributes:
     - requestType
     - nodeId
     - coordinatorId
    """


    def __init__(self, requestType=None, nodeId=None, coordinatorId=None,):
        self.requestType = requestType
        self.nodeId = nodeId
        self.coordinatorId = coordinatorId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.nodeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.coordinatorId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoPhaseCommitRequest')
        if self.requestType is not None:
            oprot.writeFieldBegin('requestType', TType.STRING, 1)
            oprot.writeString(self.requestType.encode('utf-8') if sys.version_info[0] == 2 else self.requestType)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.I16, 2)
            oprot.writeI16(self.nodeId)
            oprot.writeFieldEnd()
        if self.coordinatorId is not None:
            oprot.writeFieldBegin('coordinatorId', TType.I16, 3)
            oprot.writeI16(self.coordinatorId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.requestType is None:
            raise TProtocolException(message='Required field requestType is unset!')
        if self.nodeId is None:
            raise TProtocolException(message='Required field nodeId is unset!')
        if self.coordinatorId is None:
            raise TProtocolException(message='Required field coordinatorId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoPhaseCommitResponse(object):
    """
    Attributes:
     - responseType
     - buddyPoolId
    """


    def __init__(self, responseType=None, buddyPoolId=None,):
        self.responseType = responseType
        self.buddyPoolId = buddyPoolId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.responseType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.buddyPoolId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoPhaseCommitResponse')
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.STRING, 1)
            oprot.writeString(self.responseType.encode('utf-8') if sys.version_info[0] == 2 else self.responseType)
            oprot.writeFieldEnd()
        if self.buddyPoolId is not None:
            oprot.writeFieldBegin('buddyPoolId', TType.I16, 2)
            oprot.writeI16(self.buddyPoolId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.responseType is None:
            raise TProtocolException(message='Required field responseType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessagePayload(object):
    """
    Attributes:
     - nodeId
     - ip
     - port
     - poolId
     - reliability
     - bloomFilterUpdates
     - coarseGrainedStats
     - poolSize
     - poolSizeMap
    """


    def __init__(self, nodeId=None, ip=None, port=None, poolId=None, reliability=None, bloomFilterUpdates=None, coarseGrainedStats=None, poolSize=None, poolSizeMap=None,):
        self.nodeId = nodeId
        self.ip = ip
        self.port = port
        self.poolId = poolId
        self.reliability = reliability
        self.bloomFilterUpdates = bloomFilterUpdates
        self.coarseGrainedStats = coarseGrainedStats
        self.poolSize = poolSize
        self.poolSizeMap = poolSizeMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.nodeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.poolId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.reliability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.bloomFilterUpdates = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.coarseGrainedStats = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readBinary()
                        self.coarseGrainedStats.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.poolSize = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.poolSizeMap = {}
                    (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                    for _i10 in range(_size6):
                        _key11 = iprot.readI16()
                        _val12 = iprot.readI16()
                        self.poolSizeMap[_key11] = _val12
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MessagePayload')
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.I16, 1)
            oprot.writeI16(self.nodeId)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.I16, 4)
            oprot.writeI16(self.poolId)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.DOUBLE, 5)
            oprot.writeDouble(self.reliability)
            oprot.writeFieldEnd()
        if self.bloomFilterUpdates is not None:
            oprot.writeFieldBegin('bloomFilterUpdates', TType.STRING, 6)
            oprot.writeBinary(self.bloomFilterUpdates)
            oprot.writeFieldEnd()
        if self.coarseGrainedStats is not None:
            oprot.writeFieldBegin('coarseGrainedStats', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.coarseGrainedStats))
            for iter13 in self.coarseGrainedStats:
                oprot.writeBinary(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.poolSize is not None:
            oprot.writeFieldBegin('poolSize', TType.I16, 8)
            oprot.writeI16(self.poolSize)
            oprot.writeFieldEnd()
        if self.poolSizeMap is not None:
            oprot.writeFieldBegin('poolSizeMap', TType.MAP, 9)
            oprot.writeMapBegin(TType.I16, TType.I16, len(self.poolSizeMap))
            for kiter14, viter15 in self.poolSizeMap.items():
                oprot.writeI16(kiter14)
                oprot.writeI16(viter15)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeId is None:
            raise TProtocolException(message='Required field nodeId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BuddyPayload(object):
    """
    Attributes:
     - payload
     - mbIdToStreamIdMap
    """


    def __init__(self, payload=None, mbIdToStreamIdMap=None,):
        self.payload = payload
        self.mbIdToStreamIdMap = mbIdToStreamIdMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.payload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.mbIdToStreamIdMap = {}
                    (_ktype17, _vtype18, _size16) = iprot.readMapBegin()
                    for _i20 in range(_size16):
                        _key21 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val22 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.mbIdToStreamIdMap[_key21] = _val22
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BuddyPayload')
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 1)
            oprot.writeBinary(self.payload)
            oprot.writeFieldEnd()
        if self.mbIdToStreamIdMap is not None:
            oprot.writeFieldBegin('mbIdToStreamIdMap', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.mbIdToStreamIdMap))
            for kiter23, viter24 in self.mbIdToStreamIdMap.items():
                oprot.writeString(kiter23.encode('utf-8') if sys.version_info[0] == 2 else kiter23)
                oprot.writeString(viter24.encode('utf-8') if sys.version_info[0] == 2 else viter24)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.payload is None:
            raise TProtocolException(message='Required field payload is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeighborPayload(object):
    """
    Attributes:
     - payload
     - mbIdToStreamIdMap
    """


    def __init__(self, payload=None, mbIdToStreamIdMap=None,):
        self.payload = payload
        self.mbIdToStreamIdMap = mbIdToStreamIdMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.payload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.mbIdToStreamIdMap = {}
                    (_ktype26, _vtype27, _size25) = iprot.readMapBegin()
                    for _i29 in range(_size25):
                        _key30 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val31 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.mbIdToStreamIdMap[_key30] = _val31
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeighborPayload')
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 1)
            oprot.writeBinary(self.payload)
            oprot.writeFieldEnd()
        if self.mbIdToStreamIdMap is not None:
            oprot.writeFieldBegin('mbIdToStreamIdMap', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.mbIdToStreamIdMap))
            for kiter32, viter33 in self.mbIdToStreamIdMap.items():
                oprot.writeString(kiter32.encode('utf-8') if sys.version_info[0] == 2 else kiter32)
                oprot.writeString(viter33.encode('utf-8') if sys.version_info[0] == 2 else viter33)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.payload is None:
            raise TProtocolException(message='Required field payload is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EdgePayload(object):
    """
    Attributes:
     - edgeId
     - encodedStorage
     - reliability
    """


    def __init__(self, edgeId=None, encodedStorage=None, reliability=None,):
        self.edgeId = edgeId
        self.encodedStorage = encodedStorage
        self.reliability = reliability

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.edgeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.encodedStorage = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.reliability = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EdgePayload')
        if self.edgeId is not None:
            oprot.writeFieldBegin('edgeId', TType.I16, 1)
            oprot.writeI16(self.edgeId)
            oprot.writeFieldEnd()
        if self.encodedStorage is not None:
            oprot.writeFieldBegin('encodedStorage', TType.BYTE, 2)
            oprot.writeByte(self.encodedStorage)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.BYTE, 3)
            oprot.writeByte(self.reliability)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.edgeId is None:
            raise TProtocolException(message='Required field edgeId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeighborCount(object):
    """
    Attributes:
     - isLockAcquired
     - neighborCountPerPool
     - nodeInfoData
    """


    def __init__(self, isLockAcquired=None, neighborCountPerPool=None, nodeInfoData=None,):
        self.isLockAcquired = isLockAcquired
        self.neighborCountPerPool = neighborCountPerPool
        self.nodeInfoData = nodeInfoData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isLockAcquired = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.neighborCountPerPool = {}
                    (_ktype35, _vtype36, _size34) = iprot.readMapBegin()
                    for _i38 in range(_size34):
                        _key39 = iprot.readI16()
                        _val40 = iprot.readI16()
                        self.neighborCountPerPool[_key39] = _val40
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.nodeInfoData = NodeInfoData()
                    self.nodeInfoData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeighborCount')
        if self.isLockAcquired is not None:
            oprot.writeFieldBegin('isLockAcquired', TType.BOOL, 1)
            oprot.writeBool(self.isLockAcquired)
            oprot.writeFieldEnd()
        if self.neighborCountPerPool is not None:
            oprot.writeFieldBegin('neighborCountPerPool', TType.MAP, 2)
            oprot.writeMapBegin(TType.I16, TType.I16, len(self.neighborCountPerPool))
            for kiter41, viter42 in self.neighborCountPerPool.items():
                oprot.writeI16(kiter41)
                oprot.writeI16(viter42)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.nodeInfoData is not None:
            oprot.writeFieldBegin('nodeInfoData', TType.STRUCT, 3)
            self.nodeInfoData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.isLockAcquired is None:
            raise TProtocolException(message='Required field isLockAcquired is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WritableFogData(object):
    """
    Attributes:
     - node
     - preference
     - reliability
     - edgeInfo
    """


    def __init__(self, node=None, preference=None, reliability=None, edgeInfo=None,):
        self.node = node
        self.preference = preference
        self.reliability = reliability
        self.edgeInfo = edgeInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.node = NodeInfoData()
                    self.node.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.preference = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.reliability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.edgeInfo = EdgeInfoData()
                    self.edgeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WritableFogData')
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.STRUCT, 1)
            self.node.write(oprot)
            oprot.writeFieldEnd()
        if self.preference is not None:
            oprot.writeFieldBegin('preference', TType.I32, 2)
            oprot.writeI32(self.preference)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.DOUBLE, 3)
            oprot.writeDouble(self.reliability)
            oprot.writeFieldEnd()
        if self.edgeInfo is not None:
            oprot.writeFieldBegin('edgeInfo', TType.STRUCT, 4)
            self.edgeInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node is None:
            raise TProtocolException(message='Required field node is unset!')
        if self.preference is None:
            raise TProtocolException(message='Required field preference is unset!')
        if self.reliability is None:
            raise TProtocolException(message='Required field reliability is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class I16TypeStreamMetadata(object):
    """
    Attributes:
     - value
     - updatable
    """


    def __init__(self, value=None, updatable=None,):
        self.value = value
        self.updatable = updatable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.value = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.updatable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('I16TypeStreamMetadata')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I16, 1)
            oprot.writeI16(self.value)
            oprot.writeFieldEnd()
        if self.updatable is not None:
            oprot.writeFieldBegin('updatable', TType.BOOL, 2)
            oprot.writeBool(self.updatable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        if self.updatable is None:
            raise TProtocolException(message='Required field updatable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class I32TypeStreamMetadata(object):
    """
    Attributes:
     - value
     - updatable
    """


    def __init__(self, value=None, updatable=None,):
        self.value = value
        self.updatable = updatable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.updatable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('I32TypeStreamMetadata')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I32, 1)
            oprot.writeI32(self.value)
            oprot.writeFieldEnd()
        if self.updatable is not None:
            oprot.writeFieldBegin('updatable', TType.BOOL, 2)
            oprot.writeBool(self.updatable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        if self.updatable is None:
            raise TProtocolException(message='Required field updatable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class I64TypeStreamMetadata(object):
    """
    Attributes:
     - value
     - updatable
    """


    def __init__(self, value=None, updatable=None,):
        self.value = value
        self.updatable = updatable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.updatable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('I64TypeStreamMetadata')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I64, 1)
            oprot.writeI64(self.value)
            oprot.writeFieldEnd()
        if self.updatable is not None:
            oprot.writeFieldBegin('updatable', TType.BOOL, 2)
            oprot.writeBool(self.updatable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        if self.updatable is None:
            raise TProtocolException(message='Required field updatable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoubleTypeStreamMetadata(object):
    """
    Attributes:
     - value
     - updatable
    """


    def __init__(self, value=None, updatable=None,):
        self.value = value
        self.updatable = updatable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.updatable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoubleTypeStreamMetadata')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 1)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        if self.updatable is not None:
            oprot.writeFieldBegin('updatable', TType.BOOL, 2)
            oprot.writeBool(self.updatable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        if self.updatable is None:
            raise TProtocolException(message='Required field updatable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ByteTypeStreamMetadata(object):
    """
    Attributes:
     - value
     - updatable
    """


    def __init__(self, value=None, updatable=None,):
        self.value = value
        self.updatable = updatable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.value = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.updatable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ByteTypeStreamMetadata')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BYTE, 1)
            oprot.writeByte(self.value)
            oprot.writeFieldEnd()
        if self.updatable is not None:
            oprot.writeFieldBegin('updatable', TType.BOOL, 2)
            oprot.writeBool(self.updatable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        if self.updatable is None:
            raise TProtocolException(message='Required field updatable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StringTypeStreamMetadata(object):
    """
    Attributes:
     - value
     - updatable
    """


    def __init__(self, value=None, updatable=None,):
        self.value = value
        self.updatable = updatable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.updatable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StringTypeStreamMetadata')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 1)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.updatable is not None:
            oprot.writeFieldBegin('updatable', TType.BOOL, 2)
            oprot.writeBool(self.updatable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        if self.updatable is None:
            raise TProtocolException(message='Required field updatable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NodeInfoPrimaryTypeStreamMetadata(object):
    """
    Attributes:
     - value
     - updatable
    """


    def __init__(self, value=None, updatable=None,):
        self.value = value
        self.updatable = updatable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.value = NodeInfoPrimary()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.updatable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NodeInfoPrimaryTypeStreamMetadata')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 1)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        if self.updatable is not None:
            oprot.writeFieldBegin('updatable', TType.BOOL, 2)
            oprot.writeBool(self.updatable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        if self.updatable is None:
            raise TProtocolException(message='Required field updatable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DynamicTypeStreamMetadata(object):
    """
    Attributes:
     - value
     - clazz
     - updatable
    """


    def __init__(self, value=None, clazz=None, updatable=None,):
        self.value = value
        self.clazz = clazz
        self.updatable = updatable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clazz = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.updatable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DynamicTypeStreamMetadata')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 1)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.clazz is not None:
            oprot.writeFieldBegin('clazz', TType.STRING, 2)
            oprot.writeString(self.clazz.encode('utf-8') if sys.version_info[0] == 2 else self.clazz)
            oprot.writeFieldEnd()
        if self.updatable is not None:
            oprot.writeFieldBegin('updatable', TType.BOOL, 3)
            oprot.writeBool(self.updatable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        if self.clazz is None:
            raise TProtocolException(message='Required field clazz is unset!')
        if self.updatable is None:
            raise TProtocolException(message='Required field updatable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StreamMetadata(object):
    """
    Attributes:
     - streamId
     - startTime
     - endTime
     - reliability
     - minReplica
     - maxReplica
     - version
     - owner
     - otherProperties
    """


    def __init__(self, streamId=None, startTime=None, endTime=None, reliability=None, minReplica=None, maxReplica=None, version=None, owner=None, otherProperties=None,):
        self.streamId = streamId
        self.startTime = startTime
        self.endTime = endTime
        self.reliability = reliability
        self.minReplica = minReplica
        self.maxReplica = maxReplica
        self.version = version
        self.owner = owner
        self.otherProperties = otherProperties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.streamId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.startTime = I64TypeStreamMetadata()
                    self.startTime.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.endTime = I64TypeStreamMetadata()
                    self.endTime.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.reliability = DoubleTypeStreamMetadata()
                    self.reliability.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.minReplica = ByteTypeStreamMetadata()
                    self.minReplica.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.maxReplica = ByteTypeStreamMetadata()
                    self.maxReplica.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.version = I32TypeStreamMetadata()
                    self.version.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.owner = NodeInfoPrimaryTypeStreamMetadata()
                    self.owner.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.otherProperties = {}
                    (_ktype44, _vtype45, _size43) = iprot.readMapBegin()
                    for _i47 in range(_size43):
                        _key48 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val49 = DynamicTypeStreamMetadata()
                        _val49.read(iprot)
                        self.otherProperties[_key48] = _val49
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamMetadata')
        if self.streamId is not None:
            oprot.writeFieldBegin('streamId', TType.STRING, 1)
            oprot.writeString(self.streamId.encode('utf-8') if sys.version_info[0] == 2 else self.streamId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.STRUCT, 2)
            self.startTime.write(oprot)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.STRUCT, 3)
            self.endTime.write(oprot)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.STRUCT, 4)
            self.reliability.write(oprot)
            oprot.writeFieldEnd()
        if self.minReplica is not None:
            oprot.writeFieldBegin('minReplica', TType.STRUCT, 5)
            self.minReplica.write(oprot)
            oprot.writeFieldEnd()
        if self.maxReplica is not None:
            oprot.writeFieldBegin('maxReplica', TType.STRUCT, 6)
            self.maxReplica.write(oprot)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRUCT, 7)
            self.version.write(oprot)
            oprot.writeFieldEnd()
        if self.owner is not None:
            oprot.writeFieldBegin('owner', TType.STRUCT, 8)
            self.owner.write(oprot)
            oprot.writeFieldEnd()
        if self.otherProperties is not None:
            oprot.writeFieldBegin('otherProperties', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.otherProperties))
            for kiter50, viter51 in self.otherProperties.items():
                oprot.writeString(kiter50.encode('utf-8') if sys.version_info[0] == 2 else kiter50)
                viter51.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.streamId is None:
            raise TProtocolException(message='Required field streamId is unset!')
        if self.startTime is None:
            raise TProtocolException(message='Required field startTime is unset!')
        if self.reliability is None:
            raise TProtocolException(message='Required field reliability is unset!')
        if self.minReplica is None:
            raise TProtocolException(message='Required field minReplica is unset!')
        if self.maxReplica is None:
            raise TProtocolException(message='Required field maxReplica is unset!')
        if self.version is None:
            raise TProtocolException(message='Required field version is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SQueryRequest(object):
    """
    Attributes:
     - startTime
     - reliability
     - minReplica
     - maxReplica
     - version
     - owner
    """


    def __init__(self, startTime=None, reliability=None, minReplica=None, maxReplica=None, version=None, owner=None,):
        self.startTime = startTime
        self.reliability = reliability
        self.minReplica = minReplica
        self.maxReplica = maxReplica
        self.version = version
        self.owner = owner

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.startTime = I64TypeStreamMetadata()
                    self.startTime.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.reliability = DoubleTypeStreamMetadata()
                    self.reliability.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.minReplica = ByteTypeStreamMetadata()
                    self.minReplica.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.maxReplica = ByteTypeStreamMetadata()
                    self.maxReplica.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.version = I32TypeStreamMetadata()
                    self.version.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.owner = NodeInfoPrimaryTypeStreamMetadata()
                    self.owner.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SQueryRequest')
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.STRUCT, 1)
            self.startTime.write(oprot)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.STRUCT, 2)
            self.reliability.write(oprot)
            oprot.writeFieldEnd()
        if self.minReplica is not None:
            oprot.writeFieldBegin('minReplica', TType.STRUCT, 3)
            self.minReplica.write(oprot)
            oprot.writeFieldEnd()
        if self.maxReplica is not None:
            oprot.writeFieldBegin('maxReplica', TType.STRUCT, 4)
            self.maxReplica.write(oprot)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRUCT, 5)
            self.version.write(oprot)
            oprot.writeFieldEnd()
        if self.owner is not None:
            oprot.writeFieldBegin('owner', TType.STRUCT, 6)
            self.owner.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SQueryResponse(object):
    """
    Attributes:
     - status
     - streamList
    """


    def __init__(self, status=None, streamList=None,):
        self.status = status
        self.streamList = streamList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.streamList = []
                    (_etype55, _size52) = iprot.readListBegin()
                    for _i56 in range(_size52):
                        _elem57 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.streamList.append(_elem57)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SQueryResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.streamList is not None:
            oprot.writeFieldBegin('streamList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.streamList))
            for iter58 in self.streamList:
                oprot.writeString(iter58.encode('utf-8') if sys.version_info[0] == 2 else iter58)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.streamList is None:
            raise TProtocolException(message='Required field streamList is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StreamMetadataInfo(object):
    """
    Attributes:
     - streamMetadata
     - cached
     - cacheTime
    """


    def __init__(self, streamMetadata=None, cached=None, cacheTime=None,):
        self.streamMetadata = streamMetadata
        self.cached = cached
        self.cacheTime = cacheTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.streamMetadata = StreamMetadata()
                    self.streamMetadata.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.cached = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cacheTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamMetadataInfo')
        if self.streamMetadata is not None:
            oprot.writeFieldBegin('streamMetadata', TType.STRUCT, 1)
            self.streamMetadata.write(oprot)
            oprot.writeFieldEnd()
        if self.cached is not None:
            oprot.writeFieldBegin('cached', TType.BOOL, 2)
            oprot.writeBool(self.cached)
            oprot.writeFieldEnd()
        if self.cacheTime is not None:
            oprot.writeFieldBegin('cacheTime', TType.I64, 3)
            oprot.writeI64(self.cacheTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.streamMetadata is None:
            raise TProtocolException(message='Required field streamMetadata is unset!')
        if self.cached is None:
            raise TProtocolException(message='Required field cached is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Metadata(object):
    """
    Attributes:
     - clientId
     - sessionSecret
     - streamId
     - mbId
     - timestamp
     - checksum
     - properties
    """


    def __init__(self, clientId=None, sessionSecret=None, streamId=None, mbId=None, timestamp=None, checksum=None, properties=None,):
        self.clientId = clientId
        self.sessionSecret = sessionSecret
        self.streamId = streamId
        self.mbId = mbId
        self.timestamp = timestamp
        self.checksum = checksum
        self.properties = properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sessionSecret = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.streamId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.mbId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.checksum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.properties = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Metadata')
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.STRING, 1)
            oprot.writeString(self.clientId.encode('utf-8') if sys.version_info[0] == 2 else self.clientId)
            oprot.writeFieldEnd()
        if self.sessionSecret is not None:
            oprot.writeFieldBegin('sessionSecret', TType.STRING, 2)
            oprot.writeString(self.sessionSecret.encode('utf-8') if sys.version_info[0] == 2 else self.sessionSecret)
            oprot.writeFieldEnd()
        if self.streamId is not None:
            oprot.writeFieldBegin('streamId', TType.STRING, 3)
            oprot.writeString(self.streamId.encode('utf-8') if sys.version_info[0] == 2 else self.streamId)
            oprot.writeFieldEnd()
        if self.mbId is not None:
            oprot.writeFieldBegin('mbId', TType.I64, 4)
            oprot.writeI64(self.mbId)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 5)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.STRING, 6)
            oprot.writeString(self.checksum.encode('utf-8') if sys.version_info[0] == 2 else self.checksum)
            oprot.writeFieldEnd()
        if self.properties is not None:
            oprot.writeFieldBegin('properties', TType.STRING, 7)
            oprot.writeString(self.properties.encode('utf-8') if sys.version_info[0] == 2 else self.properties)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.clientId is None:
            raise TProtocolException(message='Required field clientId is unset!')
        if self.sessionSecret is None:
            raise TProtocolException(message='Required field sessionSecret is unset!')
        if self.streamId is None:
            raise TProtocolException(message='Required field streamId is unset!')
        if self.mbId is None:
            raise TProtocolException(message='Required field mbId is unset!')
        if self.timestamp is None:
            raise TProtocolException(message='Required field timestamp is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReadResponse(object):
    """
    Attributes:
     - status
     - data
     - edgeInfo
     - metadata
    """


    def __init__(self, status=None, data=None, edgeInfo=None, metadata=None,):
        self.status = status
        self.data = data
        self.edgeInfo = edgeInfo
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.edgeInfo = EdgeInfoData()
                    self.edgeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.metadata = Metadata()
                    self.metadata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReadResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 2)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        if self.edgeInfo is not None:
            oprot.writeFieldBegin('edgeInfo', TType.STRUCT, 3)
            self.edgeInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRUCT, 4)
            self.metadata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindResponse(object):
    """
    Attributes:
     - status
     - data
    """


    def __init__(self, status=None, data=None,):
        self.status = status
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype62, _size59) = iprot.readListBegin()
                    for _i63 in range(_size59):
                        _elem64 = iprot.readBinary()
                        self.data.append(_elem64)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FindResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.data))
            for iter65 in self.data:
                oprot.writeBinary(iter65)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindReplica(object):
    """
    Attributes:
     - node
     - edgeInfo
    """


    def __init__(self, node=None, edgeInfo=None,):
        self.node = node
        self.edgeInfo = edgeInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.node = NodeInfoData()
                    self.node.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.edgeInfo = EdgeInfoData()
                    self.edgeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FindReplica')
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.STRUCT, 1)
            self.node.write(oprot)
            oprot.writeFieldEnd()
        if self.edgeInfo is not None:
            oprot.writeFieldBegin('edgeInfo', TType.STRUCT, 2)
            self.edgeInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReadReplica(object):
    """
    Attributes:
     - status
     - data
     - metadata
    """


    def __init__(self, status=None, data=None, metadata=None,):
        self.status = status
        self.data = data
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.metadata = Metadata()
                    self.metadata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReadReplica')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 2)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRUCT, 3)
            self.metadata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryReplica(object):
    """
    Attributes:
     - matchingNodes
    """


    def __init__(self, matchingNodes=None,):
        self.matchingNodes = matchingNodes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.matchingNodes = {}
                    (_ktype67, _vtype68, _size66) = iprot.readMapBegin()
                    for _i70 in range(_size66):
                        _key71 = iprot.readI64()
                        _val72 = []
                        (_etype76, _size73) = iprot.readListBegin()
                        for _i77 in range(_size73):
                            _elem78 = NodeInfoData()
                            _elem78.read(iprot)
                            _val72.append(_elem78)
                        iprot.readListEnd()
                        self.matchingNodes[_key71] = _val72
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QueryReplica')
        if self.matchingNodes is not None:
            oprot.writeFieldBegin('matchingNodes', TType.MAP, 1)
            oprot.writeMapBegin(TType.I64, TType.LIST, len(self.matchingNodes))
            for kiter79, viter80 in self.matchingNodes.items():
                oprot.writeI64(kiter79)
                oprot.writeListBegin(TType.STRUCT, len(viter80))
                for iter81 in viter80:
                    iter81.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.matchingNodes is None:
            raise TProtocolException(message='Required field matchingNodes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WriteResponse(object):
    """
    Attributes:
     - status
     - reliability
    """


    def __init__(self, status=None, reliability=None,):
        self.status = status
        self.reliability = reliability

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.reliability = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WriteResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.BYTE, 2)
            oprot.writeByte(self.reliability)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StreamMetadataUpdateResponse(object):
    """
    Attributes:
     - status
     - code
     - message
    """


    def __init__(self, status=None, code=None, message=None,):
        self.status = status
        self.code = code
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.code = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamMetadataUpdateResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.BYTE, 2)
            oprot.writeByte(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 3)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OpenStreamResponse(object):
    """
    Attributes:
     - status
     - message
     - leaseTime
     - sessionSecret
     - lastBlockId
    """


    def __init__(self, status=None, message=None, leaseTime=None, sessionSecret=None, lastBlockId=None,):
        self.status = status
        self.message = message
        self.leaseTime = leaseTime
        self.sessionSecret = sessionSecret
        self.lastBlockId = lastBlockId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.leaseTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sessionSecret = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.lastBlockId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OpenStreamResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.leaseTime is not None:
            oprot.writeFieldBegin('leaseTime', TType.I32, 3)
            oprot.writeI32(self.leaseTime)
            oprot.writeFieldEnd()
        if self.sessionSecret is not None:
            oprot.writeFieldBegin('sessionSecret', TType.STRING, 4)
            oprot.writeString(self.sessionSecret.encode('utf-8') if sys.version_info[0] == 2 else self.sessionSecret)
            oprot.writeFieldEnd()
        if self.lastBlockId is not None:
            oprot.writeFieldBegin('lastBlockId', TType.I64, 5)
            oprot.writeI64(self.lastBlockId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StreamLeaseRenewalResponse(object):
    """
    Attributes:
     - status
     - code
     - leaseTime
    """


    def __init__(self, status=None, code=None, leaseTime=None,):
        self.status = status
        self.code = code
        self.leaseTime = leaseTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.code = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.leaseTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamLeaseRenewalResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.BYTE, 2)
            oprot.writeByte(self.code)
            oprot.writeFieldEnd()
        if self.leaseTime is not None:
            oprot.writeFieldBegin('leaseTime', TType.I32, 3)
            oprot.writeI32(self.leaseTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BlockMetadataUpdateResponse(object):
    """
    Attributes:
     - status
     - message
     - code
    """


    def __init__(self, status=None, message=None, code=None,):
        self.status = status
        self.message = message
        self.code = code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.code = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BlockMetadataUpdateResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.BYTE, 3)
            oprot.writeByte(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NodeInfoPrimary)
NodeInfoPrimary.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'NodeIP', 'UTF8', None, ),  # 1
    (2, TType.I32, 'port', None, None, ),  # 2
)
all_structs.append(NodeInfoData)
NodeInfoData.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'nodeId', None, None, ),  # 1
    (2, TType.STRING, 'NodeIP', 'UTF8', None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
)
all_structs.append(FogInfoData)
FogInfoData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'nodeInstance', [NodeInfoData, None], None, ),  # 1
    (2, TType.DOUBLE, 'reliability', None, None, ),  # 2
)
all_structs.append(EdgeInfoData)
EdgeInfoData.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'nodeId', None, None, ),  # 1
    (2, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
    (4, TType.BYTE, 'reliability', None, None, ),  # 4
    (5, TType.BYTE, 'storage', None, None, ),  # 5
)
all_structs.append(NeighborInfoData)
NeighborInfoData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'nodeInstance', [NodeInfoData, None], None, ),  # 1
    (2, TType.I16, 'buddyPoolId', None, None, ),  # 2
    (3, TType.DOUBLE, 'pool_reliability', None, None, ),  # 3
    (4, TType.I16, 'pool_size', None, None, ),  # 4
)
all_structs.append(TwoPhasePreCommitRequest)
TwoPhasePreCommitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestType', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'joiningNode', [NodeInfoData, None], None, ),  # 2
    (3, TType.I16, 'coordinatorId', None, None, ),  # 3
)
all_structs.append(TwoPhasePreCommitResponse)
TwoPhasePreCommitResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'responseType', 'UTF8', None, ),  # 1
)
all_structs.append(TwoPhaseCommitRequest)
TwoPhaseCommitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestType', 'UTF8', None, ),  # 1
    (2, TType.I16, 'nodeId', None, None, ),  # 2
    (3, TType.I16, 'coordinatorId', None, None, ),  # 3
)
all_structs.append(TwoPhaseCommitResponse)
TwoPhaseCommitResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'responseType', 'UTF8', None, ),  # 1
    (2, TType.I16, 'buddyPoolId', None, None, ),  # 2
)
all_structs.append(MessagePayload)
MessagePayload.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'nodeId', None, None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
    (4, TType.I16, 'poolId', None, None, ),  # 4
    (5, TType.DOUBLE, 'reliability', None, None, ),  # 5
    (6, TType.STRING, 'bloomFilterUpdates', 'BINARY', None, ),  # 6
    (7, TType.LIST, 'coarseGrainedStats', (TType.STRING, 'BINARY', False), None, ),  # 7
    (8, TType.I16, 'poolSize', None, None, ),  # 8
    (9, TType.MAP, 'poolSizeMap', (TType.I16, None, TType.I16, None, False), None, ),  # 9
)
all_structs.append(BuddyPayload)
BuddyPayload.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'payload', 'BINARY', None, ),  # 1
    (2, TType.MAP, 'mbIdToStreamIdMap', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(NeighborPayload)
NeighborPayload.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'payload', 'BINARY', None, ),  # 1
    (2, TType.MAP, 'mbIdToStreamIdMap', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(EdgePayload)
EdgePayload.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'edgeId', None, None, ),  # 1
    (2, TType.BYTE, 'encodedStorage', None, None, ),  # 2
    (3, TType.BYTE, 'reliability', None, None, ),  # 3
)
all_structs.append(NeighborCount)
NeighborCount.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isLockAcquired', None, None, ),  # 1
    (2, TType.MAP, 'neighborCountPerPool', (TType.I16, None, TType.I16, None, False), None, ),  # 2
    (3, TType.STRUCT, 'nodeInfoData', [NodeInfoData, None], None, ),  # 3
)
all_structs.append(WritableFogData)
WritableFogData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'node', [NodeInfoData, None], None, ),  # 1
    (2, TType.I32, 'preference', None, None, ),  # 2
    (3, TType.DOUBLE, 'reliability', None, None, ),  # 3
    (4, TType.STRUCT, 'edgeInfo', [EdgeInfoData, None], None, ),  # 4
)
all_structs.append(I16TypeStreamMetadata)
I16TypeStreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'value', None, None, ),  # 1
    (2, TType.BOOL, 'updatable', None, None, ),  # 2
)
all_structs.append(I32TypeStreamMetadata)
I32TypeStreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'value', None, None, ),  # 1
    (2, TType.BOOL, 'updatable', None, None, ),  # 2
)
all_structs.append(I64TypeStreamMetadata)
I64TypeStreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'value', None, None, ),  # 1
    (2, TType.BOOL, 'updatable', None, None, ),  # 2
)
all_structs.append(DoubleTypeStreamMetadata)
DoubleTypeStreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'value', None, None, ),  # 1
    (2, TType.BOOL, 'updatable', None, None, ),  # 2
)
all_structs.append(ByteTypeStreamMetadata)
ByteTypeStreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'value', None, None, ),  # 1
    (2, TType.BOOL, 'updatable', None, None, ),  # 2
)
all_structs.append(StringTypeStreamMetadata)
StringTypeStreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'value', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'updatable', None, None, ),  # 2
)
all_structs.append(NodeInfoPrimaryTypeStreamMetadata)
NodeInfoPrimaryTypeStreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'value', [NodeInfoPrimary, None], None, ),  # 1
    (2, TType.BOOL, 'updatable', None, None, ),  # 2
)
all_structs.append(DynamicTypeStreamMetadata)
DynamicTypeStreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'value', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clazz', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'updatable', None, None, ),  # 3
)
all_structs.append(StreamMetadata)
StreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'streamId', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'startTime', [I64TypeStreamMetadata, None], None, ),  # 2
    (3, TType.STRUCT, 'endTime', [I64TypeStreamMetadata, None], None, ),  # 3
    (4, TType.STRUCT, 'reliability', [DoubleTypeStreamMetadata, None], None, ),  # 4
    (5, TType.STRUCT, 'minReplica', [ByteTypeStreamMetadata, None], None, ),  # 5
    (6, TType.STRUCT, 'maxReplica', [ByteTypeStreamMetadata, None], None, ),  # 6
    (7, TType.STRUCT, 'version', [I32TypeStreamMetadata, None], None, ),  # 7
    (8, TType.STRUCT, 'owner', [NodeInfoPrimaryTypeStreamMetadata, None], None, ),  # 8
    (9, TType.MAP, 'otherProperties', (TType.STRING, 'UTF8', TType.STRUCT, [DynamicTypeStreamMetadata, None], False), None, ),  # 9
)
all_structs.append(SQueryRequest)
SQueryRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'startTime', [I64TypeStreamMetadata, None], None, ),  # 1
    (2, TType.STRUCT, 'reliability', [DoubleTypeStreamMetadata, None], None, ),  # 2
    (3, TType.STRUCT, 'minReplica', [ByteTypeStreamMetadata, None], None, ),  # 3
    (4, TType.STRUCT, 'maxReplica', [ByteTypeStreamMetadata, None], None, ),  # 4
    (5, TType.STRUCT, 'version', [I32TypeStreamMetadata, None], None, ),  # 5
    (6, TType.STRUCT, 'owner', [NodeInfoPrimaryTypeStreamMetadata, None], None, ),  # 6
)
all_structs.append(SQueryResponse)
SQueryResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.LIST, 'streamList', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(StreamMetadataInfo)
StreamMetadataInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'streamMetadata', [StreamMetadata, None], None, ),  # 1
    (2, TType.BOOL, 'cached', None, None, ),  # 2
    (3, TType.I64, 'cacheTime', None, None, ),  # 3
)
all_structs.append(Metadata)
Metadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sessionSecret', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'streamId', 'UTF8', None, ),  # 3
    (4, TType.I64, 'mbId', None, None, ),  # 4
    (5, TType.I64, 'timestamp', None, None, ),  # 5
    (6, TType.STRING, 'checksum', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'properties', 'UTF8', None, ),  # 7
)
all_structs.append(ReadResponse)
ReadResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.STRING, 'data', 'BINARY', None, ),  # 2
    (3, TType.STRUCT, 'edgeInfo', [EdgeInfoData, None], None, ),  # 3
    (4, TType.STRUCT, 'metadata', [Metadata, None], None, ),  # 4
)
all_structs.append(FindResponse)
FindResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.LIST, 'data', (TType.STRING, 'BINARY', False), None, ),  # 2
)
all_structs.append(FindReplica)
FindReplica.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'node', [NodeInfoData, None], None, ),  # 1
    (2, TType.STRUCT, 'edgeInfo', [EdgeInfoData, None], None, ),  # 2
)
all_structs.append(ReadReplica)
ReadReplica.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.STRING, 'data', 'BINARY', None, ),  # 2
    (3, TType.STRUCT, 'metadata', [Metadata, None], None, ),  # 3
)
all_structs.append(QueryReplica)
QueryReplica.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'matchingNodes', (TType.I64, None, TType.LIST, (TType.STRUCT, [NodeInfoData, None], False), False), None, ),  # 1
)
all_structs.append(WriteResponse)
WriteResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.BYTE, 'reliability', None, None, ),  # 2
)
all_structs.append(StreamMetadataUpdateResponse)
StreamMetadataUpdateResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.BYTE, 'code', None, None, ),  # 2
    (3, TType.STRING, 'message', 'UTF8', None, ),  # 3
)
all_structs.append(OpenStreamResponse)
OpenStreamResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.I32, 'leaseTime', None, None, ),  # 3
    (4, TType.STRING, 'sessionSecret', 'UTF8', None, ),  # 4
    (5, TType.I64, 'lastBlockId', None, None, ),  # 5
)
all_structs.append(StreamLeaseRenewalResponse)
StreamLeaseRenewalResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.BYTE, 'code', None, None, ),  # 2
    (3, TType.I32, 'leaseTime', None, None, ),  # 3
)
all_structs.append(BlockMetadataUpdateResponse)
BlockMetadataUpdateResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.BYTE, 'code', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
