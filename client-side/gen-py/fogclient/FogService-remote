#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from fogclient import FogService
from fogclient.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('   joinCluster(FogInfoData NodeX, i16 pmin, i16 pmax)')
    print('  TwoPhaseCommitResponse joinPool(FogInfoData NodeX)')
    print('   getCandidatePool(double reliability, i16 pmin)')
    print('  string bootstrapFog(FogInfoData NodeX)')
    print('  TwoPhasePreCommitResponse initiate2PhasePreCommit(TwoPhasePreCommitRequest preCommitRequest)')
    print('  TwoPhaseCommitResponse initiate2PhaseCommit(TwoPhaseCommitRequest commitRequest)')
    print('  void buddyHeartBeat(BuddyPayload payload)')
    print('  void neighborHeartBeat(NeighborPayload payload)')
    print('  NodeInfoData getPoolMember(i16 buddyPoolId)')
    print('   getBuddyPoolMembers()')
    print('  NeighborCount getNeighborCountPerPool()')
    print('   requestNeighbors( requestMap)')
    print('  void nodeJoiningComplete()')
    print('  bool subscribe(NodeInfoData nodeInfoData)')
    print('  bool edgeHeartBeats(EdgePayload edgePayload)')
    print('  i8 edgeJoin(EdgeInfoData edgeInfoData)')
    print('  i8 edgeLeave(EdgeInfoData edgeInfoData)')
    print('  i8 terminate(string streamId)')
    print('  i8 registerStream(string streamId, StreamMetadata streamMetadata)')
    print('  string intentToWrite(i8 clientId)')
    print('  StreamMetadata getStreamMetadata(string streamId, bool checkNeighbors, bool checkBuddies)')
    print('   getWriteLocations(i8 dataLength, Metadata metadata,  blackListedFogs, EdgeInfoData selfInfo)')
    print('  i8 write(Metadata mbMetadata, string data, WritePreference preference)')
    print('   writeNext(string sessionId, Metadata mbData, i8 dataLength)')
    print('  i8 insertMetadata(Metadata mbMetadata, EdgeInfoData edgeInfoData)')
    print('  string findNext(string microbatchId)')
    print('   find(string microbatchId, bool checkNeighbors, bool checkBuddies, EdgeInfoData selfInfo)')
    print('  ReadReplica read(string microbatchId, bool fetchMetadata)')
    print('  QueryReplica findUsingQuery(string metadataKey, string metadataValue, bool checkNeighbors, bool checkBuddies)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = FogService.Client(protocol)
transport.open()

if cmd == 'joinCluster':
    if len(args) != 3:
        print('joinCluster requires 3 args')
        sys.exit(1)
    pp.pprint(client.joinCluster(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'joinPool':
    if len(args) != 1:
        print('joinPool requires 1 args')
        sys.exit(1)
    pp.pprint(client.joinPool(eval(args[0]),))

elif cmd == 'getCandidatePool':
    if len(args) != 2:
        print('getCandidatePool requires 2 args')
        sys.exit(1)
    pp.pprint(client.getCandidatePool(eval(args[0]), eval(args[1]),))

elif cmd == 'bootstrapFog':
    if len(args) != 1:
        print('bootstrapFog requires 1 args')
        sys.exit(1)
    pp.pprint(client.bootstrapFog(eval(args[0]),))

elif cmd == 'initiate2PhasePreCommit':
    if len(args) != 1:
        print('initiate2PhasePreCommit requires 1 args')
        sys.exit(1)
    pp.pprint(client.initiate2PhasePreCommit(eval(args[0]),))

elif cmd == 'initiate2PhaseCommit':
    if len(args) != 1:
        print('initiate2PhaseCommit requires 1 args')
        sys.exit(1)
    pp.pprint(client.initiate2PhaseCommit(eval(args[0]),))

elif cmd == 'buddyHeartBeat':
    if len(args) != 1:
        print('buddyHeartBeat requires 1 args')
        sys.exit(1)
    pp.pprint(client.buddyHeartBeat(eval(args[0]),))

elif cmd == 'neighborHeartBeat':
    if len(args) != 1:
        print('neighborHeartBeat requires 1 args')
        sys.exit(1)
    pp.pprint(client.neighborHeartBeat(eval(args[0]),))

elif cmd == 'getPoolMember':
    if len(args) != 1:
        print('getPoolMember requires 1 args')
        sys.exit(1)
    pp.pprint(client.getPoolMember(eval(args[0]),))

elif cmd == 'getBuddyPoolMembers':
    if len(args) != 0:
        print('getBuddyPoolMembers requires 0 args')
        sys.exit(1)
    pp.pprint(client.getBuddyPoolMembers())

elif cmd == 'getNeighborCountPerPool':
    if len(args) != 0:
        print('getNeighborCountPerPool requires 0 args')
        sys.exit(1)
    pp.pprint(client.getNeighborCountPerPool())

elif cmd == 'requestNeighbors':
    if len(args) != 1:
        print('requestNeighbors requires 1 args')
        sys.exit(1)
    pp.pprint(client.requestNeighbors(eval(args[0]),))

elif cmd == 'nodeJoiningComplete':
    if len(args) != 0:
        print('nodeJoiningComplete requires 0 args')
        sys.exit(1)
    pp.pprint(client.nodeJoiningComplete())

elif cmd == 'subscribe':
    if len(args) != 1:
        print('subscribe requires 1 args')
        sys.exit(1)
    pp.pprint(client.subscribe(eval(args[0]),))

elif cmd == 'edgeHeartBeats':
    if len(args) != 1:
        print('edgeHeartBeats requires 1 args')
        sys.exit(1)
    pp.pprint(client.edgeHeartBeats(eval(args[0]),))

elif cmd == 'edgeJoin':
    if len(args) != 1:
        print('edgeJoin requires 1 args')
        sys.exit(1)
    pp.pprint(client.edgeJoin(eval(args[0]),))

elif cmd == 'edgeLeave':
    if len(args) != 1:
        print('edgeLeave requires 1 args')
        sys.exit(1)
    pp.pprint(client.edgeLeave(eval(args[0]),))

elif cmd == 'terminate':
    if len(args) != 1:
        print('terminate requires 1 args')
        sys.exit(1)
    pp.pprint(client.terminate(args[0],))

elif cmd == 'registerStream':
    if len(args) != 2:
        print('registerStream requires 2 args')
        sys.exit(1)
    pp.pprint(client.registerStream(args[0], eval(args[1]),))

elif cmd == 'intentToWrite':
    if len(args) != 1:
        print('intentToWrite requires 1 args')
        sys.exit(1)
    pp.pprint(client.intentToWrite(eval(args[0]),))

elif cmd == 'getStreamMetadata':
    if len(args) != 3:
        print('getStreamMetadata requires 3 args')
        sys.exit(1)
    pp.pprint(client.getStreamMetadata(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getWriteLocations':
    if len(args) != 4:
        print('getWriteLocations requires 4 args')
        sys.exit(1)
    pp.pprint(client.getWriteLocations(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'write':
    if len(args) != 3:
        print('write requires 3 args')
        sys.exit(1)
    pp.pprint(client.write(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'writeNext':
    if len(args) != 3:
        print('writeNext requires 3 args')
        sys.exit(1)
    pp.pprint(client.writeNext(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'insertMetadata':
    if len(args) != 2:
        print('insertMetadata requires 2 args')
        sys.exit(1)
    pp.pprint(client.insertMetadata(eval(args[0]), eval(args[1]),))

elif cmd == 'findNext':
    if len(args) != 1:
        print('findNext requires 1 args')
        sys.exit(1)
    pp.pprint(client.findNext(args[0],))

elif cmd == 'find':
    if len(args) != 4:
        print('find requires 4 args')
        sys.exit(1)
    pp.pprint(client.find(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'read':
    if len(args) != 2:
        print('read requires 2 args')
        sys.exit(1)
    pp.pprint(client.read(args[0], eval(args[1]),))

elif cmd == 'findUsingQuery':
    if len(args) != 4:
        print('findUsingQuery requires 4 args')
        sys.exit(1)
    pp.pprint(client.findUsingQuery(args[0], args[1], eval(args[2]), eval(args[3]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
