#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class MessageType(object):
    BUDDY_JOIN = 0
    BUDDY_HEARTBEAT = 1
    NEIGHBOUR_HEARTBEAT = 2

    _VALUES_TO_NAMES = {
        0: "BUDDY_JOIN",
        1: "BUDDY_HEARTBEAT",
        2: "NEIGHBOUR_HEARTBEAT",
    }

    _NAMES_TO_VALUES = {
        "BUDDY_JOIN": 0,
        "BUDDY_HEARTBEAT": 1,
        "NEIGHBOUR_HEARTBEAT": 2,
    }


class WritePreference(object):
    HHL = 0
    HLH = 1
    HHH = 2
    HLL = 3
    LHL = 4
    LLH = 5
    LHH = 6
    LLL = 7

    _VALUES_TO_NAMES = {
        0: "HHL",
        1: "HLH",
        2: "HHH",
        3: "HLL",
        4: "LHL",
        5: "LLH",
        6: "LHH",
        7: "LLL",
    }

    _NAMES_TO_VALUES = {
        "HHL": 0,
        "HLH": 1,
        "HHH": 2,
        "HLL": 3,
        "LHL": 4,
        "LLH": 5,
        "LHH": 6,
        "LLL": 7,
    }


class NodeInfoData(object):
    """
    Attributes:
     - nodeId
     - NodeIP
     - port
    """


    def __init__(self, nodeId=None, NodeIP=None, port=None,):
        self.nodeId = nodeId
        self.NodeIP = NodeIP
        self.port = port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.nodeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.NodeIP = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NodeInfoData')
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.I16, 1)
            oprot.writeI16(self.nodeId)
            oprot.writeFieldEnd()
        if self.NodeIP is not None:
            oprot.writeFieldBegin('NodeIP', TType.STRING, 2)
            oprot.writeString(self.NodeIP.encode('utf-8') if sys.version_info[0] == 2 else self.NodeIP)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeId is None:
            raise TProtocolException(message='Required field nodeId is unset!')
        if self.NodeIP is None:
            raise TProtocolException(message='Required field NodeIP is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FogInfoData(object):
    """
    Attributes:
     - nodeInstance
     - reliability
    """


    def __init__(self, nodeInstance=None, reliability=None,):
        self.nodeInstance = nodeInstance
        self.reliability = reliability

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.nodeInstance = NodeInfoData()
                    self.nodeInstance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.reliability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FogInfoData')
        if self.nodeInstance is not None:
            oprot.writeFieldBegin('nodeInstance', TType.STRUCT, 1)
            self.nodeInstance.write(oprot)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.DOUBLE, 2)
            oprot.writeDouble(self.reliability)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeInstance is None:
            raise TProtocolException(message='Required field nodeInstance is unset!')
        if self.reliability is None:
            raise TProtocolException(message='Required field reliability is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EdgeInfoData(object):
    """
    Attributes:
     - nodeId
     - nodeIp
     - port
     - reliability
     - storage
    """


    def __init__(self, nodeId=None, nodeIp=None, port=None, reliability=None, storage=None,):
        self.nodeId = nodeId
        self.nodeIp = nodeIp
        self.port = port
        self.reliability = reliability
        self.storage = storage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.nodeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nodeIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.reliability = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.storage = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EdgeInfoData')
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.I16, 1)
            oprot.writeI16(self.nodeId)
            oprot.writeFieldEnd()
        if self.nodeIp is not None:
            oprot.writeFieldBegin('nodeIp', TType.STRING, 2)
            oprot.writeString(self.nodeIp.encode('utf-8') if sys.version_info[0] == 2 else self.nodeIp)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.BYTE, 4)
            oprot.writeByte(self.reliability)
            oprot.writeFieldEnd()
        if self.storage is not None:
            oprot.writeFieldBegin('storage', TType.BYTE, 5)
            oprot.writeByte(self.storage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeId is None:
            raise TProtocolException(message='Required field nodeId is unset!')
        if self.nodeIp is None:
            raise TProtocolException(message='Required field nodeIp is unset!')
        if self.port is None:
            raise TProtocolException(message='Required field port is unset!')
        if self.reliability is None:
            raise TProtocolException(message='Required field reliability is unset!')
        if self.storage is None:
            raise TProtocolException(message='Required field storage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeighborInfoData(object):
    """
    Attributes:
     - nodeInstance
     - buddyPoolId
     - pool_reliability
     - pool_size
    """


    def __init__(self, nodeInstance=None, buddyPoolId=None, pool_reliability=None, pool_size=None,):
        self.nodeInstance = nodeInstance
        self.buddyPoolId = buddyPoolId
        self.pool_reliability = pool_reliability
        self.pool_size = pool_size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.nodeInstance = NodeInfoData()
                    self.nodeInstance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.buddyPoolId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.pool_reliability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.pool_size = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeighborInfoData')
        if self.nodeInstance is not None:
            oprot.writeFieldBegin('nodeInstance', TType.STRUCT, 1)
            self.nodeInstance.write(oprot)
            oprot.writeFieldEnd()
        if self.buddyPoolId is not None:
            oprot.writeFieldBegin('buddyPoolId', TType.I16, 2)
            oprot.writeI16(self.buddyPoolId)
            oprot.writeFieldEnd()
        if self.pool_reliability is not None:
            oprot.writeFieldBegin('pool_reliability', TType.DOUBLE, 3)
            oprot.writeDouble(self.pool_reliability)
            oprot.writeFieldEnd()
        if self.pool_size is not None:
            oprot.writeFieldBegin('pool_size', TType.I16, 4)
            oprot.writeI16(self.pool_size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeInstance is None:
            raise TProtocolException(message='Required field nodeInstance is unset!')
        if self.buddyPoolId is None:
            raise TProtocolException(message='Required field buddyPoolId is unset!')
        if self.pool_reliability is None:
            raise TProtocolException(message='Required field pool_reliability is unset!')
        if self.pool_size is None:
            raise TProtocolException(message='Required field pool_size is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoPhasePreCommitRequest(object):
    """
    Attributes:
     - requestType
     - joiningNode
     - coordinatorId
    """


    def __init__(self, requestType=None, joiningNode=None, coordinatorId=None,):
        self.requestType = requestType
        self.joiningNode = joiningNode
        self.coordinatorId = coordinatorId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.joiningNode = NodeInfoData()
                    self.joiningNode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.coordinatorId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoPhasePreCommitRequest')
        if self.requestType is not None:
            oprot.writeFieldBegin('requestType', TType.STRING, 1)
            oprot.writeString(self.requestType.encode('utf-8') if sys.version_info[0] == 2 else self.requestType)
            oprot.writeFieldEnd()
        if self.joiningNode is not None:
            oprot.writeFieldBegin('joiningNode', TType.STRUCT, 2)
            self.joiningNode.write(oprot)
            oprot.writeFieldEnd()
        if self.coordinatorId is not None:
            oprot.writeFieldBegin('coordinatorId', TType.I16, 3)
            oprot.writeI16(self.coordinatorId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.requestType is None:
            raise TProtocolException(message='Required field requestType is unset!')
        if self.joiningNode is None:
            raise TProtocolException(message='Required field joiningNode is unset!')
        if self.coordinatorId is None:
            raise TProtocolException(message='Required field coordinatorId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoPhasePreCommitResponse(object):
    """
    Attributes:
     - responseType
    """


    def __init__(self, responseType=None,):
        self.responseType = responseType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.responseType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoPhasePreCommitResponse')
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.STRING, 1)
            oprot.writeString(self.responseType.encode('utf-8') if sys.version_info[0] == 2 else self.responseType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.responseType is None:
            raise TProtocolException(message='Required field responseType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoPhaseCommitRequest(object):
    """
    Attributes:
     - requestType
     - nodeId
     - coordinatorId
    """


    def __init__(self, requestType=None, nodeId=None, coordinatorId=None,):
        self.requestType = requestType
        self.nodeId = nodeId
        self.coordinatorId = coordinatorId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.nodeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.coordinatorId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoPhaseCommitRequest')
        if self.requestType is not None:
            oprot.writeFieldBegin('requestType', TType.STRING, 1)
            oprot.writeString(self.requestType.encode('utf-8') if sys.version_info[0] == 2 else self.requestType)
            oprot.writeFieldEnd()
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.I16, 2)
            oprot.writeI16(self.nodeId)
            oprot.writeFieldEnd()
        if self.coordinatorId is not None:
            oprot.writeFieldBegin('coordinatorId', TType.I16, 3)
            oprot.writeI16(self.coordinatorId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.requestType is None:
            raise TProtocolException(message='Required field requestType is unset!')
        if self.nodeId is None:
            raise TProtocolException(message='Required field nodeId is unset!')
        if self.coordinatorId is None:
            raise TProtocolException(message='Required field coordinatorId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TwoPhaseCommitResponse(object):
    """
    Attributes:
     - responseType
     - buddyPoolId
    """


    def __init__(self, responseType=None, buddyPoolId=None,):
        self.responseType = responseType
        self.buddyPoolId = buddyPoolId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.responseType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.buddyPoolId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TwoPhaseCommitResponse')
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.STRING, 1)
            oprot.writeString(self.responseType.encode('utf-8') if sys.version_info[0] == 2 else self.responseType)
            oprot.writeFieldEnd()
        if self.buddyPoolId is not None:
            oprot.writeFieldBegin('buddyPoolId', TType.I16, 2)
            oprot.writeI16(self.buddyPoolId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.responseType is None:
            raise TProtocolException(message='Required field responseType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessagePayload(object):
    """
    Attributes:
     - nodeId
     - ip
     - port
     - poolId
     - reliability
     - bloomFilterUpdates
     - coarseGrainedStats
     - poolSize
     - poolSizeMap
    """


    def __init__(self, nodeId=None, ip=None, port=None, poolId=None, reliability=None, bloomFilterUpdates=None, coarseGrainedStats=None, poolSize=None, poolSizeMap=None,):
        self.nodeId = nodeId
        self.ip = ip
        self.port = port
        self.poolId = poolId
        self.reliability = reliability
        self.bloomFilterUpdates = bloomFilterUpdates
        self.coarseGrainedStats = coarseGrainedStats
        self.poolSize = poolSize
        self.poolSizeMap = poolSizeMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.nodeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.poolId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.reliability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.bloomFilterUpdates = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.coarseGrainedStats = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readBinary()
                        self.coarseGrainedStats.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.poolSize = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.poolSizeMap = {}
                    (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                    for _i10 in range(_size6):
                        _key11 = iprot.readI16()
                        _val12 = iprot.readI16()
                        self.poolSizeMap[_key11] = _val12
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MessagePayload')
        if self.nodeId is not None:
            oprot.writeFieldBegin('nodeId', TType.I16, 1)
            oprot.writeI16(self.nodeId)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.poolId is not None:
            oprot.writeFieldBegin('poolId', TType.I16, 4)
            oprot.writeI16(self.poolId)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.DOUBLE, 5)
            oprot.writeDouble(self.reliability)
            oprot.writeFieldEnd()
        if self.bloomFilterUpdates is not None:
            oprot.writeFieldBegin('bloomFilterUpdates', TType.STRING, 6)
            oprot.writeBinary(self.bloomFilterUpdates)
            oprot.writeFieldEnd()
        if self.coarseGrainedStats is not None:
            oprot.writeFieldBegin('coarseGrainedStats', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.coarseGrainedStats))
            for iter13 in self.coarseGrainedStats:
                oprot.writeBinary(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.poolSize is not None:
            oprot.writeFieldBegin('poolSize', TType.I16, 8)
            oprot.writeI16(self.poolSize)
            oprot.writeFieldEnd()
        if self.poolSizeMap is not None:
            oprot.writeFieldBegin('poolSizeMap', TType.MAP, 9)
            oprot.writeMapBegin(TType.I16, TType.I16, len(self.poolSizeMap))
            for kiter14, viter15 in self.poolSizeMap.items():
                oprot.writeI16(kiter14)
                oprot.writeI16(viter15)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodeId is None:
            raise TProtocolException(message='Required field nodeId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BuddyPayload(object):
    """
    Attributes:
     - payload
    """


    def __init__(self, payload=None,):
        self.payload = payload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.payload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BuddyPayload')
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 1)
            oprot.writeBinary(self.payload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.payload is None:
            raise TProtocolException(message='Required field payload is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeighborPayload(object):
    """
    Attributes:
     - payload
    """


    def __init__(self, payload=None,):
        self.payload = payload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.payload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeighborPayload')
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 1)
            oprot.writeBinary(self.payload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.payload is None:
            raise TProtocolException(message='Required field payload is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EdgePayload(object):
    """
    Attributes:
     - edgeId
     - encodedStorage
     - reliability
    """


    def __init__(self, edgeId=None, encodedStorage=None, reliability=None,):
        self.edgeId = edgeId
        self.encodedStorage = encodedStorage
        self.reliability = reliability

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.edgeId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.encodedStorage = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.reliability = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EdgePayload')
        if self.edgeId is not None:
            oprot.writeFieldBegin('edgeId', TType.I16, 1)
            oprot.writeI16(self.edgeId)
            oprot.writeFieldEnd()
        if self.encodedStorage is not None:
            oprot.writeFieldBegin('encodedStorage', TType.BYTE, 2)
            oprot.writeByte(self.encodedStorage)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.BYTE, 3)
            oprot.writeByte(self.reliability)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.edgeId is None:
            raise TProtocolException(message='Required field edgeId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeighborCount(object):
    """
    Attributes:
     - isLockAcquired
     - neighborCountPerPool
     - nodeInfoData
    """


    def __init__(self, isLockAcquired=None, neighborCountPerPool=None, nodeInfoData=None,):
        self.isLockAcquired = isLockAcquired
        self.neighborCountPerPool = neighborCountPerPool
        self.nodeInfoData = nodeInfoData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isLockAcquired = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.neighborCountPerPool = {}
                    (_ktype17, _vtype18, _size16) = iprot.readMapBegin()
                    for _i20 in range(_size16):
                        _key21 = iprot.readI16()
                        _val22 = iprot.readI16()
                        self.neighborCountPerPool[_key21] = _val22
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.nodeInfoData = NodeInfoData()
                    self.nodeInfoData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeighborCount')
        if self.isLockAcquired is not None:
            oprot.writeFieldBegin('isLockAcquired', TType.BOOL, 1)
            oprot.writeBool(self.isLockAcquired)
            oprot.writeFieldEnd()
        if self.neighborCountPerPool is not None:
            oprot.writeFieldBegin('neighborCountPerPool', TType.MAP, 2)
            oprot.writeMapBegin(TType.I16, TType.I16, len(self.neighborCountPerPool))
            for kiter23, viter24 in self.neighborCountPerPool.items():
                oprot.writeI16(kiter23)
                oprot.writeI16(viter24)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.nodeInfoData is not None:
            oprot.writeFieldBegin('nodeInfoData', TType.STRUCT, 3)
            self.nodeInfoData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.isLockAcquired is None:
            raise TProtocolException(message='Required field isLockAcquired is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Metadata(object):
    """
    The metadata of a micro-batch which is sent before a write to Fog *

    Attributes:
     - mbId
     - streamId
     - timestamp
     - checksum
     - properties
    """


    def __init__(self, mbId=None, streamId=None, timestamp=None, checksum=None, properties=None,):
        self.mbId = mbId
        self.streamId = streamId
        self.timestamp = timestamp
        self.checksum = checksum
        self.properties = properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mbId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.streamId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.checksum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.properties = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Metadata')
        if self.mbId is not None:
            oprot.writeFieldBegin('mbId', TType.STRING, 1)
            oprot.writeString(self.mbId.encode('utf-8') if sys.version_info[0] == 2 else self.mbId)
            oprot.writeFieldEnd()
        if self.streamId is not None:
            oprot.writeFieldBegin('streamId', TType.STRING, 2)
            oprot.writeString(self.streamId.encode('utf-8') if sys.version_info[0] == 2 else self.streamId)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.STRING, 4)
            oprot.writeString(self.checksum.encode('utf-8') if sys.version_info[0] == 2 else self.checksum)
            oprot.writeFieldEnd()
        if self.properties is not None:
            oprot.writeFieldBegin('properties', TType.STRING, 5)
            oprot.writeString(self.properties.encode('utf-8') if sys.version_info[0] == 2 else self.properties)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.mbId is None:
            raise TProtocolException(message='Required field mbId is unset!')
        if self.streamId is None:
            raise TProtocolException(message='Required field streamId is unset!')
        if self.timestamp is None:
            raise TProtocolException(message='Required field timestamp is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WritableFogData(object):
    """
    Attributes:
     - node
     - preference
     - reliability
     - edgeInfo
    """


    def __init__(self, node=None, preference=None, reliability=None, edgeInfo=None,):
        self.node = node
        self.preference = preference
        self.reliability = reliability
        self.edgeInfo = edgeInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.node = NodeInfoData()
                    self.node.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.preference = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.reliability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.edgeInfo = EdgeInfoData()
                    self.edgeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WritableFogData')
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.STRUCT, 1)
            self.node.write(oprot)
            oprot.writeFieldEnd()
        if self.preference is not None:
            oprot.writeFieldBegin('preference', TType.I32, 2)
            oprot.writeI32(self.preference)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.DOUBLE, 3)
            oprot.writeDouble(self.reliability)
            oprot.writeFieldEnd()
        if self.edgeInfo is not None:
            oprot.writeFieldBegin('edgeInfo', TType.STRUCT, 4)
            self.edgeInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node is None:
            raise TProtocolException(message='Required field node is unset!')
        if self.preference is None:
            raise TProtocolException(message='Required field preference is unset!')
        if self.reliability is None:
            raise TProtocolException(message='Required field reliability is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StreamMetadata(object):
    """
    Attributes:
     - startTime
     - endTime
     - reliability
     - minReplica
     - maxReplica
    """


    def __init__(self, startTime=None, endTime=None, reliability=None, minReplica=None, maxReplica=None,):
        self.startTime = startTime
        self.endTime = endTime
        self.reliability = reliability
        self.minReplica = minReplica
        self.maxReplica = maxReplica

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.reliability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.minReplica = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.maxReplica = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamMetadata')
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 1)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 2)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.DOUBLE, 3)
            oprot.writeDouble(self.reliability)
            oprot.writeFieldEnd()
        if self.minReplica is not None:
            oprot.writeFieldBegin('minReplica', TType.BYTE, 4)
            oprot.writeByte(self.minReplica)
            oprot.writeFieldEnd()
        if self.maxReplica is not None:
            oprot.writeFieldBegin('maxReplica', TType.BYTE, 5)
            oprot.writeByte(self.maxReplica)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.startTime is None:
            raise TProtocolException(message='Required field startTime is unset!')
        if self.reliability is None:
            raise TProtocolException(message='Required field reliability is unset!')
        if self.minReplica is None:
            raise TProtocolException(message='Required field minReplica is unset!')
        if self.maxReplica is None:
            raise TProtocolException(message='Required field maxReplica is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReadResponse(object):
    """
    Attributes:
     - status
     - data
     - edgeInfo
     - metadata
    """


    def __init__(self, status=None, data=None, edgeInfo=None, metadata=None,):
        self.status = status
        self.data = data
        self.edgeInfo = edgeInfo
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.edgeInfo = EdgeInfoData()
                    self.edgeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.metadata = Metadata()
                    self.metadata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReadResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 2)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        if self.edgeInfo is not None:
            oprot.writeFieldBegin('edgeInfo', TType.STRUCT, 3)
            self.edgeInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRUCT, 4)
            self.metadata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindResponse(object):
    """
    Attributes:
     - status
     - data
    """


    def __init__(self, status=None, data=None,):
        self.status = status
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype28, _size25) = iprot.readListBegin()
                    for _i29 in range(_size25):
                        _elem30 = iprot.readBinary()
                        self.data.append(_elem30)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FindResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.data))
            for iter31 in self.data:
                oprot.writeBinary(iter31)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindReplica(object):
    """
    Attributes:
     - node
     - edgeInfo
    """


    def __init__(self, node=None, edgeInfo=None,):
        self.node = node
        self.edgeInfo = edgeInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.node = NodeInfoData()
                    self.node.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.edgeInfo = EdgeInfoData()
                    self.edgeInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FindReplica')
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.STRUCT, 1)
            self.node.write(oprot)
            oprot.writeFieldEnd()
        if self.edgeInfo is not None:
            oprot.writeFieldBegin('edgeInfo', TType.STRUCT, 2)
            self.edgeInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReadReplica(object):
    """
    Attributes:
     - status
     - data
     - metadata
    """


    def __init__(self, status=None, data=None, metadata=None,):
        self.status = status
        self.data = data
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.metadata = Metadata()
                    self.metadata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReadReplica')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 2)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRUCT, 3)
            self.metadata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryReplica(object):
    """
    Attributes:
     - matchingNodes
    """


    def __init__(self, matchingNodes=None,):
        self.matchingNodes = matchingNodes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.matchingNodes = {}
                    (_ktype33, _vtype34, _size32) = iprot.readMapBegin()
                    for _i36 in range(_size32):
                        _key37 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val38 = []
                        (_etype42, _size39) = iprot.readListBegin()
                        for _i43 in range(_size39):
                            _elem44 = NodeInfoData()
                            _elem44.read(iprot)
                            _val38.append(_elem44)
                        iprot.readListEnd()
                        self.matchingNodes[_key37] = _val38
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QueryReplica')
        if self.matchingNodes is not None:
            oprot.writeFieldBegin('matchingNodes', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.matchingNodes))
            for kiter45, viter46 in self.matchingNodes.items():
                oprot.writeString(kiter45.encode('utf-8') if sys.version_info[0] == 2 else kiter45)
                oprot.writeListBegin(TType.STRUCT, len(viter46))
                for iter47 in viter46:
                    iter47.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.matchingNodes is None:
            raise TProtocolException(message='Required field matchingNodes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WriteResponse(object):
    """
    Attributes:
     - status
     - reliability
    """


    def __init__(self, status=None, reliability=None,):
        self.status = status
        self.reliability = reliability

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.reliability = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WriteResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BYTE, 1)
            oprot.writeByte(self.status)
            oprot.writeFieldEnd()
        if self.reliability is not None:
            oprot.writeFieldBegin('reliability', TType.BYTE, 2)
            oprot.writeByte(self.reliability)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NodeInfoData)
NodeInfoData.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'nodeId', None, None, ),  # 1
    (2, TType.STRING, 'NodeIP', 'UTF8', None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
)
all_structs.append(FogInfoData)
FogInfoData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'nodeInstance', [NodeInfoData, None], None, ),  # 1
    (2, TType.DOUBLE, 'reliability', None, None, ),  # 2
)
all_structs.append(EdgeInfoData)
EdgeInfoData.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'nodeId', None, None, ),  # 1
    (2, TType.STRING, 'nodeIp', 'UTF8', None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
    (4, TType.BYTE, 'reliability', None, None, ),  # 4
    (5, TType.BYTE, 'storage', None, None, ),  # 5
)
all_structs.append(NeighborInfoData)
NeighborInfoData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'nodeInstance', [NodeInfoData, None], None, ),  # 1
    (2, TType.I16, 'buddyPoolId', None, None, ),  # 2
    (3, TType.DOUBLE, 'pool_reliability', None, None, ),  # 3
    (4, TType.I16, 'pool_size', None, None, ),  # 4
)
all_structs.append(TwoPhasePreCommitRequest)
TwoPhasePreCommitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestType', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'joiningNode', [NodeInfoData, None], None, ),  # 2
    (3, TType.I16, 'coordinatorId', None, None, ),  # 3
)
all_structs.append(TwoPhasePreCommitResponse)
TwoPhasePreCommitResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'responseType', 'UTF8', None, ),  # 1
)
all_structs.append(TwoPhaseCommitRequest)
TwoPhaseCommitRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestType', 'UTF8', None, ),  # 1
    (2, TType.I16, 'nodeId', None, None, ),  # 2
    (3, TType.I16, 'coordinatorId', None, None, ),  # 3
)
all_structs.append(TwoPhaseCommitResponse)
TwoPhaseCommitResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'responseType', 'UTF8', None, ),  # 1
    (2, TType.I16, 'buddyPoolId', None, None, ),  # 2
)
all_structs.append(MessagePayload)
MessagePayload.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'nodeId', None, None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.I32, 'port', None, None, ),  # 3
    (4, TType.I16, 'poolId', None, None, ),  # 4
    (5, TType.DOUBLE, 'reliability', None, None, ),  # 5
    (6, TType.STRING, 'bloomFilterUpdates', 'BINARY', None, ),  # 6
    (7, TType.LIST, 'coarseGrainedStats', (TType.STRING, 'BINARY', False), None, ),  # 7
    (8, TType.I16, 'poolSize', None, None, ),  # 8
    (9, TType.MAP, 'poolSizeMap', (TType.I16, None, TType.I16, None, False), None, ),  # 9
)
all_structs.append(BuddyPayload)
BuddyPayload.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'payload', 'BINARY', None, ),  # 1
)
all_structs.append(NeighborPayload)
NeighborPayload.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'payload', 'BINARY', None, ),  # 1
)
all_structs.append(EdgePayload)
EdgePayload.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'edgeId', None, None, ),  # 1
    (2, TType.BYTE, 'encodedStorage', None, None, ),  # 2
    (3, TType.BYTE, 'reliability', None, None, ),  # 3
)
all_structs.append(NeighborCount)
NeighborCount.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isLockAcquired', None, None, ),  # 1
    (2, TType.MAP, 'neighborCountPerPool', (TType.I16, None, TType.I16, None, False), None, ),  # 2
    (3, TType.STRUCT, 'nodeInfoData', [NodeInfoData, None], None, ),  # 3
)
all_structs.append(Metadata)
Metadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mbId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'streamId', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
    (4, TType.STRING, 'checksum', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'properties', 'UTF8', None, ),  # 5
)
all_structs.append(WritableFogData)
WritableFogData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'node', [NodeInfoData, None], None, ),  # 1
    (2, TType.I32, 'preference', None, None, ),  # 2
    (3, TType.DOUBLE, 'reliability', None, None, ),  # 3
    (4, TType.STRUCT, 'edgeInfo', [EdgeInfoData, None], None, ),  # 4
)
all_structs.append(StreamMetadata)
StreamMetadata.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'startTime', None, None, ),  # 1
    (2, TType.I64, 'endTime', None, None, ),  # 2
    (3, TType.DOUBLE, 'reliability', None, None, ),  # 3
    (4, TType.BYTE, 'minReplica', None, None, ),  # 4
    (5, TType.BYTE, 'maxReplica', None, None, ),  # 5
)
all_structs.append(ReadResponse)
ReadResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.STRING, 'data', 'BINARY', None, ),  # 2
    (3, TType.STRUCT, 'edgeInfo', [EdgeInfoData, None], None, ),  # 3
    (4, TType.STRUCT, 'metadata', [Metadata, None], None, ),  # 4
)
all_structs.append(FindResponse)
FindResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.LIST, 'data', (TType.STRING, 'BINARY', False), None, ),  # 2
)
all_structs.append(FindReplica)
FindReplica.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'node', [NodeInfoData, None], None, ),  # 1
    (2, TType.STRUCT, 'edgeInfo', [EdgeInfoData, None], None, ),  # 2
)
all_structs.append(ReadReplica)
ReadReplica.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.STRING, 'data', 'BINARY', None, ),  # 2
    (3, TType.STRUCT, 'metadata', [Metadata, None], None, ),  # 3
)
all_structs.append(QueryReplica)
QueryReplica.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'matchingNodes', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [NodeInfoData, None], False), False), None, ),  # 1
)
all_structs.append(WriteResponse)
WriteResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'status', None, None, ),  # 1
    (2, TType.BYTE, 'reliability', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
