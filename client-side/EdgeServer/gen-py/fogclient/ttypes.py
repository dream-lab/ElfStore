#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class MessageType:
  BUDDY_JOIN = 0
  BUDDY_HEARTBEAT = 1
  NEIGHBOUR_HEARTBEAT = 2

  _VALUES_TO_NAMES = {
    0: "BUDDY_JOIN",
    1: "BUDDY_HEARTBEAT",
    2: "NEIGHBOUR_HEARTBEAT",
  }

  _NAMES_TO_VALUES = {
    "BUDDY_JOIN": 0,
    "BUDDY_HEARTBEAT": 1,
    "NEIGHBOUR_HEARTBEAT": 2,
  }


class NodeInfoData:
  """
  Attributes:
   - nodeId
   - NodeIP
   - port
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'nodeId', None, None, ), # 1
    (2, TType.STRING, 'NodeIP', None, None, ), # 2
    (3, TType.I32, 'port', None, None, ), # 3
  )

  def __init__(self, nodeId=None, NodeIP=None, port=None,):
    self.nodeId = nodeId
    self.NodeIP = NodeIP
    self.port = port

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.nodeId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.NodeIP = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.port = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NodeInfoData')
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.I16, 1)
      oprot.writeI16(self.nodeId)
      oprot.writeFieldEnd()
    if self.NodeIP is not None:
      oprot.writeFieldBegin('NodeIP', TType.STRING, 2)
      oprot.writeString(self.NodeIP)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 3)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodeId is None:
      raise TProtocol.TProtocolException(message='Required field nodeId is unset!')
    if self.NodeIP is None:
      raise TProtocol.TProtocolException(message='Required field NodeIP is unset!')
    if self.port is None:
      raise TProtocol.TProtocolException(message='Required field port is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FogInfoData:
  """
  Attributes:
   - nodeInstance
   - reliability
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nodeInstance', (NodeInfoData, NodeInfoData.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'reliability', None, None, ), # 2
  )

  def __init__(self, nodeInstance=None, reliability=None,):
    self.nodeInstance = nodeInstance
    self.reliability = reliability

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nodeInstance = NodeInfoData()
          self.nodeInstance.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.reliability = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FogInfoData')
    if self.nodeInstance is not None:
      oprot.writeFieldBegin('nodeInstance', TType.STRUCT, 1)
      self.nodeInstance.write(oprot)
      oprot.writeFieldEnd()
    if self.reliability is not None:
      oprot.writeFieldBegin('reliability', TType.DOUBLE, 2)
      oprot.writeDouble(self.reliability)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodeInstance is None:
      raise TProtocol.TProtocolException(message='Required field nodeInstance is unset!')
    if self.reliability is None:
      raise TProtocol.TProtocolException(message='Required field reliability is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EdgeInfoData:
  """
  Attributes:
   - nodeId
   - nodeIp
   - port
   - reliability
   - storage
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'nodeId', None, None, ), # 1
    (2, TType.STRING, 'nodeIp', None, None, ), # 2
    (3, TType.I32, 'port', None, None, ), # 3
    (4, TType.BYTE, 'reliability', None, None, ), # 4
    (5, TType.BYTE, 'storage', None, None, ), # 5
  )

  def __init__(self, nodeId=None, nodeIp=None, port=None, reliability=None, storage=None,):
    self.nodeId = nodeId
    self.nodeIp = nodeIp
    self.port = port
    self.reliability = reliability
    self.storage = storage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.nodeId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nodeIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.port = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.reliability = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.storage = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EdgeInfoData')
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.I16, 1)
      oprot.writeI16(self.nodeId)
      oprot.writeFieldEnd()
    if self.nodeIp is not None:
      oprot.writeFieldBegin('nodeIp', TType.STRING, 2)
      oprot.writeString(self.nodeIp)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 3)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.reliability is not None:
      oprot.writeFieldBegin('reliability', TType.BYTE, 4)
      oprot.writeByte(self.reliability)
      oprot.writeFieldEnd()
    if self.storage is not None:
      oprot.writeFieldBegin('storage', TType.BYTE, 5)
      oprot.writeByte(self.storage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodeId is None:
      raise TProtocol.TProtocolException(message='Required field nodeId is unset!')
    if self.nodeIp is None:
      raise TProtocol.TProtocolException(message='Required field nodeIp is unset!')
    if self.port is None:
      raise TProtocol.TProtocolException(message='Required field port is unset!')
    if self.reliability is None:
      raise TProtocol.TProtocolException(message='Required field reliability is unset!')
    if self.storage is None:
      raise TProtocol.TProtocolException(message='Required field storage is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NeighborInfoData:
  """
  Attributes:
   - nodeInstance
   - buddyPoolId
   - pool_reliability
   - pool_size
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nodeInstance', (NodeInfoData, NodeInfoData.thrift_spec), None, ), # 1
    (2, TType.I16, 'buddyPoolId', None, None, ), # 2
    (3, TType.DOUBLE, 'pool_reliability', None, None, ), # 3
    (4, TType.I16, 'pool_size', None, None, ), # 4
  )

  def __init__(self, nodeInstance=None, buddyPoolId=None, pool_reliability=None, pool_size=None,):
    self.nodeInstance = nodeInstance
    self.buddyPoolId = buddyPoolId
    self.pool_reliability = pool_reliability
    self.pool_size = pool_size

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nodeInstance = NodeInfoData()
          self.nodeInstance.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.buddyPoolId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.pool_reliability = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.pool_size = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NeighborInfoData')
    if self.nodeInstance is not None:
      oprot.writeFieldBegin('nodeInstance', TType.STRUCT, 1)
      self.nodeInstance.write(oprot)
      oprot.writeFieldEnd()
    if self.buddyPoolId is not None:
      oprot.writeFieldBegin('buddyPoolId', TType.I16, 2)
      oprot.writeI16(self.buddyPoolId)
      oprot.writeFieldEnd()
    if self.pool_reliability is not None:
      oprot.writeFieldBegin('pool_reliability', TType.DOUBLE, 3)
      oprot.writeDouble(self.pool_reliability)
      oprot.writeFieldEnd()
    if self.pool_size is not None:
      oprot.writeFieldBegin('pool_size', TType.I16, 4)
      oprot.writeI16(self.pool_size)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodeInstance is None:
      raise TProtocol.TProtocolException(message='Required field nodeInstance is unset!')
    if self.buddyPoolId is None:
      raise TProtocol.TProtocolException(message='Required field buddyPoolId is unset!')
    if self.pool_reliability is None:
      raise TProtocol.TProtocolException(message='Required field pool_reliability is unset!')
    if self.pool_size is None:
      raise TProtocol.TProtocolException(message='Required field pool_size is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TwoPhasePreCommitRequest:
  """
  Attributes:
   - requestType
   - joiningNode
   - coordinatorId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestType', None, None, ), # 1
    (2, TType.STRUCT, 'joiningNode', (NodeInfoData, NodeInfoData.thrift_spec), None, ), # 2
    (3, TType.I16, 'coordinatorId', None, None, ), # 3
  )

  def __init__(self, requestType=None, joiningNode=None, coordinatorId=None,):
    self.requestType = requestType
    self.joiningNode = joiningNode
    self.coordinatorId = coordinatorId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.joiningNode = NodeInfoData()
          self.joiningNode.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.coordinatorId = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TwoPhasePreCommitRequest')
    if self.requestType is not None:
      oprot.writeFieldBegin('requestType', TType.STRING, 1)
      oprot.writeString(self.requestType)
      oprot.writeFieldEnd()
    if self.joiningNode is not None:
      oprot.writeFieldBegin('joiningNode', TType.STRUCT, 2)
      self.joiningNode.write(oprot)
      oprot.writeFieldEnd()
    if self.coordinatorId is not None:
      oprot.writeFieldBegin('coordinatorId', TType.I16, 3)
      oprot.writeI16(self.coordinatorId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.requestType is None:
      raise TProtocol.TProtocolException(message='Required field requestType is unset!')
    if self.joiningNode is None:
      raise TProtocol.TProtocolException(message='Required field joiningNode is unset!')
    if self.coordinatorId is None:
      raise TProtocol.TProtocolException(message='Required field coordinatorId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TwoPhasePreCommitResponse:
  """
  Attributes:
   - responseType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'responseType', None, None, ), # 1
  )

  def __init__(self, responseType=None,):
    self.responseType = responseType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.responseType = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TwoPhasePreCommitResponse')
    if self.responseType is not None:
      oprot.writeFieldBegin('responseType', TType.STRING, 1)
      oprot.writeString(self.responseType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.responseType is None:
      raise TProtocol.TProtocolException(message='Required field responseType is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TwoPhaseCommitRequest:
  """
  Attributes:
   - requestType
   - nodeId
   - coordinatorId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'requestType', None, None, ), # 1
    (2, TType.I16, 'nodeId', None, None, ), # 2
    (3, TType.I16, 'coordinatorId', None, None, ), # 3
  )

  def __init__(self, requestType=None, nodeId=None, coordinatorId=None,):
    self.requestType = requestType
    self.nodeId = nodeId
    self.coordinatorId = coordinatorId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.requestType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.nodeId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.coordinatorId = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TwoPhaseCommitRequest')
    if self.requestType is not None:
      oprot.writeFieldBegin('requestType', TType.STRING, 1)
      oprot.writeString(self.requestType)
      oprot.writeFieldEnd()
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.I16, 2)
      oprot.writeI16(self.nodeId)
      oprot.writeFieldEnd()
    if self.coordinatorId is not None:
      oprot.writeFieldBegin('coordinatorId', TType.I16, 3)
      oprot.writeI16(self.coordinatorId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.requestType is None:
      raise TProtocol.TProtocolException(message='Required field requestType is unset!')
    if self.nodeId is None:
      raise TProtocol.TProtocolException(message='Required field nodeId is unset!')
    if self.coordinatorId is None:
      raise TProtocol.TProtocolException(message='Required field coordinatorId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TwoPhaseCommitResponse:
  """
  Attributes:
   - responseType
   - buddyPoolId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'responseType', None, None, ), # 1
    (2, TType.I16, 'buddyPoolId', None, None, ), # 2
  )

  def __init__(self, responseType=None, buddyPoolId=None,):
    self.responseType = responseType
    self.buddyPoolId = buddyPoolId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.responseType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.buddyPoolId = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TwoPhaseCommitResponse')
    if self.responseType is not None:
      oprot.writeFieldBegin('responseType', TType.STRING, 1)
      oprot.writeString(self.responseType)
      oprot.writeFieldEnd()
    if self.buddyPoolId is not None:
      oprot.writeFieldBegin('buddyPoolId', TType.I16, 2)
      oprot.writeI16(self.buddyPoolId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.responseType is None:
      raise TProtocol.TProtocolException(message='Required field responseType is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MessagePayload:
  """
  Attributes:
   - nodeId
   - ip
   - port
   - poolId
   - reliability
   - bloomFilterUpdates
   - coarseGrainedStats
   - poolSize
   - poolSizeMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'nodeId', None, None, ), # 1
    (2, TType.STRING, 'ip', None, None, ), # 2
    (3, TType.I32, 'port', None, None, ), # 3
    (4, TType.I16, 'poolId', None, None, ), # 4
    (5, TType.DOUBLE, 'reliability', None, None, ), # 5
    (6, TType.STRING, 'bloomFilterUpdates', None, None, ), # 6
    (7, TType.LIST, 'coarseGrainedStats', (TType.STRING,None), None, ), # 7
    (8, TType.I16, 'poolSize', None, None, ), # 8
    (9, TType.MAP, 'poolSizeMap', (TType.I16,None,TType.I16,None), None, ), # 9
  )

  def __init__(self, nodeId=None, ip=None, port=None, poolId=None, reliability=None, bloomFilterUpdates=None, coarseGrainedStats=None, poolSize=None, poolSizeMap=None,):
    self.nodeId = nodeId
    self.ip = ip
    self.port = port
    self.poolId = poolId
    self.reliability = reliability
    self.bloomFilterUpdates = bloomFilterUpdates
    self.coarseGrainedStats = coarseGrainedStats
    self.poolSize = poolSize
    self.poolSizeMap = poolSizeMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.nodeId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.port = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.poolId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.reliability = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bloomFilterUpdates = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.coarseGrainedStats = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.coarseGrainedStats.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.poolSize = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.poolSizeMap = {}
          (_ktype7, _vtype8, _size6 ) = iprot.readMapBegin()
          for _i10 in xrange(_size6):
            _key11 = iprot.readI16();
            _val12 = iprot.readI16();
            self.poolSizeMap[_key11] = _val12
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MessagePayload')
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.I16, 1)
      oprot.writeI16(self.nodeId)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 2)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 3)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.poolId is not None:
      oprot.writeFieldBegin('poolId', TType.I16, 4)
      oprot.writeI16(self.poolId)
      oprot.writeFieldEnd()
    if self.reliability is not None:
      oprot.writeFieldBegin('reliability', TType.DOUBLE, 5)
      oprot.writeDouble(self.reliability)
      oprot.writeFieldEnd()
    if self.bloomFilterUpdates is not None:
      oprot.writeFieldBegin('bloomFilterUpdates', TType.STRING, 6)
      oprot.writeString(self.bloomFilterUpdates)
      oprot.writeFieldEnd()
    if self.coarseGrainedStats is not None:
      oprot.writeFieldBegin('coarseGrainedStats', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.coarseGrainedStats))
      for iter13 in self.coarseGrainedStats:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.poolSize is not None:
      oprot.writeFieldBegin('poolSize', TType.I16, 8)
      oprot.writeI16(self.poolSize)
      oprot.writeFieldEnd()
    if self.poolSizeMap is not None:
      oprot.writeFieldBegin('poolSizeMap', TType.MAP, 9)
      oprot.writeMapBegin(TType.I16, TType.I16, len(self.poolSizeMap))
      for kiter14,viter15 in self.poolSizeMap.items():
        oprot.writeI16(kiter14)
        oprot.writeI16(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodeId is None:
      raise TProtocol.TProtocolException(message='Required field nodeId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BuddyPayload:
  """
  Attributes:
   - payload
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'payload', None, None, ), # 1
  )

  def __init__(self, payload=None,):
    self.payload = payload

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.payload = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BuddyPayload')
    if self.payload is not None:
      oprot.writeFieldBegin('payload', TType.STRING, 1)
      oprot.writeString(self.payload)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.payload is None:
      raise TProtocol.TProtocolException(message='Required field payload is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NeighborPayload:
  """
  Attributes:
   - payload
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'payload', None, None, ), # 1
  )

  def __init__(self, payload=None,):
    self.payload = payload

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.payload = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NeighborPayload')
    if self.payload is not None:
      oprot.writeFieldBegin('payload', TType.STRING, 1)
      oprot.writeString(self.payload)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.payload is None:
      raise TProtocol.TProtocolException(message='Required field payload is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EdgePayload:
  """
  Attributes:
   - edgeId
   - encodedStorage
   - reliability
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'edgeId', None, None, ), # 1
    (2, TType.BYTE, 'encodedStorage', None, None, ), # 2
    (3, TType.BYTE, 'reliability', None, None, ), # 3
  )

  def __init__(self, edgeId=None, encodedStorage=None, reliability=None,):
    self.edgeId = edgeId
    self.encodedStorage = encodedStorage
    self.reliability = reliability

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.edgeId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.encodedStorage = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.reliability = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EdgePayload')
    if self.edgeId is not None:
      oprot.writeFieldBegin('edgeId', TType.I16, 1)
      oprot.writeI16(self.edgeId)
      oprot.writeFieldEnd()
    if self.encodedStorage is not None:
      oprot.writeFieldBegin('encodedStorage', TType.BYTE, 2)
      oprot.writeByte(self.encodedStorage)
      oprot.writeFieldEnd()
    if self.reliability is not None:
      oprot.writeFieldBegin('reliability', TType.BYTE, 3)
      oprot.writeByte(self.reliability)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.edgeId is None:
      raise TProtocol.TProtocolException(message='Required field edgeId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NeighborCount:
  """
  Attributes:
   - isLockAcquired
   - neighborCountPerPool
   - nodeInfoData
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'isLockAcquired', None, None, ), # 1
    (2, TType.MAP, 'neighborCountPerPool', (TType.I16,None,TType.I16,None), None, ), # 2
    (3, TType.STRUCT, 'nodeInfoData', (NodeInfoData, NodeInfoData.thrift_spec), None, ), # 3
  )

  def __init__(self, isLockAcquired=None, neighborCountPerPool=None, nodeInfoData=None,):
    self.isLockAcquired = isLockAcquired
    self.neighborCountPerPool = neighborCountPerPool
    self.nodeInfoData = nodeInfoData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.isLockAcquired = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.neighborCountPerPool = {}
          (_ktype17, _vtype18, _size16 ) = iprot.readMapBegin()
          for _i20 in xrange(_size16):
            _key21 = iprot.readI16();
            _val22 = iprot.readI16();
            self.neighborCountPerPool[_key21] = _val22
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.nodeInfoData = NodeInfoData()
          self.nodeInfoData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NeighborCount')
    if self.isLockAcquired is not None:
      oprot.writeFieldBegin('isLockAcquired', TType.BOOL, 1)
      oprot.writeBool(self.isLockAcquired)
      oprot.writeFieldEnd()
    if self.neighborCountPerPool is not None:
      oprot.writeFieldBegin('neighborCountPerPool', TType.MAP, 2)
      oprot.writeMapBegin(TType.I16, TType.I16, len(self.neighborCountPerPool))
      for kiter23,viter24 in self.neighborCountPerPool.items():
        oprot.writeI16(kiter23)
        oprot.writeI16(viter24)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.nodeInfoData is not None:
      oprot.writeFieldBegin('nodeInfoData', TType.STRUCT, 3)
      self.nodeInfoData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.isLockAcquired is None:
      raise TProtocol.TProtocolException(message='Required field isLockAcquired is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Metadata:
  """
  The metadata of a micro-batch which is sent before a write to Fog *

  Attributes:
   - edgeId
   - mbId
   - streamId
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'edgeId', None, None, ), # 1
    (2, TType.STRING, 'mbId', None, None, ), # 2
    (3, TType.STRING, 'streamId', None, None, ), # 3
    (4, TType.STRING, 'timestamp', None, None, ), # 4
  )

  def __init__(self, edgeId=None, mbId=None, streamId=None, timestamp=None,):
    self.edgeId = edgeId
    self.mbId = mbId
    self.streamId = streamId
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.edgeId = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mbId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.streamId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Metadata')
    if self.edgeId is not None:
      oprot.writeFieldBegin('edgeId', TType.I16, 1)
      oprot.writeI16(self.edgeId)
      oprot.writeFieldEnd()
    if self.mbId is not None:
      oprot.writeFieldBegin('mbId', TType.STRING, 2)
      oprot.writeString(self.mbId)
      oprot.writeFieldEnd()
    if self.streamId is not None:
      oprot.writeFieldBegin('streamId', TType.STRING, 3)
      oprot.writeString(self.streamId)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 4)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.edgeId is None:
      raise TProtocol.TProtocolException(message='Required field edgeId is unset!')
    if self.mbId is None:
      raise TProtocol.TProtocolException(message='Required field mbId is unset!')
    if self.streamId is None:
      raise TProtocol.TProtocolException(message='Required field streamId is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
